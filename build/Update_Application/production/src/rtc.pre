
# 1 "src/rtc.c"

# 12 "D:\Program Files\Microchip\xc8\v1.41\include\stdbool.h"
typedef unsigned char bool;

# 13 "D:\Program Files\Microchip\xc8\v1.41\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 18 "src/rtc.h"
extern void RTC_Initialize();
extern void RTC_Run();
extern bool RTC_IsSecondReady();
extern void RTC_SetCurrentTime(const uint8_t * const time);
extern uint8_t RTC_GetYear();
extern uint8_t RTC_GetMonth();
extern uint8_t RTC_GetDay();
extern uint8_t RTC_GetWeekday();
extern uint8_t RTC_GetHour();
extern uint8_t RTC_GetMinute();
extern uint8_t RTC_GetSecond();

# 3 "src/rtc.c"
typedef union {

struct {
uint8_t year;
uint8_t month;
uint8_t day;
uint8_t wk;
uint8_t hour;
uint8_t minute;
uint8_t second;
} datetime;
uint8_t array[7];
} DateTime_t;

typedef struct {
unsigned fSec : 1;
unsigned fMin : 1;
unsigned fHour : 1;
unsigned fWk : 1;
unsigned fDay : 1;
unsigned fMon : 1;
unsigned fYear : 1;
unsigned : 1;
} RTC_Status_t;

# 32
static volatile DateTime_t gCurrentTime;
static RTC_Status_t prvStatus;

uint8_t MONTH_DAY[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

# 42
static bool RTC_IsLeapYear( uint16_t year ) {
if ( year & 0x03 ) {
if ( year % 100 == 0 ) {
if ( year % 400 == 0 ) {
return 1;
}
} else {
return 1;
}
}
return 0;
}

# 58
void RTC_Initialize( ) {
gCurrentTime.datetime.second = 0;
gCurrentTime.datetime.minute = 0;
gCurrentTime.datetime.hour = 0;
gCurrentTime.datetime.wk = 0;
gCurrentTime.datetime.day = 1;
gCurrentTime.datetime.month = 1;
gCurrentTime.datetime.year = 0;
}

# 71
void RTC_Run( ) {
gCurrentTime.datetime.second++;
if ( gCurrentTime.datetime.second >= 60 ) {
gCurrentTime.datetime.second = 0;
gCurrentTime.datetime.minute++;
if ( gCurrentTime.datetime.minute >= 60 ) {
gCurrentTime.datetime.minute = 0;
gCurrentTime.datetime.hour++;
if ( gCurrentTime.datetime.hour >= 24 ) {
gCurrentTime.datetime.hour = 0;
gCurrentTime.datetime.day++;
gCurrentTime.datetime.wk++;
if ( gCurrentTime.datetime.wk > 6 ) {
gCurrentTime.datetime.wk = 0;
}
if ( RTC_IsLeapYear( gCurrentTime.datetime.year + 2000 ) ) {
MONTH_DAY[1] = 29;
} else {
MONTH_DAY[1] = 28;
}
if ( gCurrentTime.datetime.month <= 12 && gCurrentTime.datetime.month > 0 ) {
if ( gCurrentTime.datetime.day > MONTH_DAY[gCurrentTime.datetime.month - 1] ) {
gCurrentTime.datetime.day = 1;
gCurrentTime.datetime.month++;
if ( gCurrentTime.datetime.month > 12 ) {
gCurrentTime.datetime.month = 1;
gCurrentTime.datetime.year++;
}
}
}
}
}
}
prvStatus.fSec = 1;
}

# 116
bool RTC_IsSecondReady( ) {
if ( prvStatus.fSec ) {
prvStatus.fSec = 0;
return 1;
}
return 0;
}

# 133
void RTC_SetCurrentTime( const uint8_t * const time ) {
for ( uint8_t i = 0; i < sizeof ( gCurrentTime ); i++ ) {
gCurrentTime.array[i] = *( time + i );
}
}

# 148
uint8_t RTC_GetYear( ) {
return gCurrentTime.datetime.year;
}

# 161
uint8_t RTC_GetMonth( ) {
return gCurrentTime.datetime.month;
}

# 174
uint8_t RTC_GetDay( ) {
return gCurrentTime.datetime.day;
}

# 187
uint8_t RTC_GetWeekday( ) {
return gCurrentTime.datetime.wk;
}

# 200
uint8_t RTC_GetHour( ) {
return gCurrentTime.datetime.hour;
}

# 213
uint8_t RTC_GetMinute( ) {
return gCurrentTime.datetime.minute;
}

# 226
uint8_t RTC_GetSecond( ) {
return gCurrentTime.datetime.second;
}

