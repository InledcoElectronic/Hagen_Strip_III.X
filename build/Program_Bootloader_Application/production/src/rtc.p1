Version 3.2 HI-TECH Software Intermediate Code
"5 src/rtc.c
[s S2 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 ]
[n S2 . year month day wk hour minute second ]
"3
[u S1 `S2 1 `uc -> 7 `i ]
[n S1 . datetime array ]
"17
[s S3 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S3 . fSec fMin fHour fWk fDay fMon fYear . ]
[v F35 `*Cuc ~T0 @X0 1 t ]
[; ;stdbool.h: 12: typedef unsigned char bool;
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;rtc.h: 18: extern void RTC_Initialize();
[; ;rtc.h: 19: extern void RTC_Run();
[; ;rtc.h: 20: extern bool RTC_IsSecondReady();
[; ;rtc.h: 21: extern void RTC_SetCurrentTime(const uint8_t * const time);
[; ;rtc.h: 22: extern uint8_t RTC_GetYear();
[; ;rtc.h: 23: extern uint8_t RTC_GetMonth();
[; ;rtc.h: 24: extern uint8_t RTC_GetDay();
[; ;rtc.h: 25: extern uint8_t RTC_GetWeekday();
[; ;rtc.h: 26: extern uint8_t RTC_GetHour();
[; ;rtc.h: 27: extern uint8_t RTC_GetMinute();
[; ;rtc.h: 28: extern uint8_t RTC_GetSecond();
[; ;rtc.c: 3: typedef union {
[; ;rtc.c: 5: struct {
[; ;rtc.c: 6: uint8_t year;
[; ;rtc.c: 7: uint8_t month;
[; ;rtc.c: 8: uint8_t day;
[; ;rtc.c: 9: uint8_t wk;
[; ;rtc.c: 10: uint8_t hour;
[; ;rtc.c: 11: uint8_t minute;
[; ;rtc.c: 12: uint8_t second;
[; ;rtc.c: 13: } datetime;
[; ;rtc.c: 14: uint8_t array[7];
[; ;rtc.c: 15: } DateTime_t;
[; ;rtc.c: 17: typedef struct {
[; ;rtc.c: 18: unsigned fSec : 1;
[; ;rtc.c: 19: unsigned fMin : 1;
[; ;rtc.c: 20: unsigned fHour : 1;
[; ;rtc.c: 21: unsigned fWk : 1;
[; ;rtc.c: 22: unsigned fDay : 1;
[; ;rtc.c: 23: unsigned fMon : 1;
[; ;rtc.c: 24: unsigned fYear : 1;
[; ;rtc.c: 25: unsigned : 1;
[; ;rtc.c: 26: } RTC_Status_t;
"32 src/rtc.c
[v _gCurrentTime `VS1 ~T0 @X0 1 s ]
[; ;rtc.c: 32: static volatile DateTime_t gCurrentTime;
"33
[v _prvStatus `S3 ~T0 @X0 1 s ]
[; ;rtc.c: 33: static RTC_Status_t prvStatus;
"35
[v _MONTH_DAY `uc ~T0 @X0 -> 12 `i e ]
[i _MONTH_DAY
:U ..
-> -> 31 `i `uc
-> -> 28 `i `uc
-> -> 31 `i `uc
-> -> 30 `i `uc
-> -> 31 `i `uc
-> -> 30 `i `uc
-> -> 31 `i `uc
-> -> 31 `i `uc
-> -> 30 `i `uc
-> -> 31 `i `uc
-> -> 30 `i `uc
-> -> 31 `i `uc
..
]
[; ;rtc.c: 35: uint8_t MONTH_DAY[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
"42
[v _RTC_IsLeapYear `(uc ~T0 @X0 1 sf1`ui ]
{
[; ;rtc.c: 42: static bool RTC_IsLeapYear( uint16_t year ) {
[e :U _RTC_IsLeapYear ]
[v _year `ui ~T0 @X0 1 r1 ]
[f ]
[; ;rtc.c: 43: if ( year & 0x03 ) {
"43
[e $ ! != & _year -> -> 3 `i `ui -> -> 0 `i `ui 5  ]
{
[; ;rtc.c: 44: if ( year % 100 == 0 ) {
"44
[e $ ! == % _year -> -> 100 `i `ui -> -> 0 `i `ui 6  ]
{
[; ;rtc.c: 45: if ( year % 400 == 0 ) {
"45
[e $ ! == % _year -> -> 400 `i `ui -> -> 0 `i `ui 7  ]
{
[; ;rtc.c: 46: return 1;
"46
[e ) -> -> 1 `i `uc ]
[e $UE 4  ]
"47
}
[e :U 7 ]
"48
}
[; ;rtc.c: 47: }
[; ;rtc.c: 48: } else {
[e $U 8  ]
[e :U 6 ]
{
[; ;rtc.c: 49: return 1;
"49
[e ) -> -> 1 `i `uc ]
[e $UE 4  ]
"50
}
[e :U 8 ]
"51
}
[e :U 5 ]
[; ;rtc.c: 50: }
[; ;rtc.c: 51: }
[; ;rtc.c: 52: return 0;
"52
[e ) -> -> 0 `i `uc ]
[e $UE 4  ]
[; ;rtc.c: 53: }
"53
[e :UE 4 ]
}
"58
[v _RTC_Initialize `(v ~T0 @X0 1 ef ]
{
[; ;rtc.c: 58: void RTC_Initialize( ) {
[e :U _RTC_Initialize ]
[f ]
[; ;rtc.c: 59: gCurrentTime.datetime.second = 0;
"59
[e = . . _gCurrentTime 0 6 -> -> 0 `i `uc ]
[; ;rtc.c: 60: gCurrentTime.datetime.minute = 0;
"60
[e = . . _gCurrentTime 0 5 -> -> 0 `i `uc ]
[; ;rtc.c: 61: gCurrentTime.datetime.hour = 0;
"61
[e = . . _gCurrentTime 0 4 -> -> 0 `i `uc ]
[; ;rtc.c: 62: gCurrentTime.datetime.wk = 0;
"62
[e = . . _gCurrentTime 0 3 -> -> 0 `i `uc ]
[; ;rtc.c: 63: gCurrentTime.datetime.day = 1;
"63
[e = . . _gCurrentTime 0 2 -> -> 1 `i `uc ]
[; ;rtc.c: 64: gCurrentTime.datetime.month = 1;
"64
[e = . . _gCurrentTime 0 1 -> -> 1 `i `uc ]
[; ;rtc.c: 65: gCurrentTime.datetime.year = 0;
"65
[e = . . _gCurrentTime 0 0 -> -> 0 `i `uc ]
[; ;rtc.c: 66: }
"66
[e :UE 9 ]
}
"71
[v _RTC_Run `(v ~T0 @X0 1 ef ]
{
[; ;rtc.c: 71: void RTC_Run( ) {
[e :U _RTC_Run ]
[f ]
[; ;rtc.c: 72: gCurrentTime.datetime.second++;
"72
[e ++ . . _gCurrentTime 0 6 -> -> 1 `i `uc ]
[; ;rtc.c: 73: if ( gCurrentTime.datetime.second >= 60 ) {
"73
[e $ ! >= -> . . _gCurrentTime 0 6 `i -> 60 `i 11  ]
{
[; ;rtc.c: 74: gCurrentTime.datetime.second = 0;
"74
[e = . . _gCurrentTime 0 6 -> -> 0 `i `uc ]
[; ;rtc.c: 75: gCurrentTime.datetime.minute++;
"75
[e ++ . . _gCurrentTime 0 5 -> -> 1 `i `uc ]
[; ;rtc.c: 76: if ( gCurrentTime.datetime.minute >= 60 ) {
"76
[e $ ! >= -> . . _gCurrentTime 0 5 `i -> 60 `i 12  ]
{
[; ;rtc.c: 77: gCurrentTime.datetime.minute = 0;
"77
[e = . . _gCurrentTime 0 5 -> -> 0 `i `uc ]
[; ;rtc.c: 78: gCurrentTime.datetime.hour++;
"78
[e ++ . . _gCurrentTime 0 4 -> -> 1 `i `uc ]
[; ;rtc.c: 79: if ( gCurrentTime.datetime.hour >= 24 ) {
"79
[e $ ! >= -> . . _gCurrentTime 0 4 `i -> 24 `i 13  ]
{
[; ;rtc.c: 80: gCurrentTime.datetime.hour = 0;
"80
[e = . . _gCurrentTime 0 4 -> -> 0 `i `uc ]
[; ;rtc.c: 81: gCurrentTime.datetime.day++;
"81
[e ++ . . _gCurrentTime 0 2 -> -> 1 `i `uc ]
[; ;rtc.c: 82: gCurrentTime.datetime.wk++;
"82
[e ++ . . _gCurrentTime 0 3 -> -> 1 `i `uc ]
[; ;rtc.c: 83: if ( gCurrentTime.datetime.wk > 6 ) {
"83
[e $ ! > -> . . _gCurrentTime 0 3 `i -> 6 `i 14  ]
{
[; ;rtc.c: 84: gCurrentTime.datetime.wk = 0;
"84
[e = . . _gCurrentTime 0 3 -> -> 0 `i `uc ]
"85
}
[e :U 14 ]
[; ;rtc.c: 85: }
[; ;rtc.c: 86: if ( RTC_IsLeapYear( gCurrentTime.datetime.year + 2000 ) ) {
"86
[e $ ! != -> ( _RTC_IsLeapYear (1 -> + -> . . _gCurrentTime 0 0 `i -> 2000 `i `ui `i -> -> -> 0 `i `uc `i 15  ]
{
[; ;rtc.c: 87: MONTH_DAY[1] = 29;
"87
[e = *U + &U _MONTH_DAY * -> -> -> 1 `i `ui `ux -> -> # *U &U _MONTH_DAY `ui `ux -> -> 29 `i `uc ]
"88
}
[; ;rtc.c: 88: } else {
[e $U 16  ]
[e :U 15 ]
{
[; ;rtc.c: 89: MONTH_DAY[1] = 28;
"89
[e = *U + &U _MONTH_DAY * -> -> -> 1 `i `ui `ux -> -> # *U &U _MONTH_DAY `ui `ux -> -> 28 `i `uc ]
"90
}
[e :U 16 ]
[; ;rtc.c: 90: }
[; ;rtc.c: 91: if ( gCurrentTime.datetime.month <= 12 && gCurrentTime.datetime.month > 0 ) {
"91
[e $ ! && <= -> . . _gCurrentTime 0 1 `i -> 12 `i > -> . . _gCurrentTime 0 1 `i -> 0 `i 17  ]
{
[; ;rtc.c: 92: if ( gCurrentTime.datetime.day > MONTH_DAY[gCurrentTime.datetime.month - 1] ) {
"92
[e $ ! > -> . . _gCurrentTime 0 2 `i -> *U + &U _MONTH_DAY * -> -> - -> . . _gCurrentTime 0 1 `i -> 1 `i `ui `ux -> -> # *U &U _MONTH_DAY `ui `ux `i 18  ]
{
[; ;rtc.c: 93: gCurrentTime.datetime.day = 1;
"93
[e = . . _gCurrentTime 0 2 -> -> 1 `i `uc ]
[; ;rtc.c: 94: gCurrentTime.datetime.month++;
"94
[e ++ . . _gCurrentTime 0 1 -> -> 1 `i `uc ]
[; ;rtc.c: 95: if ( gCurrentTime.datetime.month > 12 ) {
"95
[e $ ! > -> . . _gCurrentTime 0 1 `i -> 12 `i 19  ]
{
[; ;rtc.c: 96: gCurrentTime.datetime.month = 1;
"96
[e = . . _gCurrentTime 0 1 -> -> 1 `i `uc ]
[; ;rtc.c: 97: gCurrentTime.datetime.year++;
"97
[e ++ . . _gCurrentTime 0 0 -> -> 1 `i `uc ]
"98
}
[e :U 19 ]
"99
}
[e :U 18 ]
"100
}
[e :U 17 ]
"101
}
[e :U 13 ]
"102
}
[e :U 12 ]
"103
}
[e :U 11 ]
[; ;rtc.c: 98: }
[; ;rtc.c: 99: }
[; ;rtc.c: 100: }
[; ;rtc.c: 101: }
[; ;rtc.c: 102: }
[; ;rtc.c: 103: }
[; ;rtc.c: 104: prvStatus.fSec = 1;
"104
[e = . _prvStatus 0 -> -> 1 `i `uc ]
[; ;rtc.c: 105: }
"105
[e :UE 10 ]
}
"116
[v _RTC_IsSecondReady `(uc ~T0 @X0 1 ef ]
{
[; ;rtc.c: 116: bool RTC_IsSecondReady( ) {
[e :U _RTC_IsSecondReady ]
[f ]
[; ;rtc.c: 117: if ( prvStatus.fSec ) {
"117
[e $ ! != -> . _prvStatus 0 `i -> -> -> 0 `i `uc `i 21  ]
{
[; ;rtc.c: 118: prvStatus.fSec = 0;
"118
[e = . _prvStatus 0 -> -> 0 `i `uc ]
[; ;rtc.c: 119: return 1;
"119
[e ) -> -> 1 `i `uc ]
[e $UE 20  ]
"120
}
[e :U 21 ]
[; ;rtc.c: 120: }
[; ;rtc.c: 121: return 0;
"121
[e ) -> -> 0 `i `uc ]
[e $UE 20  ]
[; ;rtc.c: 122: }
"122
[e :UE 20 ]
}
"133
[v _RTC_SetCurrentTime `(v ~T0 @X0 1 ef1`C*Cuc ]
{
[; ;rtc.c: 133: void RTC_SetCurrentTime( const uint8_t * const time ) {
[e :U _RTC_SetCurrentTime ]
[v F71 `*Cuc ~T0 @X0 1 t ]
[v _time `C*Cuc ~T0 @X0 1 r1 ]
[f ]
[; ;rtc.c: 134: for ( uint8_t i = 0; i < sizeof ( gCurrentTime ); i++ ) {
"134
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `ui -> # _gCurrentTime `ui 23  ]
[e $U 24  ]
[e :U 23 ]
{
[; ;rtc.c: 135: gCurrentTime.array[i] = *( time + i );
"135
[e = *U + &U . _gCurrentTime 1 * -> _i `ux -> -> # *U &U . _gCurrentTime 1 `ui `ux *U + _time * -> _i `ux -> -> # *U _time `ui `ux ]
"136
}
"134
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `ui -> # _gCurrentTime `ui 23  ]
[e :U 24 ]
"136
}
[; ;rtc.c: 136: }
[; ;rtc.c: 137: }
"137
[e :UE 22 ]
}
"148
[v _RTC_GetYear `(uc ~T0 @X0 1 ef ]
{
[; ;rtc.c: 148: uint8_t RTC_GetYear( ) {
[e :U _RTC_GetYear ]
[f ]
[; ;rtc.c: 149: return gCurrentTime.datetime.year;
"149
[e ) . . _gCurrentTime 0 0 ]
[e $UE 26  ]
[; ;rtc.c: 150: }
"150
[e :UE 26 ]
}
"161
[v _RTC_GetMonth `(uc ~T0 @X0 1 ef ]
{
[; ;rtc.c: 161: uint8_t RTC_GetMonth( ) {
[e :U _RTC_GetMonth ]
[f ]
[; ;rtc.c: 162: return gCurrentTime.datetime.month;
"162
[e ) . . _gCurrentTime 0 1 ]
[e $UE 27  ]
[; ;rtc.c: 163: }
"163
[e :UE 27 ]
}
"174
[v _RTC_GetDay `(uc ~T0 @X0 1 ef ]
{
[; ;rtc.c: 174: uint8_t RTC_GetDay( ) {
[e :U _RTC_GetDay ]
[f ]
[; ;rtc.c: 175: return gCurrentTime.datetime.day;
"175
[e ) . . _gCurrentTime 0 2 ]
[e $UE 28  ]
[; ;rtc.c: 176: }
"176
[e :UE 28 ]
}
"187
[v _RTC_GetWeekday `(uc ~T0 @X0 1 ef ]
{
[; ;rtc.c: 187: uint8_t RTC_GetWeekday( ) {
[e :U _RTC_GetWeekday ]
[f ]
[; ;rtc.c: 188: return gCurrentTime.datetime.wk;
"188
[e ) . . _gCurrentTime 0 3 ]
[e $UE 29  ]
[; ;rtc.c: 189: }
"189
[e :UE 29 ]
}
"200
[v _RTC_GetHour `(uc ~T0 @X0 1 ef ]
{
[; ;rtc.c: 200: uint8_t RTC_GetHour( ) {
[e :U _RTC_GetHour ]
[f ]
[; ;rtc.c: 201: return gCurrentTime.datetime.hour;
"201
[e ) . . _gCurrentTime 0 4 ]
[e $UE 30  ]
[; ;rtc.c: 202: }
"202
[e :UE 30 ]
}
"213
[v _RTC_GetMinute `(uc ~T0 @X0 1 ef ]
{
[; ;rtc.c: 213: uint8_t RTC_GetMinute( ) {
[e :U _RTC_GetMinute ]
[f ]
[; ;rtc.c: 214: return gCurrentTime.datetime.minute;
"214
[e ) . . _gCurrentTime 0 5 ]
[e $UE 31  ]
[; ;rtc.c: 215: }
"215
[e :UE 31 ]
}
"226
[v _RTC_GetSecond `(uc ~T0 @X0 1 ef ]
{
[; ;rtc.c: 226: uint8_t RTC_GetSecond( ) {
[e :U _RTC_GetSecond ]
[f ]
[; ;rtc.c: 227: return gCurrentTime.datetime.second;
"227
[e ) . . _gCurrentTime 0 6 ]
[e $UE 32  ]
[; ;rtc.c: 228: }
"228
[e :UE 32 ]
}
