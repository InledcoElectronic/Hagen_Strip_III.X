

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Mon Sep 11 10:44:50 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text16,local,class=CODE,merge=1,delta=2
    23                           	psect	text19,local,class=CODE,merge=1,delta=2
    24                           	psect	text36,local,class=CODE,merge=1,delta=2
    25                           	psect	text42,local,class=CODE,merge=1,delta=2
    26                           	psect	swtext1,local,class=CONST,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	text62,local,class=CODE,merge=1,delta=2
    29                           	psect	text84,local,class=CODE,merge=1,delta=2
    30                           	psect	pa_nodes0,global,class=CODE,delta=2
    31                           	dabs	1,0x7E,2
    32  0000                     
    33                           ; Version 1.41
    34                           ; Generated 25/01/2017 GMT
    35                           ; 
    36                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC16F18345 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     	;# 
    68  0001                     	;# 
    69  0002                     	;# 
    70  0003                     	;# 
    71  0004                     	;# 
    72  0005                     	;# 
    73  0006                     	;# 
    74  0007                     	;# 
    75  0008                     	;# 
    76  0009                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000D                     	;# 
    81  000E                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  0019                     	;# 
    95  001A                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001D                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  0090                     	;# 
   105  0091                     	;# 
   106  0092                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0097                     	;# 
   110  009B                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  0111                     	;# 
   120  0112                     	;# 
   121  0113                     	;# 
   122  0114                     	;# 
   123  0115                     	;# 
   124  0116                     	;# 
   125  0117                     	;# 
   126  0118                     	;# 
   127  0119                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  018E                     	;# 
   131  0197                     	;# 
   132  0199                     	;# 
   133  0199                     	;# 
   134  0199                     	;# 
   135  019A                     	;# 
   136  019A                     	;# 
   137  019A                     	;# 
   138  019B                     	;# 
   139  019B                     	;# 
   140  019B                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019C                     	;# 
   144  019C                     	;# 
   145  019C                     	;# 
   146  019D                     	;# 
   147  019D                     	;# 
   148  019D                     	;# 
   149  019E                     	;# 
   150  019E                     	;# 
   151  019E                     	;# 
   152  019F                     	;# 
   153  019F                     	;# 
   154  019F                     	;# 
   155  019F                     	;# 
   156  019F                     	;# 
   157  020C                     	;# 
   158  020D                     	;# 
   159  020E                     	;# 
   160  0211                     	;# 
   161  0211                     	;# 
   162  0212                     	;# 
   163  0212                     	;# 
   164  0213                     	;# 
   165  0213                     	;# 
   166  0214                     	;# 
   167  0214                     	;# 
   168  0215                     	;# 
   169  0215                     	;# 
   170  0215                     	;# 
   171  0215                     	;# 
   172  0216                     	;# 
   173  0216                     	;# 
   174  0217                     	;# 
   175  0217                     	;# 
   176  0219                     	;# 
   177  021A                     	;# 
   178  021B                     	;# 
   179  021C                     	;# 
   180  021D                     	;# 
   181  021D                     	;# 
   182  021E                     	;# 
   183  021F                     	;# 
   184  028C                     	;# 
   185  028D                     	;# 
   186  028E                     	;# 
   187  0291                     	;# 
   188  0291                     	;# 
   189  0292                     	;# 
   190  0293                     	;# 
   191  0294                     	;# 
   192  0295                     	;# 
   193  0295                     	;# 
   194  0296                     	;# 
   195  0297                     	;# 
   196  0298                     	;# 
   197  029F                     	;# 
   198  030C                     	;# 
   199  030D                     	;# 
   200  030E                     	;# 
   201  0311                     	;# 
   202  0311                     	;# 
   203  0312                     	;# 
   204  0313                     	;# 
   205  0314                     	;# 
   206  0315                     	;# 
   207  0315                     	;# 
   208  0316                     	;# 
   209  0317                     	;# 
   210  0318                     	;# 
   211  038C                     	;# 
   212  038D                     	;# 
   213  038E                     	;# 
   214  0391                     	;# 
   215  0392                     	;# 
   216  0393                     	;# 
   217  0394                     	;# 
   218  0395                     	;# 
   219  0396                     	;# 
   220  0397                     	;# 
   221  0398                     	;# 
   222  0399                     	;# 
   223  039A                     	;# 
   224  039C                     	;# 
   225  039D                     	;# 
   226  039E                     	;# 
   227  039F                     	;# 
   228  0411                     	;# 
   229  0411                     	;# 
   230  0412                     	;# 
   231  0413                     	;# 
   232  0414                     	;# 
   233  0415                     	;# 
   234  0416                     	;# 
   235  0417                     	;# 
   236  0418                     	;# 
   237  0418                     	;# 
   238  0419                     	;# 
   239  041A                     	;# 
   240  041B                     	;# 
   241  041C                     	;# 
   242  041D                     	;# 
   243  041E                     	;# 
   244  041F                     	;# 
   245  0498                     	;# 
   246  0498                     	;# 
   247  0499                     	;# 
   248  049A                     	;# 
   249  049B                     	;# 
   250  049B                     	;# 
   251  049C                     	;# 
   252  049D                     	;# 
   253  049E                     	;# 
   254  049F                     	;# 
   255  0617                     	;# 
   256  0618                     	;# 
   257  0619                     	;# 
   258  0619                     	;# 
   259  061A                     	;# 
   260  061B                     	;# 
   261  061C                     	;# 
   262  061C                     	;# 
   263  061F                     	;# 
   264  0691                     	;# 
   265  0692                     	;# 
   266  0693                     	;# 
   267  0694                     	;# 
   268  0695                     	;# 
   269  0696                     	;# 
   270  0697                     	;# 
   271  0698                     	;# 
   272  0699                     	;# 
   273  0711                     	;# 
   274  0712                     	;# 
   275  0713                     	;# 
   276  0714                     	;# 
   277  0715                     	;# 
   278  0716                     	;# 
   279  0717                     	;# 
   280  0718                     	;# 
   281  0719                     	;# 
   282  0891                     	;# 
   283  0891                     	;# 
   284  0891                     	;# 
   285  0891                     	;# 
   286  0891                     	;# 
   287  0891                     	;# 
   288  0892                     	;# 
   289  0892                     	;# 
   290  0892                     	;# 
   291  0893                     	;# 
   292  0893                     	;# 
   293  0893                     	;# 
   294  0893                     	;# 
   295  0893                     	;# 
   296  0893                     	;# 
   297  0894                     	;# 
   298  0894                     	;# 
   299  0894                     	;# 
   300  0895                     	;# 
   301  0895                     	;# 
   302  0895                     	;# 
   303  0896                     	;# 
   304  0896                     	;# 
   305  0896                     	;# 
   306  089B                     	;# 
   307  0911                     	;# 
   308  0912                     	;# 
   309  0913                     	;# 
   310  0914                     	;# 
   311  0915                     	;# 
   312  0916                     	;# 
   313  0918                     	;# 
   314  0919                     	;# 
   315  091A                     	;# 
   316  091B                     	;# 
   317  091C                     	;# 
   318  091D                     	;# 
   319  091E                     	;# 
   320  091F                     	;# 
   321  0E0F                     	;# 
   322  0E10                     	;# 
   323  0E11                     	;# 
   324  0E12                     	;# 
   325  0E13                     	;# 
   326  0E14                     	;# 
   327  0E15                     	;# 
   328  0E16                     	;# 
   329  0E17                     	;# 
   330  0E18                     	;# 
   331  0E19                     	;# 
   332  0E1A                     	;# 
   333  0E1B                     	;# 
   334  0E1C                     	;# 
   335  0E1D                     	;# 
   336  0E1E                     	;# 
   337  0E1F                     	;# 
   338  0E20                     	;# 
   339  0E21                     	;# 
   340  0E22                     	;# 
   341  0E24                     	;# 
   342  0E25                     	;# 
   343  0E28                     	;# 
   344  0E29                     	;# 
   345  0E2A                     	;# 
   346  0E2B                     	;# 
   347  0E2C                     	;# 
   348  0E2D                     	;# 
   349  0E2E                     	;# 
   350  0E2F                     	;# 
   351  0E90                     	;# 
   352  0E91                     	;# 
   353  0E92                     	;# 
   354  0E94                     	;# 
   355  0E95                     	;# 
   356  0E9C                     	;# 
   357  0E9D                     	;# 
   358  0E9E                     	;# 
   359  0E9F                     	;# 
   360  0EA0                     	;# 
   361  0EA1                     	;# 
   362  0EA2                     	;# 
   363  0EA3                     	;# 
   364  0EA4                     	;# 
   365  0EA5                     	;# 
   366  0EA6                     	;# 
   367  0EA7                     	;# 
   368  0F0F                     	;# 
   369  0F10                     	;# 
   370  0F11                     	;# 
   371  0F12                     	;# 
   372  0F13                     	;# 
   373  0F14                     	;# 
   374  0F15                     	;# 
   375  0F16                     	;# 
   376  0F17                     	;# 
   377  0F18                     	;# 
   378  0F19                     	;# 
   379  0F1A                     	;# 
   380  0F1B                     	;# 
   381  0F1C                     	;# 
   382  0F1D                     	;# 
   383  0F1E                     	;# 
   384  0F1F                     	;# 
   385  0F20                     	;# 
   386  0F21                     	;# 
   387  0F22                     	;# 
   388  0F23                     	;# 
   389  0F24                     	;# 
   390  0F25                     	;# 
   391  0F26                     	;# 
   392  0F27                     	;# 
   393  0F28                     	;# 
   394  0F29                     	;# 
   395  0F2A                     	;# 
   396  0F2B                     	;# 
   397  0F2C                     	;# 
   398  0F2D                     	;# 
   399  0F2E                     	;# 
   400  0F2F                     	;# 
   401  0F30                     	;# 
   402  0F31                     	;# 
   403  0F32                     	;# 
   404  0F33                     	;# 
   405  0F34                     	;# 
   406  0F35                     	;# 
   407  0F36                     	;# 
   408  0F37                     	;# 
   409  0FE4                     	;# 
   410  0FE5                     	;# 
   411  0FE6                     	;# 
   412  0FE7                     	;# 
   413  0FE8                     	;# 
   414  0FE9                     	;# 
   415  0FEA                     	;# 
   416  0FEB                     	;# 
   417  0FED                     	;# 
   418  0FEE                     	;# 
   419  0FEF                     	;# 
   420  0000                     	;# 
   421  0001                     	;# 
   422  0002                     	;# 
   423  0003                     	;# 
   424  0004                     	;# 
   425  0005                     	;# 
   426  0006                     	;# 
   427  0007                     	;# 
   428  0008                     	;# 
   429  0009                     	;# 
   430  000A                     	;# 
   431  000B                     	;# 
   432  000C                     	;# 
   433  000D                     	;# 
   434  000E                     	;# 
   435  0010                     	;# 
   436  0011                     	;# 
   437  0012                     	;# 
   438  0013                     	;# 
   439  0014                     	;# 
   440  0015                     	;# 
   441  0015                     	;# 
   442  0016                     	;# 
   443  0016                     	;# 
   444  0017                     	;# 
   445  0018                     	;# 
   446  0019                     	;# 
   447  0019                     	;# 
   448  001A                     	;# 
   449  001B                     	;# 
   450  001C                     	;# 
   451  001D                     	;# 
   452  001E                     	;# 
   453  001F                     	;# 
   454  008C                     	;# 
   455  008D                     	;# 
   456  008E                     	;# 
   457  0090                     	;# 
   458  0091                     	;# 
   459  0092                     	;# 
   460  0093                     	;# 
   461  0094                     	;# 
   462  0097                     	;# 
   463  009B                     	;# 
   464  009B                     	;# 
   465  009C                     	;# 
   466  009D                     	;# 
   467  009E                     	;# 
   468  009F                     	;# 
   469  010C                     	;# 
   470  010D                     	;# 
   471  010E                     	;# 
   472  0111                     	;# 
   473  0112                     	;# 
   474  0113                     	;# 
   475  0114                     	;# 
   476  0115                     	;# 
   477  0116                     	;# 
   478  0117                     	;# 
   479  0118                     	;# 
   480  0119                     	;# 
   481  018C                     	;# 
   482  018D                     	;# 
   483  018E                     	;# 
   484  0197                     	;# 
   485  0199                     	;# 
   486  0199                     	;# 
   487  0199                     	;# 
   488  019A                     	;# 
   489  019A                     	;# 
   490  019A                     	;# 
   491  019B                     	;# 
   492  019B                     	;# 
   493  019B                     	;# 
   494  019B                     	;# 
   495  019B                     	;# 
   496  019C                     	;# 
   497  019C                     	;# 
   498  019C                     	;# 
   499  019D                     	;# 
   500  019D                     	;# 
   501  019D                     	;# 
   502  019E                     	;# 
   503  019E                     	;# 
   504  019E                     	;# 
   505  019F                     	;# 
   506  019F                     	;# 
   507  019F                     	;# 
   508  019F                     	;# 
   509  019F                     	;# 
   510  020C                     	;# 
   511  020D                     	;# 
   512  020E                     	;# 
   513  0211                     	;# 
   514  0211                     	;# 
   515  0212                     	;# 
   516  0212                     	;# 
   517  0213                     	;# 
   518  0213                     	;# 
   519  0214                     	;# 
   520  0214                     	;# 
   521  0215                     	;# 
   522  0215                     	;# 
   523  0215                     	;# 
   524  0215                     	;# 
   525  0216                     	;# 
   526  0216                     	;# 
   527  0217                     	;# 
   528  0217                     	;# 
   529  0219                     	;# 
   530  021A                     	;# 
   531  021B                     	;# 
   532  021C                     	;# 
   533  021D                     	;# 
   534  021D                     	;# 
   535  021E                     	;# 
   536  021F                     	;# 
   537  028C                     	;# 
   538  028D                     	;# 
   539  028E                     	;# 
   540  0291                     	;# 
   541  0291                     	;# 
   542  0292                     	;# 
   543  0293                     	;# 
   544  0294                     	;# 
   545  0295                     	;# 
   546  0295                     	;# 
   547  0296                     	;# 
   548  0297                     	;# 
   549  0298                     	;# 
   550  029F                     	;# 
   551  030C                     	;# 
   552  030D                     	;# 
   553  030E                     	;# 
   554  0311                     	;# 
   555  0311                     	;# 
   556  0312                     	;# 
   557  0313                     	;# 
   558  0314                     	;# 
   559  0315                     	;# 
   560  0315                     	;# 
   561  0316                     	;# 
   562  0317                     	;# 
   563  0318                     	;# 
   564  038C                     	;# 
   565  038D                     	;# 
   566  038E                     	;# 
   567  0391                     	;# 
   568  0392                     	;# 
   569  0393                     	;# 
   570  0394                     	;# 
   571  0395                     	;# 
   572  0396                     	;# 
   573  0397                     	;# 
   574  0398                     	;# 
   575  0399                     	;# 
   576  039A                     	;# 
   577  039C                     	;# 
   578  039D                     	;# 
   579  039E                     	;# 
   580  039F                     	;# 
   581  0411                     	;# 
   582  0411                     	;# 
   583  0412                     	;# 
   584  0413                     	;# 
   585  0414                     	;# 
   586  0415                     	;# 
   587  0416                     	;# 
   588  0417                     	;# 
   589  0418                     	;# 
   590  0418                     	;# 
   591  0419                     	;# 
   592  041A                     	;# 
   593  041B                     	;# 
   594  041C                     	;# 
   595  041D                     	;# 
   596  041E                     	;# 
   597  041F                     	;# 
   598  0498                     	;# 
   599  0498                     	;# 
   600  0499                     	;# 
   601  049A                     	;# 
   602  049B                     	;# 
   603  049B                     	;# 
   604  049C                     	;# 
   605  049D                     	;# 
   606  049E                     	;# 
   607  049F                     	;# 
   608  0617                     	;# 
   609  0618                     	;# 
   610  0619                     	;# 
   611  0619                     	;# 
   612  061A                     	;# 
   613  061B                     	;# 
   614  061C                     	;# 
   615  061C                     	;# 
   616  061F                     	;# 
   617  0691                     	;# 
   618  0692                     	;# 
   619  0693                     	;# 
   620  0694                     	;# 
   621  0695                     	;# 
   622  0696                     	;# 
   623  0697                     	;# 
   624  0698                     	;# 
   625  0699                     	;# 
   626  0711                     	;# 
   627  0712                     	;# 
   628  0713                     	;# 
   629  0714                     	;# 
   630  0715                     	;# 
   631  0716                     	;# 
   632  0717                     	;# 
   633  0718                     	;# 
   634  0719                     	;# 
   635  0891                     	;# 
   636  0891                     	;# 
   637  0891                     	;# 
   638  0891                     	;# 
   639  0891                     	;# 
   640  0891                     	;# 
   641  0892                     	;# 
   642  0892                     	;# 
   643  0892                     	;# 
   644  0893                     	;# 
   645  0893                     	;# 
   646  0893                     	;# 
   647  0893                     	;# 
   648  0893                     	;# 
   649  0893                     	;# 
   650  0894                     	;# 
   651  0894                     	;# 
   652  0894                     	;# 
   653  0895                     	;# 
   654  0895                     	;# 
   655  0895                     	;# 
   656  0896                     	;# 
   657  0896                     	;# 
   658  0896                     	;# 
   659  089B                     	;# 
   660  0911                     	;# 
   661  0912                     	;# 
   662  0913                     	;# 
   663  0914                     	;# 
   664  0915                     	;# 
   665  0916                     	;# 
   666  0918                     	;# 
   667  0919                     	;# 
   668  091A                     	;# 
   669  091B                     	;# 
   670  091C                     	;# 
   671  091D                     	;# 
   672  091E                     	;# 
   673  091F                     	;# 
   674  0E0F                     	;# 
   675  0E10                     	;# 
   676  0E11                     	;# 
   677  0E12                     	;# 
   678  0E13                     	;# 
   679  0E14                     	;# 
   680  0E15                     	;# 
   681  0E16                     	;# 
   682  0E17                     	;# 
   683  0E18                     	;# 
   684  0E19                     	;# 
   685  0E1A                     	;# 
   686  0E1B                     	;# 
   687  0E1C                     	;# 
   688  0E1D                     	;# 
   689  0E1E                     	;# 
   690  0E1F                     	;# 
   691  0E20                     	;# 
   692  0E21                     	;# 
   693  0E22                     	;# 
   694  0E24                     	;# 
   695  0E25                     	;# 
   696  0E28                     	;# 
   697  0E29                     	;# 
   698  0E2A                     	;# 
   699  0E2B                     	;# 
   700  0E2C                     	;# 
   701  0E2D                     	;# 
   702  0E2E                     	;# 
   703  0E2F                     	;# 
   704  0E90                     	;# 
   705  0E91                     	;# 
   706  0E92                     	;# 
   707  0E94                     	;# 
   708  0E95                     	;# 
   709  0E9C                     	;# 
   710  0E9D                     	;# 
   711  0E9E                     	;# 
   712  0E9F                     	;# 
   713  0EA0                     	;# 
   714  0EA1                     	;# 
   715  0EA2                     	;# 
   716  0EA3                     	;# 
   717  0EA4                     	;# 
   718  0EA5                     	;# 
   719  0EA6                     	;# 
   720  0EA7                     	;# 
   721  0F0F                     	;# 
   722  0F10                     	;# 
   723  0F11                     	;# 
   724  0F12                     	;# 
   725  0F13                     	;# 
   726  0F14                     	;# 
   727  0F15                     	;# 
   728  0F16                     	;# 
   729  0F17                     	;# 
   730  0F18                     	;# 
   731  0F19                     	;# 
   732  0F1A                     	;# 
   733  0F1B                     	;# 
   734  0F1C                     	;# 
   735  0F1D                     	;# 
   736  0F1E                     	;# 
   737  0F1F                     	;# 
   738  0F20                     	;# 
   739  0F21                     	;# 
   740  0F22                     	;# 
   741  0F23                     	;# 
   742  0F24                     	;# 
   743  0F25                     	;# 
   744  0F26                     	;# 
   745  0F27                     	;# 
   746  0F28                     	;# 
   747  0F29                     	;# 
   748  0F2A                     	;# 
   749  0F2B                     	;# 
   750  0F2C                     	;# 
   751  0F2D                     	;# 
   752  0F2E                     	;# 
   753  0F2F                     	;# 
   754  0F30                     	;# 
   755  0F31                     	;# 
   756  0F32                     	;# 
   757  0F33                     	;# 
   758  0F34                     	;# 
   759  0F35                     	;# 
   760  0F36                     	;# 
   761  0F37                     	;# 
   762  0FE4                     	;# 
   763  0FE5                     	;# 
   764  0FE6                     	;# 
   765  0FE7                     	;# 
   766  0FE8                     	;# 
   767  0FE9                     	;# 
   768  0FEA                     	;# 
   769  0FEB                     	;# 
   770  0FED                     	;# 
   771  0FEE                     	;# 
   772  0FEF                     	;# 
   773  0000                     	;# 
   774  0001                     	;# 
   775  0002                     	;# 
   776  0003                     	;# 
   777  0004                     	;# 
   778  0005                     	;# 
   779  0006                     	;# 
   780  0007                     	;# 
   781  0008                     	;# 
   782  0009                     	;# 
   783  000A                     	;# 
   784  000B                     	;# 
   785  000C                     	;# 
   786  000D                     	;# 
   787  000E                     	;# 
   788  0010                     	;# 
   789  0011                     	;# 
   790  0012                     	;# 
   791  0013                     	;# 
   792  0014                     	;# 
   793  0015                     	;# 
   794  0015                     	;# 
   795  0016                     	;# 
   796  0016                     	;# 
   797  0017                     	;# 
   798  0018                     	;# 
   799  0019                     	;# 
   800  0019                     	;# 
   801  001A                     	;# 
   802  001B                     	;# 
   803  001C                     	;# 
   804  001D                     	;# 
   805  001E                     	;# 
   806  001F                     	;# 
   807  008C                     	;# 
   808  008D                     	;# 
   809  008E                     	;# 
   810  0090                     	;# 
   811  0091                     	;# 
   812  0092                     	;# 
   813  0093                     	;# 
   814  0094                     	;# 
   815  0097                     	;# 
   816  009B                     	;# 
   817  009B                     	;# 
   818  009C                     	;# 
   819  009D                     	;# 
   820  009E                     	;# 
   821  009F                     	;# 
   822  010C                     	;# 
   823  010D                     	;# 
   824  010E                     	;# 
   825  0111                     	;# 
   826  0112                     	;# 
   827  0113                     	;# 
   828  0114                     	;# 
   829  0115                     	;# 
   830  0116                     	;# 
   831  0117                     	;# 
   832  0118                     	;# 
   833  0119                     	;# 
   834  018C                     	;# 
   835  018D                     	;# 
   836  018E                     	;# 
   837  0197                     	;# 
   838  0199                     	;# 
   839  0199                     	;# 
   840  0199                     	;# 
   841  019A                     	;# 
   842  019A                     	;# 
   843  019A                     	;# 
   844  019B                     	;# 
   845  019B                     	;# 
   846  019B                     	;# 
   847  019B                     	;# 
   848  019B                     	;# 
   849  019C                     	;# 
   850  019C                     	;# 
   851  019C                     	;# 
   852  019D                     	;# 
   853  019D                     	;# 
   854  019D                     	;# 
   855  019E                     	;# 
   856  019E                     	;# 
   857  019E                     	;# 
   858  019F                     	;# 
   859  019F                     	;# 
   860  019F                     	;# 
   861  019F                     	;# 
   862  019F                     	;# 
   863  020C                     	;# 
   864  020D                     	;# 
   865  020E                     	;# 
   866  0211                     	;# 
   867  0211                     	;# 
   868  0212                     	;# 
   869  0212                     	;# 
   870  0213                     	;# 
   871  0213                     	;# 
   872  0214                     	;# 
   873  0214                     	;# 
   874  0215                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0215                     	;# 
   878  0216                     	;# 
   879  0216                     	;# 
   880  0217                     	;# 
   881  0217                     	;# 
   882  0219                     	;# 
   883  021A                     	;# 
   884  021B                     	;# 
   885  021C                     	;# 
   886  021D                     	;# 
   887  021D                     	;# 
   888  021E                     	;# 
   889  021F                     	;# 
   890  028C                     	;# 
   891  028D                     	;# 
   892  028E                     	;# 
   893  0291                     	;# 
   894  0291                     	;# 
   895  0292                     	;# 
   896  0293                     	;# 
   897  0294                     	;# 
   898  0295                     	;# 
   899  0295                     	;# 
   900  0296                     	;# 
   901  0297                     	;# 
   902  0298                     	;# 
   903  029F                     	;# 
   904  030C                     	;# 
   905  030D                     	;# 
   906  030E                     	;# 
   907  0311                     	;# 
   908  0311                     	;# 
   909  0312                     	;# 
   910  0313                     	;# 
   911  0314                     	;# 
   912  0315                     	;# 
   913  0315                     	;# 
   914  0316                     	;# 
   915  0317                     	;# 
   916  0318                     	;# 
   917  038C                     	;# 
   918  038D                     	;# 
   919  038E                     	;# 
   920  0391                     	;# 
   921  0392                     	;# 
   922  0393                     	;# 
   923  0394                     	;# 
   924  0395                     	;# 
   925  0396                     	;# 
   926  0397                     	;# 
   927  0398                     	;# 
   928  0399                     	;# 
   929  039A                     	;# 
   930  039C                     	;# 
   931  039D                     	;# 
   932  039E                     	;# 
   933  039F                     	;# 
   934  0411                     	;# 
   935  0411                     	;# 
   936  0412                     	;# 
   937  0413                     	;# 
   938  0414                     	;# 
   939  0415                     	;# 
   940  0416                     	;# 
   941  0417                     	;# 
   942  0418                     	;# 
   943  0418                     	;# 
   944  0419                     	;# 
   945  041A                     	;# 
   946  041B                     	;# 
   947  041C                     	;# 
   948  041D                     	;# 
   949  041E                     	;# 
   950  041F                     	;# 
   951  0498                     	;# 
   952  0498                     	;# 
   953  0499                     	;# 
   954  049A                     	;# 
   955  049B                     	;# 
   956  049B                     	;# 
   957  049C                     	;# 
   958  049D                     	;# 
   959  049E                     	;# 
   960  049F                     	;# 
   961  0617                     	;# 
   962  0618                     	;# 
   963  0619                     	;# 
   964  0619                     	;# 
   965  061A                     	;# 
   966  061B                     	;# 
   967  061C                     	;# 
   968  061C                     	;# 
   969  061F                     	;# 
   970  0691                     	;# 
   971  0692                     	;# 
   972  0693                     	;# 
   973  0694                     	;# 
   974  0695                     	;# 
   975  0696                     	;# 
   976  0697                     	;# 
   977  0698                     	;# 
   978  0699                     	;# 
   979  0711                     	;# 
   980  0712                     	;# 
   981  0713                     	;# 
   982  0714                     	;# 
   983  0715                     	;# 
   984  0716                     	;# 
   985  0717                     	;# 
   986  0718                     	;# 
   987  0719                     	;# 
   988  0891                     	;# 
   989  0891                     	;# 
   990  0891                     	;# 
   991  0891                     	;# 
   992  0891                     	;# 
   993  0891                     	;# 
   994  0892                     	;# 
   995  0892                     	;# 
   996  0892                     	;# 
   997  0893                     	;# 
   998  0893                     	;# 
   999  0893                     	;# 
  1000  0893                     	;# 
  1001  0893                     	;# 
  1002  0893                     	;# 
  1003  0894                     	;# 
  1004  0894                     	;# 
  1005  0894                     	;# 
  1006  0895                     	;# 
  1007  0895                     	;# 
  1008  0895                     	;# 
  1009  0896                     	;# 
  1010  0896                     	;# 
  1011  0896                     	;# 
  1012  089B                     	;# 
  1013  0911                     	;# 
  1014  0912                     	;# 
  1015  0913                     	;# 
  1016  0914                     	;# 
  1017  0915                     	;# 
  1018  0916                     	;# 
  1019  0918                     	;# 
  1020  0919                     	;# 
  1021  091A                     	;# 
  1022  091B                     	;# 
  1023  091C                     	;# 
  1024  091D                     	;# 
  1025  091E                     	;# 
  1026  091F                     	;# 
  1027  0E0F                     	;# 
  1028  0E10                     	;# 
  1029  0E11                     	;# 
  1030  0E12                     	;# 
  1031  0E13                     	;# 
  1032  0E14                     	;# 
  1033  0E15                     	;# 
  1034  0E16                     	;# 
  1035  0E17                     	;# 
  1036  0E18                     	;# 
  1037  0E19                     	;# 
  1038  0E1A                     	;# 
  1039  0E1B                     	;# 
  1040  0E1C                     	;# 
  1041  0E1D                     	;# 
  1042  0E1E                     	;# 
  1043  0E1F                     	;# 
  1044  0E20                     	;# 
  1045  0E21                     	;# 
  1046  0E22                     	;# 
  1047  0E24                     	;# 
  1048  0E25                     	;# 
  1049  0E28                     	;# 
  1050  0E29                     	;# 
  1051  0E2A                     	;# 
  1052  0E2B                     	;# 
  1053  0E2C                     	;# 
  1054  0E2D                     	;# 
  1055  0E2E                     	;# 
  1056  0E2F                     	;# 
  1057  0E90                     	;# 
  1058  0E91                     	;# 
  1059  0E92                     	;# 
  1060  0E94                     	;# 
  1061  0E95                     	;# 
  1062  0E9C                     	;# 
  1063  0E9D                     	;# 
  1064  0E9E                     	;# 
  1065  0E9F                     	;# 
  1066  0EA0                     	;# 
  1067  0EA1                     	;# 
  1068  0EA2                     	;# 
  1069  0EA3                     	;# 
  1070  0EA4                     	;# 
  1071  0EA5                     	;# 
  1072  0EA6                     	;# 
  1073  0EA7                     	;# 
  1074  0F0F                     	;# 
  1075  0F10                     	;# 
  1076  0F11                     	;# 
  1077  0F12                     	;# 
  1078  0F13                     	;# 
  1079  0F14                     	;# 
  1080  0F15                     	;# 
  1081  0F16                     	;# 
  1082  0F17                     	;# 
  1083  0F18                     	;# 
  1084  0F19                     	;# 
  1085  0F1A                     	;# 
  1086  0F1B                     	;# 
  1087  0F1C                     	;# 
  1088  0F1D                     	;# 
  1089  0F1E                     	;# 
  1090  0F1F                     	;# 
  1091  0F20                     	;# 
  1092  0F21                     	;# 
  1093  0F22                     	;# 
  1094  0F23                     	;# 
  1095  0F24                     	;# 
  1096  0F25                     	;# 
  1097  0F26                     	;# 
  1098  0F27                     	;# 
  1099  0F28                     	;# 
  1100  0F29                     	;# 
  1101  0F2A                     	;# 
  1102  0F2B                     	;# 
  1103  0F2C                     	;# 
  1104  0F2D                     	;# 
  1105  0F2E                     	;# 
  1106  0F2F                     	;# 
  1107  0F30                     	;# 
  1108  0F31                     	;# 
  1109  0F32                     	;# 
  1110  0F33                     	;# 
  1111  0F34                     	;# 
  1112  0F35                     	;# 
  1113  0F36                     	;# 
  1114  0F37                     	;# 
  1115  0FE4                     	;# 
  1116  0FE5                     	;# 
  1117  0FE6                     	;# 
  1118  0FE7                     	;# 
  1119  0FE8                     	;# 
  1120  0FE9                     	;# 
  1121  0FEA                     	;# 
  1122  0FEB                     	;# 
  1123  0FED                     	;# 
  1124  0FEE                     	;# 
  1125  0FEF                     	;# 
  1126  0000                     	;# 
  1127  0001                     	;# 
  1128  0002                     	;# 
  1129  0003                     	;# 
  1130  0004                     	;# 
  1131  0005                     	;# 
  1132  0006                     	;# 
  1133  0007                     	;# 
  1134  0008                     	;# 
  1135  0009                     	;# 
  1136  000A                     	;# 
  1137  000B                     	;# 
  1138  000C                     	;# 
  1139  000D                     	;# 
  1140  000E                     	;# 
  1141  0010                     	;# 
  1142  0011                     	;# 
  1143  0012                     	;# 
  1144  0013                     	;# 
  1145  0014                     	;# 
  1146  0015                     	;# 
  1147  0015                     	;# 
  1148  0016                     	;# 
  1149  0016                     	;# 
  1150  0017                     	;# 
  1151  0018                     	;# 
  1152  0019                     	;# 
  1153  0019                     	;# 
  1154  001A                     	;# 
  1155  001B                     	;# 
  1156  001C                     	;# 
  1157  001D                     	;# 
  1158  001E                     	;# 
  1159  001F                     	;# 
  1160  008C                     	;# 
  1161  008D                     	;# 
  1162  008E                     	;# 
  1163  0090                     	;# 
  1164  0091                     	;# 
  1165  0092                     	;# 
  1166  0093                     	;# 
  1167  0094                     	;# 
  1168  0097                     	;# 
  1169  009B                     	;# 
  1170  009B                     	;# 
  1171  009C                     	;# 
  1172  009D                     	;# 
  1173  009E                     	;# 
  1174  009F                     	;# 
  1175  010C                     	;# 
  1176  010D                     	;# 
  1177  010E                     	;# 
  1178  0111                     	;# 
  1179  0112                     	;# 
  1180  0113                     	;# 
  1181  0114                     	;# 
  1182  0115                     	;# 
  1183  0116                     	;# 
  1184  0117                     	;# 
  1185  0118                     	;# 
  1186  0119                     	;# 
  1187  018C                     	;# 
  1188  018D                     	;# 
  1189  018E                     	;# 
  1190  0197                     	;# 
  1191  0199                     	;# 
  1192  0199                     	;# 
  1193  0199                     	;# 
  1194  019A                     	;# 
  1195  019A                     	;# 
  1196  019A                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019C                     	;# 
  1203  019C                     	;# 
  1204  019C                     	;# 
  1205  019D                     	;# 
  1206  019D                     	;# 
  1207  019D                     	;# 
  1208  019E                     	;# 
  1209  019E                     	;# 
  1210  019E                     	;# 
  1211  019F                     	;# 
  1212  019F                     	;# 
  1213  019F                     	;# 
  1214  019F                     	;# 
  1215  019F                     	;# 
  1216  020C                     	;# 
  1217  020D                     	;# 
  1218  020E                     	;# 
  1219  0211                     	;# 
  1220  0211                     	;# 
  1221  0212                     	;# 
  1222  0212                     	;# 
  1223  0213                     	;# 
  1224  0213                     	;# 
  1225  0214                     	;# 
  1226  0214                     	;# 
  1227  0215                     	;# 
  1228  0215                     	;# 
  1229  0215                     	;# 
  1230  0215                     	;# 
  1231  0216                     	;# 
  1232  0216                     	;# 
  1233  0217                     	;# 
  1234  0217                     	;# 
  1235  0219                     	;# 
  1236  021A                     	;# 
  1237  021B                     	;# 
  1238  021C                     	;# 
  1239  021D                     	;# 
  1240  021D                     	;# 
  1241  021E                     	;# 
  1242  021F                     	;# 
  1243  028C                     	;# 
  1244  028D                     	;# 
  1245  028E                     	;# 
  1246  0291                     	;# 
  1247  0291                     	;# 
  1248  0292                     	;# 
  1249  0293                     	;# 
  1250  0294                     	;# 
  1251  0295                     	;# 
  1252  0295                     	;# 
  1253  0296                     	;# 
  1254  0297                     	;# 
  1255  0298                     	;# 
  1256  029F                     	;# 
  1257  030C                     	;# 
  1258  030D                     	;# 
  1259  030E                     	;# 
  1260  0311                     	;# 
  1261  0311                     	;# 
  1262  0312                     	;# 
  1263  0313                     	;# 
  1264  0314                     	;# 
  1265  0315                     	;# 
  1266  0315                     	;# 
  1267  0316                     	;# 
  1268  0317                     	;# 
  1269  0318                     	;# 
  1270  038C                     	;# 
  1271  038D                     	;# 
  1272  038E                     	;# 
  1273  0391                     	;# 
  1274  0392                     	;# 
  1275  0393                     	;# 
  1276  0394                     	;# 
  1277  0395                     	;# 
  1278  0396                     	;# 
  1279  0397                     	;# 
  1280  0398                     	;# 
  1281  0399                     	;# 
  1282  039A                     	;# 
  1283  039C                     	;# 
  1284  039D                     	;# 
  1285  039E                     	;# 
  1286  039F                     	;# 
  1287  0411                     	;# 
  1288  0411                     	;# 
  1289  0412                     	;# 
  1290  0413                     	;# 
  1291  0414                     	;# 
  1292  0415                     	;# 
  1293  0416                     	;# 
  1294  0417                     	;# 
  1295  0418                     	;# 
  1296  0418                     	;# 
  1297  0419                     	;# 
  1298  041A                     	;# 
  1299  041B                     	;# 
  1300  041C                     	;# 
  1301  041D                     	;# 
  1302  041E                     	;# 
  1303  041F                     	;# 
  1304  0498                     	;# 
  1305  0498                     	;# 
  1306  0499                     	;# 
  1307  049A                     	;# 
  1308  049B                     	;# 
  1309  049B                     	;# 
  1310  049C                     	;# 
  1311  049D                     	;# 
  1312  049E                     	;# 
  1313  049F                     	;# 
  1314  0617                     	;# 
  1315  0618                     	;# 
  1316  0619                     	;# 
  1317  0619                     	;# 
  1318  061A                     	;# 
  1319  061B                     	;# 
  1320  061C                     	;# 
  1321  061C                     	;# 
  1322  061F                     	;# 
  1323  0691                     	;# 
  1324  0692                     	;# 
  1325  0693                     	;# 
  1326  0694                     	;# 
  1327  0695                     	;# 
  1328  0696                     	;# 
  1329  0697                     	;# 
  1330  0698                     	;# 
  1331  0699                     	;# 
  1332  0711                     	;# 
  1333  0712                     	;# 
  1334  0713                     	;# 
  1335  0714                     	;# 
  1336  0715                     	;# 
  1337  0716                     	;# 
  1338  0717                     	;# 
  1339  0718                     	;# 
  1340  0719                     	;# 
  1341  0891                     	;# 
  1342  0891                     	;# 
  1343  0891                     	;# 
  1344  0891                     	;# 
  1345  0891                     	;# 
  1346  0891                     	;# 
  1347  0892                     	;# 
  1348  0892                     	;# 
  1349  0892                     	;# 
  1350  0893                     	;# 
  1351  0893                     	;# 
  1352  0893                     	;# 
  1353  0893                     	;# 
  1354  0893                     	;# 
  1355  0893                     	;# 
  1356  0894                     	;# 
  1357  0894                     	;# 
  1358  0894                     	;# 
  1359  0895                     	;# 
  1360  0895                     	;# 
  1361  0895                     	;# 
  1362  0896                     	;# 
  1363  0896                     	;# 
  1364  0896                     	;# 
  1365  089B                     	;# 
  1366  0911                     	;# 
  1367  0912                     	;# 
  1368  0913                     	;# 
  1369  0914                     	;# 
  1370  0915                     	;# 
  1371  0916                     	;# 
  1372  0918                     	;# 
  1373  0919                     	;# 
  1374  091A                     	;# 
  1375  091B                     	;# 
  1376  091C                     	;# 
  1377  091D                     	;# 
  1378  091E                     	;# 
  1379  091F                     	;# 
  1380  0E0F                     	;# 
  1381  0E10                     	;# 
  1382  0E11                     	;# 
  1383  0E12                     	;# 
  1384  0E13                     	;# 
  1385  0E14                     	;# 
  1386  0E15                     	;# 
  1387  0E16                     	;# 
  1388  0E17                     	;# 
  1389  0E18                     	;# 
  1390  0E19                     	;# 
  1391  0E1A                     	;# 
  1392  0E1B                     	;# 
  1393  0E1C                     	;# 
  1394  0E1D                     	;# 
  1395  0E1E                     	;# 
  1396  0E1F                     	;# 
  1397  0E20                     	;# 
  1398  0E21                     	;# 
  1399  0E22                     	;# 
  1400  0E24                     	;# 
  1401  0E25                     	;# 
  1402  0E28                     	;# 
  1403  0E29                     	;# 
  1404  0E2A                     	;# 
  1405  0E2B                     	;# 
  1406  0E2C                     	;# 
  1407  0E2D                     	;# 
  1408  0E2E                     	;# 
  1409  0E2F                     	;# 
  1410  0E90                     	;# 
  1411  0E91                     	;# 
  1412  0E92                     	;# 
  1413  0E94                     	;# 
  1414  0E95                     	;# 
  1415  0E9C                     	;# 
  1416  0E9D                     	;# 
  1417  0E9E                     	;# 
  1418  0E9F                     	;# 
  1419  0EA0                     	;# 
  1420  0EA1                     	;# 
  1421  0EA2                     	;# 
  1422  0EA3                     	;# 
  1423  0EA4                     	;# 
  1424  0EA5                     	;# 
  1425  0EA6                     	;# 
  1426  0EA7                     	;# 
  1427  0F0F                     	;# 
  1428  0F10                     	;# 
  1429  0F11                     	;# 
  1430  0F12                     	;# 
  1431  0F13                     	;# 
  1432  0F14                     	;# 
  1433  0F15                     	;# 
  1434  0F16                     	;# 
  1435  0F17                     	;# 
  1436  0F18                     	;# 
  1437  0F19                     	;# 
  1438  0F1A                     	;# 
  1439  0F1B                     	;# 
  1440  0F1C                     	;# 
  1441  0F1D                     	;# 
  1442  0F1E                     	;# 
  1443  0F1F                     	;# 
  1444  0F20                     	;# 
  1445  0F21                     	;# 
  1446  0F22                     	;# 
  1447  0F23                     	;# 
  1448  0F24                     	;# 
  1449  0F25                     	;# 
  1450  0F26                     	;# 
  1451  0F27                     	;# 
  1452  0F28                     	;# 
  1453  0F29                     	;# 
  1454  0F2A                     	;# 
  1455  0F2B                     	;# 
  1456  0F2C                     	;# 
  1457  0F2D                     	;# 
  1458  0F2E                     	;# 
  1459  0F2F                     	;# 
  1460  0F30                     	;# 
  1461  0F31                     	;# 
  1462  0F32                     	;# 
  1463  0F33                     	;# 
  1464  0F34                     	;# 
  1465  0F35                     	;# 
  1466  0F36                     	;# 
  1467  0F37                     	;# 
  1468  0FE4                     	;# 
  1469  0FE5                     	;# 
  1470  0FE6                     	;# 
  1471  0FE7                     	;# 
  1472  0FE8                     	;# 
  1473  0FE9                     	;# 
  1474  0FEA                     	;# 
  1475  0FEB                     	;# 
  1476  0FED                     	;# 
  1477  0FEE                     	;# 
  1478  0FEF                     	;# 
  1479  0000                     	;# 
  1480  0001                     	;# 
  1481  0002                     	;# 
  1482  0003                     	;# 
  1483  0004                     	;# 
  1484  0005                     	;# 
  1485  0006                     	;# 
  1486  0007                     	;# 
  1487  0008                     	;# 
  1488  0009                     	;# 
  1489  000A                     	;# 
  1490  000B                     	;# 
  1491  000C                     	;# 
  1492  000D                     	;# 
  1493  000E                     	;# 
  1494  0010                     	;# 
  1495  0011                     	;# 
  1496  0012                     	;# 
  1497  0013                     	;# 
  1498  0014                     	;# 
  1499  0015                     	;# 
  1500  0015                     	;# 
  1501  0016                     	;# 
  1502  0016                     	;# 
  1503  0017                     	;# 
  1504  0018                     	;# 
  1505  0019                     	;# 
  1506  0019                     	;# 
  1507  001A                     	;# 
  1508  001B                     	;# 
  1509  001C                     	;# 
  1510  001D                     	;# 
  1511  001E                     	;# 
  1512  001F                     	;# 
  1513  008C                     	;# 
  1514  008D                     	;# 
  1515  008E                     	;# 
  1516  0090                     	;# 
  1517  0091                     	;# 
  1518  0092                     	;# 
  1519  0093                     	;# 
  1520  0094                     	;# 
  1521  0097                     	;# 
  1522  009B                     	;# 
  1523  009B                     	;# 
  1524  009C                     	;# 
  1525  009D                     	;# 
  1526  009E                     	;# 
  1527  009F                     	;# 
  1528  010C                     	;# 
  1529  010D                     	;# 
  1530  010E                     	;# 
  1531  0111                     	;# 
  1532  0112                     	;# 
  1533  0113                     	;# 
  1534  0114                     	;# 
  1535  0115                     	;# 
  1536  0116                     	;# 
  1537  0117                     	;# 
  1538  0118                     	;# 
  1539  0119                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0197                     	;# 
  1544  0199                     	;# 
  1545  0199                     	;# 
  1546  0199                     	;# 
  1547  019A                     	;# 
  1548  019A                     	;# 
  1549  019A                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019C                     	;# 
  1556  019C                     	;# 
  1557  019C                     	;# 
  1558  019D                     	;# 
  1559  019D                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019E                     	;# 
  1563  019E                     	;# 
  1564  019F                     	;# 
  1565  019F                     	;# 
  1566  019F                     	;# 
  1567  019F                     	;# 
  1568  019F                     	;# 
  1569  020C                     	;# 
  1570  020D                     	;# 
  1571  020E                     	;# 
  1572  0211                     	;# 
  1573  0211                     	;# 
  1574  0212                     	;# 
  1575  0212                     	;# 
  1576  0213                     	;# 
  1577  0213                     	;# 
  1578  0214                     	;# 
  1579  0214                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0219                     	;# 
  1589  021A                     	;# 
  1590  021B                     	;# 
  1591  021C                     	;# 
  1592  021D                     	;# 
  1593  021D                     	;# 
  1594  021E                     	;# 
  1595  021F                     	;# 
  1596  028C                     	;# 
  1597  028D                     	;# 
  1598  028E                     	;# 
  1599  0291                     	;# 
  1600  0291                     	;# 
  1601  0292                     	;# 
  1602  0293                     	;# 
  1603  0294                     	;# 
  1604  0295                     	;# 
  1605  0295                     	;# 
  1606  0296                     	;# 
  1607  0297                     	;# 
  1608  0298                     	;# 
  1609  029F                     	;# 
  1610  030C                     	;# 
  1611  030D                     	;# 
  1612  030E                     	;# 
  1613  0311                     	;# 
  1614  0311                     	;# 
  1615  0312                     	;# 
  1616  0313                     	;# 
  1617  0314                     	;# 
  1618  0315                     	;# 
  1619  0315                     	;# 
  1620  0316                     	;# 
  1621  0317                     	;# 
  1622  0318                     	;# 
  1623  038C                     	;# 
  1624  038D                     	;# 
  1625  038E                     	;# 
  1626  0391                     	;# 
  1627  0392                     	;# 
  1628  0393                     	;# 
  1629  0394                     	;# 
  1630  0395                     	;# 
  1631  0396                     	;# 
  1632  0397                     	;# 
  1633  0398                     	;# 
  1634  0399                     	;# 
  1635  039A                     	;# 
  1636  039C                     	;# 
  1637  039D                     	;# 
  1638  039E                     	;# 
  1639  039F                     	;# 
  1640  0411                     	;# 
  1641  0411                     	;# 
  1642  0412                     	;# 
  1643  0413                     	;# 
  1644  0414                     	;# 
  1645  0415                     	;# 
  1646  0416                     	;# 
  1647  0417                     	;# 
  1648  0418                     	;# 
  1649  0418                     	;# 
  1650  0419                     	;# 
  1651  041A                     	;# 
  1652  041B                     	;# 
  1653  041C                     	;# 
  1654  041D                     	;# 
  1655  041E                     	;# 
  1656  041F                     	;# 
  1657  0498                     	;# 
  1658  0498                     	;# 
  1659  0499                     	;# 
  1660  049A                     	;# 
  1661  049B                     	;# 
  1662  049B                     	;# 
  1663  049C                     	;# 
  1664  049D                     	;# 
  1665  049E                     	;# 
  1666  049F                     	;# 
  1667  0617                     	;# 
  1668  0618                     	;# 
  1669  0619                     	;# 
  1670  0619                     	;# 
  1671  061A                     	;# 
  1672  061B                     	;# 
  1673  061C                     	;# 
  1674  061C                     	;# 
  1675  061F                     	;# 
  1676  0691                     	;# 
  1677  0692                     	;# 
  1678  0693                     	;# 
  1679  0694                     	;# 
  1680  0695                     	;# 
  1681  0696                     	;# 
  1682  0697                     	;# 
  1683  0698                     	;# 
  1684  0699                     	;# 
  1685  0711                     	;# 
  1686  0712                     	;# 
  1687  0713                     	;# 
  1688  0714                     	;# 
  1689  0715                     	;# 
  1690  0716                     	;# 
  1691  0717                     	;# 
  1692  0718                     	;# 
  1693  0719                     	;# 
  1694  0891                     	;# 
  1695  0891                     	;# 
  1696  0891                     	;# 
  1697  0891                     	;# 
  1698  0891                     	;# 
  1699  0891                     	;# 
  1700  0892                     	;# 
  1701  0892                     	;# 
  1702  0892                     	;# 
  1703  0893                     	;# 
  1704  0893                     	;# 
  1705  0893                     	;# 
  1706  0893                     	;# 
  1707  0893                     	;# 
  1708  0893                     	;# 
  1709  0894                     	;# 
  1710  0894                     	;# 
  1711  0894                     	;# 
  1712  0895                     	;# 
  1713  0895                     	;# 
  1714  0895                     	;# 
  1715  0896                     	;# 
  1716  0896                     	;# 
  1717  0896                     	;# 
  1718  089B                     	;# 
  1719  0911                     	;# 
  1720  0912                     	;# 
  1721  0913                     	;# 
  1722  0914                     	;# 
  1723  0915                     	;# 
  1724  0916                     	;# 
  1725  0918                     	;# 
  1726  0919                     	;# 
  1727  091A                     	;# 
  1728  091B                     	;# 
  1729  091C                     	;# 
  1730  091D                     	;# 
  1731  091E                     	;# 
  1732  091F                     	;# 
  1733  0E0F                     	;# 
  1734  0E10                     	;# 
  1735  0E11                     	;# 
  1736  0E12                     	;# 
  1737  0E13                     	;# 
  1738  0E14                     	;# 
  1739  0E15                     	;# 
  1740  0E16                     	;# 
  1741  0E17                     	;# 
  1742  0E18                     	;# 
  1743  0E19                     	;# 
  1744  0E1A                     	;# 
  1745  0E1B                     	;# 
  1746  0E1C                     	;# 
  1747  0E1D                     	;# 
  1748  0E1E                     	;# 
  1749  0E1F                     	;# 
  1750  0E20                     	;# 
  1751  0E21                     	;# 
  1752  0E22                     	;# 
  1753  0E24                     	;# 
  1754  0E25                     	;# 
  1755  0E28                     	;# 
  1756  0E29                     	;# 
  1757  0E2A                     	;# 
  1758  0E2B                     	;# 
  1759  0E2C                     	;# 
  1760  0E2D                     	;# 
  1761  0E2E                     	;# 
  1762  0E2F                     	;# 
  1763  0E90                     	;# 
  1764  0E91                     	;# 
  1765  0E92                     	;# 
  1766  0E94                     	;# 
  1767  0E95                     	;# 
  1768  0E9C                     	;# 
  1769  0E9D                     	;# 
  1770  0E9E                     	;# 
  1771  0E9F                     	;# 
  1772  0EA0                     	;# 
  1773  0EA1                     	;# 
  1774  0EA2                     	;# 
  1775  0EA3                     	;# 
  1776  0EA4                     	;# 
  1777  0EA5                     	;# 
  1778  0EA6                     	;# 
  1779  0EA7                     	;# 
  1780  0F0F                     	;# 
  1781  0F10                     	;# 
  1782  0F11                     	;# 
  1783  0F12                     	;# 
  1784  0F13                     	;# 
  1785  0F14                     	;# 
  1786  0F15                     	;# 
  1787  0F16                     	;# 
  1788  0F17                     	;# 
  1789  0F18                     	;# 
  1790  0F19                     	;# 
  1791  0F1A                     	;# 
  1792  0F1B                     	;# 
  1793  0F1C                     	;# 
  1794  0F1D                     	;# 
  1795  0F1E                     	;# 
  1796  0F1F                     	;# 
  1797  0F20                     	;# 
  1798  0F21                     	;# 
  1799  0F22                     	;# 
  1800  0F23                     	;# 
  1801  0F24                     	;# 
  1802  0F25                     	;# 
  1803  0F26                     	;# 
  1804  0F27                     	;# 
  1805  0F28                     	;# 
  1806  0F29                     	;# 
  1807  0F2A                     	;# 
  1808  0F2B                     	;# 
  1809  0F2C                     	;# 
  1810  0F2D                     	;# 
  1811  0F2E                     	;# 
  1812  0F2F                     	;# 
  1813  0F30                     	;# 
  1814  0F31                     	;# 
  1815  0F32                     	;# 
  1816  0F33                     	;# 
  1817  0F34                     	;# 
  1818  0F35                     	;# 
  1819  0F36                     	;# 
  1820  0F37                     	;# 
  1821  0FE4                     	;# 
  1822  0FE5                     	;# 
  1823  0FE6                     	;# 
  1824  0FE7                     	;# 
  1825  0FE8                     	;# 
  1826  0FE9                     	;# 
  1827  0FEA                     	;# 
  1828  0FEB                     	;# 
  1829  0FED                     	;# 
  1830  0FEE                     	;# 
  1831  0FEF                     	;# 
  1832  0000                     	;# 
  1833  0001                     	;# 
  1834  0002                     	;# 
  1835  0003                     	;# 
  1836  0004                     	;# 
  1837  0005                     	;# 
  1838  0006                     	;# 
  1839  0007                     	;# 
  1840  0008                     	;# 
  1841  0009                     	;# 
  1842  000A                     	;# 
  1843  000B                     	;# 
  1844  000C                     	;# 
  1845  000D                     	;# 
  1846  000E                     	;# 
  1847  0010                     	;# 
  1848  0011                     	;# 
  1849  0012                     	;# 
  1850  0013                     	;# 
  1851  0014                     	;# 
  1852  0015                     	;# 
  1853  0015                     	;# 
  1854  0016                     	;# 
  1855  0016                     	;# 
  1856  0017                     	;# 
  1857  0018                     	;# 
  1858  0019                     	;# 
  1859  0019                     	;# 
  1860  001A                     	;# 
  1861  001B                     	;# 
  1862  001C                     	;# 
  1863  001D                     	;# 
  1864  001E                     	;# 
  1865  001F                     	;# 
  1866  008C                     	;# 
  1867  008D                     	;# 
  1868  008E                     	;# 
  1869  0090                     	;# 
  1870  0091                     	;# 
  1871  0092                     	;# 
  1872  0093                     	;# 
  1873  0094                     	;# 
  1874  0097                     	;# 
  1875  009B                     	;# 
  1876  009B                     	;# 
  1877  009C                     	;# 
  1878  009D                     	;# 
  1879  009E                     	;# 
  1880  009F                     	;# 
  1881  010C                     	;# 
  1882  010D                     	;# 
  1883  010E                     	;# 
  1884  0111                     	;# 
  1885  0112                     	;# 
  1886  0113                     	;# 
  1887  0114                     	;# 
  1888  0115                     	;# 
  1889  0116                     	;# 
  1890  0117                     	;# 
  1891  0118                     	;# 
  1892  0119                     	;# 
  1893  018C                     	;# 
  1894  018D                     	;# 
  1895  018E                     	;# 
  1896  0197                     	;# 
  1897  0199                     	;# 
  1898  0199                     	;# 
  1899  0199                     	;# 
  1900  019A                     	;# 
  1901  019A                     	;# 
  1902  019A                     	;# 
  1903  019B                     	;# 
  1904  019B                     	;# 
  1905  019B                     	;# 
  1906  019B                     	;# 
  1907  019B                     	;# 
  1908  019C                     	;# 
  1909  019C                     	;# 
  1910  019C                     	;# 
  1911  019D                     	;# 
  1912  019D                     	;# 
  1913  019D                     	;# 
  1914  019E                     	;# 
  1915  019E                     	;# 
  1916  019E                     	;# 
  1917  019F                     	;# 
  1918  019F                     	;# 
  1919  019F                     	;# 
  1920  019F                     	;# 
  1921  019F                     	;# 
  1922  020C                     	;# 
  1923  020D                     	;# 
  1924  020E                     	;# 
  1925  0211                     	;# 
  1926  0211                     	;# 
  1927  0212                     	;# 
  1928  0212                     	;# 
  1929  0213                     	;# 
  1930  0213                     	;# 
  1931  0214                     	;# 
  1932  0214                     	;# 
  1933  0215                     	;# 
  1934  0215                     	;# 
  1935  0215                     	;# 
  1936  0215                     	;# 
  1937  0216                     	;# 
  1938  0216                     	;# 
  1939  0217                     	;# 
  1940  0217                     	;# 
  1941  0219                     	;# 
  1942  021A                     	;# 
  1943  021B                     	;# 
  1944  021C                     	;# 
  1945  021D                     	;# 
  1946  021D                     	;# 
  1947  021E                     	;# 
  1948  021F                     	;# 
  1949  028C                     	;# 
  1950  028D                     	;# 
  1951  028E                     	;# 
  1952  0291                     	;# 
  1953  0291                     	;# 
  1954  0292                     	;# 
  1955  0293                     	;# 
  1956  0294                     	;# 
  1957  0295                     	;# 
  1958  0295                     	;# 
  1959  0296                     	;# 
  1960  0297                     	;# 
  1961  0298                     	;# 
  1962  029F                     	;# 
  1963  030C                     	;# 
  1964  030D                     	;# 
  1965  030E                     	;# 
  1966  0311                     	;# 
  1967  0311                     	;# 
  1968  0312                     	;# 
  1969  0313                     	;# 
  1970  0314                     	;# 
  1971  0315                     	;# 
  1972  0315                     	;# 
  1973  0316                     	;# 
  1974  0317                     	;# 
  1975  0318                     	;# 
  1976  038C                     	;# 
  1977  038D                     	;# 
  1978  038E                     	;# 
  1979  0391                     	;# 
  1980  0392                     	;# 
  1981  0393                     	;# 
  1982  0394                     	;# 
  1983  0395                     	;# 
  1984  0396                     	;# 
  1985  0397                     	;# 
  1986  0398                     	;# 
  1987  0399                     	;# 
  1988  039A                     	;# 
  1989  039C                     	;# 
  1990  039D                     	;# 
  1991  039E                     	;# 
  1992  039F                     	;# 
  1993  0411                     	;# 
  1994  0411                     	;# 
  1995  0412                     	;# 
  1996  0413                     	;# 
  1997  0414                     	;# 
  1998  0415                     	;# 
  1999  0416                     	;# 
  2000  0417                     	;# 
  2001  0418                     	;# 
  2002  0418                     	;# 
  2003  0419                     	;# 
  2004  041A                     	;# 
  2005  041B                     	;# 
  2006  041C                     	;# 
  2007  041D                     	;# 
  2008  041E                     	;# 
  2009  041F                     	;# 
  2010  0498                     	;# 
  2011  0498                     	;# 
  2012  0499                     	;# 
  2013  049A                     	;# 
  2014  049B                     	;# 
  2015  049B                     	;# 
  2016  049C                     	;# 
  2017  049D                     	;# 
  2018  049E                     	;# 
  2019  049F                     	;# 
  2020  0617                     	;# 
  2021  0618                     	;# 
  2022  0619                     	;# 
  2023  0619                     	;# 
  2024  061A                     	;# 
  2025  061B                     	;# 
  2026  061C                     	;# 
  2027  061C                     	;# 
  2028  061F                     	;# 
  2029  0691                     	;# 
  2030  0692                     	;# 
  2031  0693                     	;# 
  2032  0694                     	;# 
  2033  0695                     	;# 
  2034  0696                     	;# 
  2035  0697                     	;# 
  2036  0698                     	;# 
  2037  0699                     	;# 
  2038  0711                     	;# 
  2039  0712                     	;# 
  2040  0713                     	;# 
  2041  0714                     	;# 
  2042  0715                     	;# 
  2043  0716                     	;# 
  2044  0717                     	;# 
  2045  0718                     	;# 
  2046  0719                     	;# 
  2047  0891                     	;# 
  2048  0891                     	;# 
  2049  0891                     	;# 
  2050  0891                     	;# 
  2051  0891                     	;# 
  2052  0891                     	;# 
  2053  0892                     	;# 
  2054  0892                     	;# 
  2055  0892                     	;# 
  2056  0893                     	;# 
  2057  0893                     	;# 
  2058  0893                     	;# 
  2059  0893                     	;# 
  2060  0893                     	;# 
  2061  0893                     	;# 
  2062  0894                     	;# 
  2063  0894                     	;# 
  2064  0894                     	;# 
  2065  0895                     	;# 
  2066  0895                     	;# 
  2067  0895                     	;# 
  2068  0896                     	;# 
  2069  0896                     	;# 
  2070  0896                     	;# 
  2071  089B                     	;# 
  2072  0911                     	;# 
  2073  0912                     	;# 
  2074  0913                     	;# 
  2075  0914                     	;# 
  2076  0915                     	;# 
  2077  0916                     	;# 
  2078  0918                     	;# 
  2079  0919                     	;# 
  2080  091A                     	;# 
  2081  091B                     	;# 
  2082  091C                     	;# 
  2083  091D                     	;# 
  2084  091E                     	;# 
  2085  091F                     	;# 
  2086  0E0F                     	;# 
  2087  0E10                     	;# 
  2088  0E11                     	;# 
  2089  0E12                     	;# 
  2090  0E13                     	;# 
  2091  0E14                     	;# 
  2092  0E15                     	;# 
  2093  0E16                     	;# 
  2094  0E17                     	;# 
  2095  0E18                     	;# 
  2096  0E19                     	;# 
  2097  0E1A                     	;# 
  2098  0E1B                     	;# 
  2099  0E1C                     	;# 
  2100  0E1D                     	;# 
  2101  0E1E                     	;# 
  2102  0E1F                     	;# 
  2103  0E20                     	;# 
  2104  0E21                     	;# 
  2105  0E22                     	;# 
  2106  0E24                     	;# 
  2107  0E25                     	;# 
  2108  0E28                     	;# 
  2109  0E29                     	;# 
  2110  0E2A                     	;# 
  2111  0E2B                     	;# 
  2112  0E2C                     	;# 
  2113  0E2D                     	;# 
  2114  0E2E                     	;# 
  2115  0E2F                     	;# 
  2116  0E90                     	;# 
  2117  0E91                     	;# 
  2118  0E92                     	;# 
  2119  0E94                     	;# 
  2120  0E95                     	;# 
  2121  0E9C                     	;# 
  2122  0E9D                     	;# 
  2123  0E9E                     	;# 
  2124  0E9F                     	;# 
  2125  0EA0                     	;# 
  2126  0EA1                     	;# 
  2127  0EA2                     	;# 
  2128  0EA3                     	;# 
  2129  0EA4                     	;# 
  2130  0EA5                     	;# 
  2131  0EA6                     	;# 
  2132  0EA7                     	;# 
  2133  0F0F                     	;# 
  2134  0F10                     	;# 
  2135  0F11                     	;# 
  2136  0F12                     	;# 
  2137  0F13                     	;# 
  2138  0F14                     	;# 
  2139  0F15                     	;# 
  2140  0F16                     	;# 
  2141  0F17                     	;# 
  2142  0F18                     	;# 
  2143  0F19                     	;# 
  2144  0F1A                     	;# 
  2145  0F1B                     	;# 
  2146  0F1C                     	;# 
  2147  0F1D                     	;# 
  2148  0F1E                     	;# 
  2149  0F1F                     	;# 
  2150  0F20                     	;# 
  2151  0F21                     	;# 
  2152  0F22                     	;# 
  2153  0F23                     	;# 
  2154  0F24                     	;# 
  2155  0F25                     	;# 
  2156  0F26                     	;# 
  2157  0F27                     	;# 
  2158  0F28                     	;# 
  2159  0F29                     	;# 
  2160  0F2A                     	;# 
  2161  0F2B                     	;# 
  2162  0F2C                     	;# 
  2163  0F2D                     	;# 
  2164  0F2E                     	;# 
  2165  0F2F                     	;# 
  2166  0F30                     	;# 
  2167  0F31                     	;# 
  2168  0F32                     	;# 
  2169  0F33                     	;# 
  2170  0F34                     	;# 
  2171  0F35                     	;# 
  2172  0F36                     	;# 
  2173  0F37                     	;# 
  2174  0FE4                     	;# 
  2175  0FE5                     	;# 
  2176  0FE6                     	;# 
  2177  0FE7                     	;# 
  2178  0FE8                     	;# 
  2179  0FE9                     	;# 
  2180  0FEA                     	;# 
  2181  0FEB                     	;# 
  2182  0FED                     	;# 
  2183  0FEE                     	;# 
  2184  0FEF                     	;# 
  2185  0000                     	;# 
  2186  0001                     	;# 
  2187  0002                     	;# 
  2188  0003                     	;# 
  2189  0004                     	;# 
  2190  0005                     	;# 
  2191  0006                     	;# 
  2192  0007                     	;# 
  2193  0008                     	;# 
  2194  0009                     	;# 
  2195  000A                     	;# 
  2196  000B                     	;# 
  2197  000C                     	;# 
  2198  000D                     	;# 
  2199  000E                     	;# 
  2200  0010                     	;# 
  2201  0011                     	;# 
  2202  0012                     	;# 
  2203  0013                     	;# 
  2204  0014                     	;# 
  2205  0015                     	;# 
  2206  0015                     	;# 
  2207  0016                     	;# 
  2208  0016                     	;# 
  2209  0017                     	;# 
  2210  0018                     	;# 
  2211  0019                     	;# 
  2212  0019                     	;# 
  2213  001A                     	;# 
  2214  001B                     	;# 
  2215  001C                     	;# 
  2216  001D                     	;# 
  2217  001E                     	;# 
  2218  001F                     	;# 
  2219  008C                     	;# 
  2220  008D                     	;# 
  2221  008E                     	;# 
  2222  0090                     	;# 
  2223  0091                     	;# 
  2224  0092                     	;# 
  2225  0093                     	;# 
  2226  0094                     	;# 
  2227  0097                     	;# 
  2228  009B                     	;# 
  2229  009B                     	;# 
  2230  009C                     	;# 
  2231  009D                     	;# 
  2232  009E                     	;# 
  2233  009F                     	;# 
  2234  010C                     	;# 
  2235  010D                     	;# 
  2236  010E                     	;# 
  2237  0111                     	;# 
  2238  0112                     	;# 
  2239  0113                     	;# 
  2240  0114                     	;# 
  2241  0115                     	;# 
  2242  0116                     	;# 
  2243  0117                     	;# 
  2244  0118                     	;# 
  2245  0119                     	;# 
  2246  018C                     	;# 
  2247  018D                     	;# 
  2248  018E                     	;# 
  2249  0197                     	;# 
  2250  0199                     	;# 
  2251  0199                     	;# 
  2252  0199                     	;# 
  2253  019A                     	;# 
  2254  019A                     	;# 
  2255  019A                     	;# 
  2256  019B                     	;# 
  2257  019B                     	;# 
  2258  019B                     	;# 
  2259  019B                     	;# 
  2260  019B                     	;# 
  2261  019C                     	;# 
  2262  019C                     	;# 
  2263  019C                     	;# 
  2264  019D                     	;# 
  2265  019D                     	;# 
  2266  019D                     	;# 
  2267  019E                     	;# 
  2268  019E                     	;# 
  2269  019E                     	;# 
  2270  019F                     	;# 
  2271  019F                     	;# 
  2272  019F                     	;# 
  2273  019F                     	;# 
  2274  019F                     	;# 
  2275  020C                     	;# 
  2276  020D                     	;# 
  2277  020E                     	;# 
  2278  0211                     	;# 
  2279  0211                     	;# 
  2280  0212                     	;# 
  2281  0212                     	;# 
  2282  0213                     	;# 
  2283  0213                     	;# 
  2284  0214                     	;# 
  2285  0214                     	;# 
  2286  0215                     	;# 
  2287  0215                     	;# 
  2288  0215                     	;# 
  2289  0215                     	;# 
  2290  0216                     	;# 
  2291  0216                     	;# 
  2292  0217                     	;# 
  2293  0217                     	;# 
  2294  0219                     	;# 
  2295  021A                     	;# 
  2296  021B                     	;# 
  2297  021C                     	;# 
  2298  021D                     	;# 
  2299  021D                     	;# 
  2300  021E                     	;# 
  2301  021F                     	;# 
  2302  028C                     	;# 
  2303  028D                     	;# 
  2304  028E                     	;# 
  2305  0291                     	;# 
  2306  0291                     	;# 
  2307  0292                     	;# 
  2308  0293                     	;# 
  2309  0294                     	;# 
  2310  0295                     	;# 
  2311  0295                     	;# 
  2312  0296                     	;# 
  2313  0297                     	;# 
  2314  0298                     	;# 
  2315  029F                     	;# 
  2316  030C                     	;# 
  2317  030D                     	;# 
  2318  030E                     	;# 
  2319  0311                     	;# 
  2320  0311                     	;# 
  2321  0312                     	;# 
  2322  0313                     	;# 
  2323  0314                     	;# 
  2324  0315                     	;# 
  2325  0315                     	;# 
  2326  0316                     	;# 
  2327  0317                     	;# 
  2328  0318                     	;# 
  2329  038C                     	;# 
  2330  038D                     	;# 
  2331  038E                     	;# 
  2332  0391                     	;# 
  2333  0392                     	;# 
  2334  0393                     	;# 
  2335  0394                     	;# 
  2336  0395                     	;# 
  2337  0396                     	;# 
  2338  0397                     	;# 
  2339  0398                     	;# 
  2340  0399                     	;# 
  2341  039A                     	;# 
  2342  039C                     	;# 
  2343  039D                     	;# 
  2344  039E                     	;# 
  2345  039F                     	;# 
  2346  0411                     	;# 
  2347  0411                     	;# 
  2348  0412                     	;# 
  2349  0413                     	;# 
  2350  0414                     	;# 
  2351  0415                     	;# 
  2352  0416                     	;# 
  2353  0417                     	;# 
  2354  0418                     	;# 
  2355  0418                     	;# 
  2356  0419                     	;# 
  2357  041A                     	;# 
  2358  041B                     	;# 
  2359  041C                     	;# 
  2360  041D                     	;# 
  2361  041E                     	;# 
  2362  041F                     	;# 
  2363  0498                     	;# 
  2364  0498                     	;# 
  2365  0499                     	;# 
  2366  049A                     	;# 
  2367  049B                     	;# 
  2368  049B                     	;# 
  2369  049C                     	;# 
  2370  049D                     	;# 
  2371  049E                     	;# 
  2372  049F                     	;# 
  2373  0617                     	;# 
  2374  0618                     	;# 
  2375  0619                     	;# 
  2376  0619                     	;# 
  2377  061A                     	;# 
  2378  061B                     	;# 
  2379  061C                     	;# 
  2380  061C                     	;# 
  2381  061F                     	;# 
  2382  0691                     	;# 
  2383  0692                     	;# 
  2384  0693                     	;# 
  2385  0694                     	;# 
  2386  0695                     	;# 
  2387  0696                     	;# 
  2388  0697                     	;# 
  2389  0698                     	;# 
  2390  0699                     	;# 
  2391  0711                     	;# 
  2392  0712                     	;# 
  2393  0713                     	;# 
  2394  0714                     	;# 
  2395  0715                     	;# 
  2396  0716                     	;# 
  2397  0717                     	;# 
  2398  0718                     	;# 
  2399  0719                     	;# 
  2400  0891                     	;# 
  2401  0891                     	;# 
  2402  0891                     	;# 
  2403  0891                     	;# 
  2404  0891                     	;# 
  2405  0891                     	;# 
  2406  0892                     	;# 
  2407  0892                     	;# 
  2408  0892                     	;# 
  2409  0893                     	;# 
  2410  0893                     	;# 
  2411  0893                     	;# 
  2412  0893                     	;# 
  2413  0893                     	;# 
  2414  0893                     	;# 
  2415  0894                     	;# 
  2416  0894                     	;# 
  2417  0894                     	;# 
  2418  0895                     	;# 
  2419  0895                     	;# 
  2420  0895                     	;# 
  2421  0896                     	;# 
  2422  0896                     	;# 
  2423  0896                     	;# 
  2424  089B                     	;# 
  2425  0911                     	;# 
  2426  0912                     	;# 
  2427  0913                     	;# 
  2428  0914                     	;# 
  2429  0915                     	;# 
  2430  0916                     	;# 
  2431  0918                     	;# 
  2432  0919                     	;# 
  2433  091A                     	;# 
  2434  091B                     	;# 
  2435  091C                     	;# 
  2436  091D                     	;# 
  2437  091E                     	;# 
  2438  091F                     	;# 
  2439  0E0F                     	;# 
  2440  0E10                     	;# 
  2441  0E11                     	;# 
  2442  0E12                     	;# 
  2443  0E13                     	;# 
  2444  0E14                     	;# 
  2445  0E15                     	;# 
  2446  0E16                     	;# 
  2447  0E17                     	;# 
  2448  0E18                     	;# 
  2449  0E19                     	;# 
  2450  0E1A                     	;# 
  2451  0E1B                     	;# 
  2452  0E1C                     	;# 
  2453  0E1D                     	;# 
  2454  0E1E                     	;# 
  2455  0E1F                     	;# 
  2456  0E20                     	;# 
  2457  0E21                     	;# 
  2458  0E22                     	;# 
  2459  0E24                     	;# 
  2460  0E25                     	;# 
  2461  0E28                     	;# 
  2462  0E29                     	;# 
  2463  0E2A                     	;# 
  2464  0E2B                     	;# 
  2465  0E2C                     	;# 
  2466  0E2D                     	;# 
  2467  0E2E                     	;# 
  2468  0E2F                     	;# 
  2469  0E90                     	;# 
  2470  0E91                     	;# 
  2471  0E92                     	;# 
  2472  0E94                     	;# 
  2473  0E95                     	;# 
  2474  0E9C                     	;# 
  2475  0E9D                     	;# 
  2476  0E9E                     	;# 
  2477  0E9F                     	;# 
  2478  0EA0                     	;# 
  2479  0EA1                     	;# 
  2480  0EA2                     	;# 
  2481  0EA3                     	;# 
  2482  0EA4                     	;# 
  2483  0EA5                     	;# 
  2484  0EA6                     	;# 
  2485  0EA7                     	;# 
  2486  0F0F                     	;# 
  2487  0F10                     	;# 
  2488  0F11                     	;# 
  2489  0F12                     	;# 
  2490  0F13                     	;# 
  2491  0F14                     	;# 
  2492  0F15                     	;# 
  2493  0F16                     	;# 
  2494  0F17                     	;# 
  2495  0F18                     	;# 
  2496  0F19                     	;# 
  2497  0F1A                     	;# 
  2498  0F1B                     	;# 
  2499  0F1C                     	;# 
  2500  0F1D                     	;# 
  2501  0F1E                     	;# 
  2502  0F1F                     	;# 
  2503  0F20                     	;# 
  2504  0F21                     	;# 
  2505  0F22                     	;# 
  2506  0F23                     	;# 
  2507  0F24                     	;# 
  2508  0F25                     	;# 
  2509  0F26                     	;# 
  2510  0F27                     	;# 
  2511  0F28                     	;# 
  2512  0F29                     	;# 
  2513  0F2A                     	;# 
  2514  0F2B                     	;# 
  2515  0F2C                     	;# 
  2516  0F2D                     	;# 
  2517  0F2E                     	;# 
  2518  0F2F                     	;# 
  2519  0F30                     	;# 
  2520  0F31                     	;# 
  2521  0F32                     	;# 
  2522  0F33                     	;# 
  2523  0F34                     	;# 
  2524  0F35                     	;# 
  2525  0F36                     	;# 
  2526  0F37                     	;# 
  2527  0FE4                     	;# 
  2528  0FE5                     	;# 
  2529  0FE6                     	;# 
  2530  0FE7                     	;# 
  2531  0FE8                     	;# 
  2532  0FE9                     	;# 
  2533  0FEA                     	;# 
  2534  0FEB                     	;# 
  2535  0FED                     	;# 
  2536  0FEE                     	;# 
  2537  0FEF                     	;# 
  2538  0000                     	;# 
  2539  0001                     	;# 
  2540  0002                     	;# 
  2541  0003                     	;# 
  2542  0004                     	;# 
  2543  0005                     	;# 
  2544  0006                     	;# 
  2545  0007                     	;# 
  2546  0008                     	;# 
  2547  0009                     	;# 
  2548  000A                     	;# 
  2549  000B                     	;# 
  2550  000C                     	;# 
  2551  000D                     	;# 
  2552  000E                     	;# 
  2553  0010                     	;# 
  2554  0011                     	;# 
  2555  0012                     	;# 
  2556  0013                     	;# 
  2557  0014                     	;# 
  2558  0015                     	;# 
  2559  0015                     	;# 
  2560  0016                     	;# 
  2561  0016                     	;# 
  2562  0017                     	;# 
  2563  0018                     	;# 
  2564  0019                     	;# 
  2565  0019                     	;# 
  2566  001A                     	;# 
  2567  001B                     	;# 
  2568  001C                     	;# 
  2569  001D                     	;# 
  2570  001E                     	;# 
  2571  001F                     	;# 
  2572  008C                     	;# 
  2573  008D                     	;# 
  2574  008E                     	;# 
  2575  0090                     	;# 
  2576  0091                     	;# 
  2577  0092                     	;# 
  2578  0093                     	;# 
  2579  0094                     	;# 
  2580  0097                     	;# 
  2581  009B                     	;# 
  2582  009B                     	;# 
  2583  009C                     	;# 
  2584  009D                     	;# 
  2585  009E                     	;# 
  2586  009F                     	;# 
  2587  010C                     	;# 
  2588  010D                     	;# 
  2589  010E                     	;# 
  2590  0111                     	;# 
  2591  0112                     	;# 
  2592  0113                     	;# 
  2593  0114                     	;# 
  2594  0115                     	;# 
  2595  0116                     	;# 
  2596  0117                     	;# 
  2597  0118                     	;# 
  2598  0119                     	;# 
  2599  018C                     	;# 
  2600  018D                     	;# 
  2601  018E                     	;# 
  2602  0197                     	;# 
  2603  0199                     	;# 
  2604  0199                     	;# 
  2605  0199                     	;# 
  2606  019A                     	;# 
  2607  019A                     	;# 
  2608  019A                     	;# 
  2609  019B                     	;# 
  2610  019B                     	;# 
  2611  019B                     	;# 
  2612  019B                     	;# 
  2613  019B                     	;# 
  2614  019C                     	;# 
  2615  019C                     	;# 
  2616  019C                     	;# 
  2617  019D                     	;# 
  2618  019D                     	;# 
  2619  019D                     	;# 
  2620  019E                     	;# 
  2621  019E                     	;# 
  2622  019E                     	;# 
  2623  019F                     	;# 
  2624  019F                     	;# 
  2625  019F                     	;# 
  2626  019F                     	;# 
  2627  019F                     	;# 
  2628  020C                     	;# 
  2629  020D                     	;# 
  2630  020E                     	;# 
  2631  0211                     	;# 
  2632  0211                     	;# 
  2633  0212                     	;# 
  2634  0212                     	;# 
  2635  0213                     	;# 
  2636  0213                     	;# 
  2637  0214                     	;# 
  2638  0214                     	;# 
  2639  0215                     	;# 
  2640  0215                     	;# 
  2641  0215                     	;# 
  2642  0215                     	;# 
  2643  0216                     	;# 
  2644  0216                     	;# 
  2645  0217                     	;# 
  2646  0217                     	;# 
  2647  0219                     	;# 
  2648  021A                     	;# 
  2649  021B                     	;# 
  2650  021C                     	;# 
  2651  021D                     	;# 
  2652  021D                     	;# 
  2653  021E                     	;# 
  2654  021F                     	;# 
  2655  028C                     	;# 
  2656  028D                     	;# 
  2657  028E                     	;# 
  2658  0291                     	;# 
  2659  0291                     	;# 
  2660  0292                     	;# 
  2661  0293                     	;# 
  2662  0294                     	;# 
  2663  0295                     	;# 
  2664  0295                     	;# 
  2665  0296                     	;# 
  2666  0297                     	;# 
  2667  0298                     	;# 
  2668  029F                     	;# 
  2669  030C                     	;# 
  2670  030D                     	;# 
  2671  030E                     	;# 
  2672  0311                     	;# 
  2673  0311                     	;# 
  2674  0312                     	;# 
  2675  0313                     	;# 
  2676  0314                     	;# 
  2677  0315                     	;# 
  2678  0315                     	;# 
  2679  0316                     	;# 
  2680  0317                     	;# 
  2681  0318                     	;# 
  2682  038C                     	;# 
  2683  038D                     	;# 
  2684  038E                     	;# 
  2685  0391                     	;# 
  2686  0392                     	;# 
  2687  0393                     	;# 
  2688  0394                     	;# 
  2689  0395                     	;# 
  2690  0396                     	;# 
  2691  0397                     	;# 
  2692  0398                     	;# 
  2693  0399                     	;# 
  2694  039A                     	;# 
  2695  039C                     	;# 
  2696  039D                     	;# 
  2697  039E                     	;# 
  2698  039F                     	;# 
  2699  0411                     	;# 
  2700  0411                     	;# 
  2701  0412                     	;# 
  2702  0413                     	;# 
  2703  0414                     	;# 
  2704  0415                     	;# 
  2705  0416                     	;# 
  2706  0417                     	;# 
  2707  0418                     	;# 
  2708  0418                     	;# 
  2709  0419                     	;# 
  2710  041A                     	;# 
  2711  041B                     	;# 
  2712  041C                     	;# 
  2713  041D                     	;# 
  2714  041E                     	;# 
  2715  041F                     	;# 
  2716  0498                     	;# 
  2717  0498                     	;# 
  2718  0499                     	;# 
  2719  049A                     	;# 
  2720  049B                     	;# 
  2721  049B                     	;# 
  2722  049C                     	;# 
  2723  049D                     	;# 
  2724  049E                     	;# 
  2725  049F                     	;# 
  2726  0617                     	;# 
  2727  0618                     	;# 
  2728  0619                     	;# 
  2729  0619                     	;# 
  2730  061A                     	;# 
  2731  061B                     	;# 
  2732  061C                     	;# 
  2733  061C                     	;# 
  2734  061F                     	;# 
  2735  0691                     	;# 
  2736  0692                     	;# 
  2737  0693                     	;# 
  2738  0694                     	;# 
  2739  0695                     	;# 
  2740  0696                     	;# 
  2741  0697                     	;# 
  2742  0698                     	;# 
  2743  0699                     	;# 
  2744  0711                     	;# 
  2745  0712                     	;# 
  2746  0713                     	;# 
  2747  0714                     	;# 
  2748  0715                     	;# 
  2749  0716                     	;# 
  2750  0717                     	;# 
  2751  0718                     	;# 
  2752  0719                     	;# 
  2753  0891                     	;# 
  2754  0891                     	;# 
  2755  0891                     	;# 
  2756  0891                     	;# 
  2757  0891                     	;# 
  2758  0891                     	;# 
  2759  0892                     	;# 
  2760  0892                     	;# 
  2761  0892                     	;# 
  2762  0893                     	;# 
  2763  0893                     	;# 
  2764  0893                     	;# 
  2765  0893                     	;# 
  2766  0893                     	;# 
  2767  0893                     	;# 
  2768  0894                     	;# 
  2769  0894                     	;# 
  2770  0894                     	;# 
  2771  0895                     	;# 
  2772  0895                     	;# 
  2773  0895                     	;# 
  2774  0896                     	;# 
  2775  0896                     	;# 
  2776  0896                     	;# 
  2777  089B                     	;# 
  2778  0911                     	;# 
  2779  0912                     	;# 
  2780  0913                     	;# 
  2781  0914                     	;# 
  2782  0915                     	;# 
  2783  0916                     	;# 
  2784  0918                     	;# 
  2785  0919                     	;# 
  2786  091A                     	;# 
  2787  091B                     	;# 
  2788  091C                     	;# 
  2789  091D                     	;# 
  2790  091E                     	;# 
  2791  091F                     	;# 
  2792  0E0F                     	;# 
  2793  0E10                     	;# 
  2794  0E11                     	;# 
  2795  0E12                     	;# 
  2796  0E13                     	;# 
  2797  0E14                     	;# 
  2798  0E15                     	;# 
  2799  0E16                     	;# 
  2800  0E17                     	;# 
  2801  0E18                     	;# 
  2802  0E19                     	;# 
  2803  0E1A                     	;# 
  2804  0E1B                     	;# 
  2805  0E1C                     	;# 
  2806  0E1D                     	;# 
  2807  0E1E                     	;# 
  2808  0E1F                     	;# 
  2809  0E20                     	;# 
  2810  0E21                     	;# 
  2811  0E22                     	;# 
  2812  0E24                     	;# 
  2813  0E25                     	;# 
  2814  0E28                     	;# 
  2815  0E29                     	;# 
  2816  0E2A                     	;# 
  2817  0E2B                     	;# 
  2818  0E2C                     	;# 
  2819  0E2D                     	;# 
  2820  0E2E                     	;# 
  2821  0E2F                     	;# 
  2822  0E90                     	;# 
  2823  0E91                     	;# 
  2824  0E92                     	;# 
  2825  0E94                     	;# 
  2826  0E95                     	;# 
  2827  0E9C                     	;# 
  2828  0E9D                     	;# 
  2829  0E9E                     	;# 
  2830  0E9F                     	;# 
  2831  0EA0                     	;# 
  2832  0EA1                     	;# 
  2833  0EA2                     	;# 
  2834  0EA3                     	;# 
  2835  0EA4                     	;# 
  2836  0EA5                     	;# 
  2837  0EA6                     	;# 
  2838  0EA7                     	;# 
  2839  0F0F                     	;# 
  2840  0F10                     	;# 
  2841  0F11                     	;# 
  2842  0F12                     	;# 
  2843  0F13                     	;# 
  2844  0F14                     	;# 
  2845  0F15                     	;# 
  2846  0F16                     	;# 
  2847  0F17                     	;# 
  2848  0F18                     	;# 
  2849  0F19                     	;# 
  2850  0F1A                     	;# 
  2851  0F1B                     	;# 
  2852  0F1C                     	;# 
  2853  0F1D                     	;# 
  2854  0F1E                     	;# 
  2855  0F1F                     	;# 
  2856  0F20                     	;# 
  2857  0F21                     	;# 
  2858  0F22                     	;# 
  2859  0F23                     	;# 
  2860  0F24                     	;# 
  2861  0F25                     	;# 
  2862  0F26                     	;# 
  2863  0F27                     	;# 
  2864  0F28                     	;# 
  2865  0F29                     	;# 
  2866  0F2A                     	;# 
  2867  0F2B                     	;# 
  2868  0F2C                     	;# 
  2869  0F2D                     	;# 
  2870  0F2E                     	;# 
  2871  0F2F                     	;# 
  2872  0F30                     	;# 
  2873  0F31                     	;# 
  2874  0F32                     	;# 
  2875  0F33                     	;# 
  2876  0F34                     	;# 
  2877  0F35                     	;# 
  2878  0F36                     	;# 
  2879  0F37                     	;# 
  2880  0FE4                     	;# 
  2881  0FE5                     	;# 
  2882  0FE6                     	;# 
  2883  0FE7                     	;# 
  2884  0FE8                     	;# 
  2885  0FE9                     	;# 
  2886  0FEA                     	;# 
  2887  0FEB                     	;# 
  2888  0FED                     	;# 
  2889  0FEE                     	;# 
  2890  0FEF                     	;# 
  2891  0000                     	;# 
  2892  0001                     	;# 
  2893  0002                     	;# 
  2894  0003                     	;# 
  2895  0004                     	;# 
  2896  0005                     	;# 
  2897  0006                     	;# 
  2898  0007                     	;# 
  2899  0008                     	;# 
  2900  0009                     	;# 
  2901  000A                     	;# 
  2902  000B                     	;# 
  2903  000C                     	;# 
  2904  000D                     	;# 
  2905  000E                     	;# 
  2906  0010                     	;# 
  2907  0011                     	;# 
  2908  0012                     	;# 
  2909  0013                     	;# 
  2910  0014                     	;# 
  2911  0015                     	;# 
  2912  0015                     	;# 
  2913  0016                     	;# 
  2914  0016                     	;# 
  2915  0017                     	;# 
  2916  0018                     	;# 
  2917  0019                     	;# 
  2918  0019                     	;# 
  2919  001A                     	;# 
  2920  001B                     	;# 
  2921  001C                     	;# 
  2922  001D                     	;# 
  2923  001E                     	;# 
  2924  001F                     	;# 
  2925  008C                     	;# 
  2926  008D                     	;# 
  2927  008E                     	;# 
  2928  0090                     	;# 
  2929  0091                     	;# 
  2930  0092                     	;# 
  2931  0093                     	;# 
  2932  0094                     	;# 
  2933  0097                     	;# 
  2934  009B                     	;# 
  2935  009B                     	;# 
  2936  009C                     	;# 
  2937  009D                     	;# 
  2938  009E                     	;# 
  2939  009F                     	;# 
  2940  010C                     	;# 
  2941  010D                     	;# 
  2942  010E                     	;# 
  2943  0111                     	;# 
  2944  0112                     	;# 
  2945  0113                     	;# 
  2946  0114                     	;# 
  2947  0115                     	;# 
  2948  0116                     	;# 
  2949  0117                     	;# 
  2950  0118                     	;# 
  2951  0119                     	;# 
  2952  018C                     	;# 
  2953  018D                     	;# 
  2954  018E                     	;# 
  2955  0197                     	;# 
  2956  0199                     	;# 
  2957  0199                     	;# 
  2958  0199                     	;# 
  2959  019A                     	;# 
  2960  019A                     	;# 
  2961  019A                     	;# 
  2962  019B                     	;# 
  2963  019B                     	;# 
  2964  019B                     	;# 
  2965  019B                     	;# 
  2966  019B                     	;# 
  2967  019C                     	;# 
  2968  019C                     	;# 
  2969  019C                     	;# 
  2970  019D                     	;# 
  2971  019D                     	;# 
  2972  019D                     	;# 
  2973  019E                     	;# 
  2974  019E                     	;# 
  2975  019E                     	;# 
  2976  019F                     	;# 
  2977  019F                     	;# 
  2978  019F                     	;# 
  2979  019F                     	;# 
  2980  019F                     	;# 
  2981  020C                     	;# 
  2982  020D                     	;# 
  2983  020E                     	;# 
  2984  0211                     	;# 
  2985  0211                     	;# 
  2986  0212                     	;# 
  2987  0212                     	;# 
  2988  0213                     	;# 
  2989  0213                     	;# 
  2990  0214                     	;# 
  2991  0214                     	;# 
  2992  0215                     	;# 
  2993  0215                     	;# 
  2994  0215                     	;# 
  2995  0215                     	;# 
  2996  0216                     	;# 
  2997  0216                     	;# 
  2998  0217                     	;# 
  2999  0217                     	;# 
  3000  0219                     	;# 
  3001  021A                     	;# 
  3002  021B                     	;# 
  3003  021C                     	;# 
  3004  021D                     	;# 
  3005  021D                     	;# 
  3006  021E                     	;# 
  3007  021F                     	;# 
  3008  028C                     	;# 
  3009  028D                     	;# 
  3010  028E                     	;# 
  3011  0291                     	;# 
  3012  0291                     	;# 
  3013  0292                     	;# 
  3014  0293                     	;# 
  3015  0294                     	;# 
  3016  0295                     	;# 
  3017  0295                     	;# 
  3018  0296                     	;# 
  3019  0297                     	;# 
  3020  0298                     	;# 
  3021  029F                     	;# 
  3022  030C                     	;# 
  3023  030D                     	;# 
  3024  030E                     	;# 
  3025  0311                     	;# 
  3026  0311                     	;# 
  3027  0312                     	;# 
  3028  0313                     	;# 
  3029  0314                     	;# 
  3030  0315                     	;# 
  3031  0315                     	;# 
  3032  0316                     	;# 
  3033  0317                     	;# 
  3034  0318                     	;# 
  3035  038C                     	;# 
  3036  038D                     	;# 
  3037  038E                     	;# 
  3038  0391                     	;# 
  3039  0392                     	;# 
  3040  0393                     	;# 
  3041  0394                     	;# 
  3042  0395                     	;# 
  3043  0396                     	;# 
  3044  0397                     	;# 
  3045  0398                     	;# 
  3046  0399                     	;# 
  3047  039A                     	;# 
  3048  039C                     	;# 
  3049  039D                     	;# 
  3050  039E                     	;# 
  3051  039F                     	;# 
  3052  0411                     	;# 
  3053  0411                     	;# 
  3054  0412                     	;# 
  3055  0413                     	;# 
  3056  0414                     	;# 
  3057  0415                     	;# 
  3058  0416                     	;# 
  3059  0417                     	;# 
  3060  0418                     	;# 
  3061  0418                     	;# 
  3062  0419                     	;# 
  3063  041A                     	;# 
  3064  041B                     	;# 
  3065  041C                     	;# 
  3066  041D                     	;# 
  3067  041E                     	;# 
  3068  041F                     	;# 
  3069  0498                     	;# 
  3070  0498                     	;# 
  3071  0499                     	;# 
  3072  049A                     	;# 
  3073  049B                     	;# 
  3074  049B                     	;# 
  3075  049C                     	;# 
  3076  049D                     	;# 
  3077  049E                     	;# 
  3078  049F                     	;# 
  3079  0617                     	;# 
  3080  0618                     	;# 
  3081  0619                     	;# 
  3082  0619                     	;# 
  3083  061A                     	;# 
  3084  061B                     	;# 
  3085  061C                     	;# 
  3086  061C                     	;# 
  3087  061F                     	;# 
  3088  0691                     	;# 
  3089  0692                     	;# 
  3090  0693                     	;# 
  3091  0694                     	;# 
  3092  0695                     	;# 
  3093  0696                     	;# 
  3094  0697                     	;# 
  3095  0698                     	;# 
  3096  0699                     	;# 
  3097  0711                     	;# 
  3098  0712                     	;# 
  3099  0713                     	;# 
  3100  0714                     	;# 
  3101  0715                     	;# 
  3102  0716                     	;# 
  3103  0717                     	;# 
  3104  0718                     	;# 
  3105  0719                     	;# 
  3106  0891                     	;# 
  3107  0891                     	;# 
  3108  0891                     	;# 
  3109  0891                     	;# 
  3110  0891                     	;# 
  3111  0891                     	;# 
  3112  0892                     	;# 
  3113  0892                     	;# 
  3114  0892                     	;# 
  3115  0893                     	;# 
  3116  0893                     	;# 
  3117  0893                     	;# 
  3118  0893                     	;# 
  3119  0893                     	;# 
  3120  0893                     	;# 
  3121  0894                     	;# 
  3122  0894                     	;# 
  3123  0894                     	;# 
  3124  0895                     	;# 
  3125  0895                     	;# 
  3126  0895                     	;# 
  3127  0896                     	;# 
  3128  0896                     	;# 
  3129  0896                     	;# 
  3130  089B                     	;# 
  3131  0911                     	;# 
  3132  0912                     	;# 
  3133  0913                     	;# 
  3134  0914                     	;# 
  3135  0915                     	;# 
  3136  0916                     	;# 
  3137  0918                     	;# 
  3138  0919                     	;# 
  3139  091A                     	;# 
  3140  091B                     	;# 
  3141  091C                     	;# 
  3142  091D                     	;# 
  3143  091E                     	;# 
  3144  091F                     	;# 
  3145  0E0F                     	;# 
  3146  0E10                     	;# 
  3147  0E11                     	;# 
  3148  0E12                     	;# 
  3149  0E13                     	;# 
  3150  0E14                     	;# 
  3151  0E15                     	;# 
  3152  0E16                     	;# 
  3153  0E17                     	;# 
  3154  0E18                     	;# 
  3155  0E19                     	;# 
  3156  0E1A                     	;# 
  3157  0E1B                     	;# 
  3158  0E1C                     	;# 
  3159  0E1D                     	;# 
  3160  0E1E                     	;# 
  3161  0E1F                     	;# 
  3162  0E20                     	;# 
  3163  0E21                     	;# 
  3164  0E22                     	;# 
  3165  0E24                     	;# 
  3166  0E25                     	;# 
  3167  0E28                     	;# 
  3168  0E29                     	;# 
  3169  0E2A                     	;# 
  3170  0E2B                     	;# 
  3171  0E2C                     	;# 
  3172  0E2D                     	;# 
  3173  0E2E                     	;# 
  3174  0E2F                     	;# 
  3175  0E90                     	;# 
  3176  0E91                     	;# 
  3177  0E92                     	;# 
  3178  0E94                     	;# 
  3179  0E95                     	;# 
  3180  0E9C                     	;# 
  3181  0E9D                     	;# 
  3182  0E9E                     	;# 
  3183  0E9F                     	;# 
  3184  0EA0                     	;# 
  3185  0EA1                     	;# 
  3186  0EA2                     	;# 
  3187  0EA3                     	;# 
  3188  0EA4                     	;# 
  3189  0EA5                     	;# 
  3190  0EA6                     	;# 
  3191  0EA7                     	;# 
  3192  0F0F                     	;# 
  3193  0F10                     	;# 
  3194  0F11                     	;# 
  3195  0F12                     	;# 
  3196  0F13                     	;# 
  3197  0F14                     	;# 
  3198  0F15                     	;# 
  3199  0F16                     	;# 
  3200  0F17                     	;# 
  3201  0F18                     	;# 
  3202  0F19                     	;# 
  3203  0F1A                     	;# 
  3204  0F1B                     	;# 
  3205  0F1C                     	;# 
  3206  0F1D                     	;# 
  3207  0F1E                     	;# 
  3208  0F1F                     	;# 
  3209  0F20                     	;# 
  3210  0F21                     	;# 
  3211  0F22                     	;# 
  3212  0F23                     	;# 
  3213  0F24                     	;# 
  3214  0F25                     	;# 
  3215  0F26                     	;# 
  3216  0F27                     	;# 
  3217  0F28                     	;# 
  3218  0F29                     	;# 
  3219  0F2A                     	;# 
  3220  0F2B                     	;# 
  3221  0F2C                     	;# 
  3222  0F2D                     	;# 
  3223  0F2E                     	;# 
  3224  0F2F                     	;# 
  3225  0F30                     	;# 
  3226  0F31                     	;# 
  3227  0F32                     	;# 
  3228  0F33                     	;# 
  3229  0F34                     	;# 
  3230  0F35                     	;# 
  3231  0F36                     	;# 
  3232  0F37                     	;# 
  3233  0FE4                     	;# 
  3234  0FE5                     	;# 
  3235  0FE6                     	;# 
  3236  0FE7                     	;# 
  3237  0FE8                     	;# 
  3238  0FE9                     	;# 
  3239  0FEA                     	;# 
  3240  0FEB                     	;# 
  3241  0FED                     	;# 
  3242  0FEE                     	;# 
  3243  0FEF                     	;# 
  3244  0000                     	;# 
  3245  0001                     	;# 
  3246  0002                     	;# 
  3247  0003                     	;# 
  3248  0004                     	;# 
  3249  0005                     	;# 
  3250  0006                     	;# 
  3251  0007                     	;# 
  3252  0008                     	;# 
  3253  0009                     	;# 
  3254  000A                     	;# 
  3255  000B                     	;# 
  3256  000C                     	;# 
  3257  000D                     	;# 
  3258  000E                     	;# 
  3259  0010                     	;# 
  3260  0011                     	;# 
  3261  0012                     	;# 
  3262  0013                     	;# 
  3263  0014                     	;# 
  3264  0015                     	;# 
  3265  0015                     	;# 
  3266  0016                     	;# 
  3267  0016                     	;# 
  3268  0017                     	;# 
  3269  0018                     	;# 
  3270  0019                     	;# 
  3271  0019                     	;# 
  3272  001A                     	;# 
  3273  001B                     	;# 
  3274  001C                     	;# 
  3275  001D                     	;# 
  3276  001E                     	;# 
  3277  001F                     	;# 
  3278  008C                     	;# 
  3279  008D                     	;# 
  3280  008E                     	;# 
  3281  0090                     	;# 
  3282  0091                     	;# 
  3283  0092                     	;# 
  3284  0093                     	;# 
  3285  0094                     	;# 
  3286  0097                     	;# 
  3287  009B                     	;# 
  3288  009B                     	;# 
  3289  009C                     	;# 
  3290  009D                     	;# 
  3291  009E                     	;# 
  3292  009F                     	;# 
  3293  010C                     	;# 
  3294  010D                     	;# 
  3295  010E                     	;# 
  3296  0111                     	;# 
  3297  0112                     	;# 
  3298  0113                     	;# 
  3299  0114                     	;# 
  3300  0115                     	;# 
  3301  0116                     	;# 
  3302  0117                     	;# 
  3303  0118                     	;# 
  3304  0119                     	;# 
  3305  018C                     	;# 
  3306  018D                     	;# 
  3307  018E                     	;# 
  3308  0197                     	;# 
  3309  0199                     	;# 
  3310  0199                     	;# 
  3311  0199                     	;# 
  3312  019A                     	;# 
  3313  019A                     	;# 
  3314  019A                     	;# 
  3315  019B                     	;# 
  3316  019B                     	;# 
  3317  019B                     	;# 
  3318  019B                     	;# 
  3319  019B                     	;# 
  3320  019C                     	;# 
  3321  019C                     	;# 
  3322  019C                     	;# 
  3323  019D                     	;# 
  3324  019D                     	;# 
  3325  019D                     	;# 
  3326  019E                     	;# 
  3327  019E                     	;# 
  3328  019E                     	;# 
  3329  019F                     	;# 
  3330  019F                     	;# 
  3331  019F                     	;# 
  3332  019F                     	;# 
  3333  019F                     	;# 
  3334  020C                     	;# 
  3335  020D                     	;# 
  3336  020E                     	;# 
  3337  0211                     	;# 
  3338  0211                     	;# 
  3339  0212                     	;# 
  3340  0212                     	;# 
  3341  0213                     	;# 
  3342  0213                     	;# 
  3343  0214                     	;# 
  3344  0214                     	;# 
  3345  0215                     	;# 
  3346  0215                     	;# 
  3347  0215                     	;# 
  3348  0215                     	;# 
  3349  0216                     	;# 
  3350  0216                     	;# 
  3351  0217                     	;# 
  3352  0217                     	;# 
  3353  0219                     	;# 
  3354  021A                     	;# 
  3355  021B                     	;# 
  3356  021C                     	;# 
  3357  021D                     	;# 
  3358  021D                     	;# 
  3359  021E                     	;# 
  3360  021F                     	;# 
  3361  028C                     	;# 
  3362  028D                     	;# 
  3363  028E                     	;# 
  3364  0291                     	;# 
  3365  0291                     	;# 
  3366  0292                     	;# 
  3367  0293                     	;# 
  3368  0294                     	;# 
  3369  0295                     	;# 
  3370  0295                     	;# 
  3371  0296                     	;# 
  3372  0297                     	;# 
  3373  0298                     	;# 
  3374  029F                     	;# 
  3375  030C                     	;# 
  3376  030D                     	;# 
  3377  030E                     	;# 
  3378  0311                     	;# 
  3379  0311                     	;# 
  3380  0312                     	;# 
  3381  0313                     	;# 
  3382  0314                     	;# 
  3383  0315                     	;# 
  3384  0315                     	;# 
  3385  0316                     	;# 
  3386  0317                     	;# 
  3387  0318                     	;# 
  3388  038C                     	;# 
  3389  038D                     	;# 
  3390  038E                     	;# 
  3391  0391                     	;# 
  3392  0392                     	;# 
  3393  0393                     	;# 
  3394  0394                     	;# 
  3395  0395                     	;# 
  3396  0396                     	;# 
  3397  0397                     	;# 
  3398  0398                     	;# 
  3399  0399                     	;# 
  3400  039A                     	;# 
  3401  039C                     	;# 
  3402  039D                     	;# 
  3403  039E                     	;# 
  3404  039F                     	;# 
  3405  0411                     	;# 
  3406  0411                     	;# 
  3407  0412                     	;# 
  3408  0413                     	;# 
  3409  0414                     	;# 
  3410  0415                     	;# 
  3411  0416                     	;# 
  3412  0417                     	;# 
  3413  0418                     	;# 
  3414  0418                     	;# 
  3415  0419                     	;# 
  3416  041A                     	;# 
  3417  041B                     	;# 
  3418  041C                     	;# 
  3419  041D                     	;# 
  3420  041E                     	;# 
  3421  041F                     	;# 
  3422  0498                     	;# 
  3423  0498                     	;# 
  3424  0499                     	;# 
  3425  049A                     	;# 
  3426  049B                     	;# 
  3427  049B                     	;# 
  3428  049C                     	;# 
  3429  049D                     	;# 
  3430  049E                     	;# 
  3431  049F                     	;# 
  3432  0617                     	;# 
  3433  0618                     	;# 
  3434  0619                     	;# 
  3435  0619                     	;# 
  3436  061A                     	;# 
  3437  061B                     	;# 
  3438  061C                     	;# 
  3439  061C                     	;# 
  3440  061F                     	;# 
  3441  0691                     	;# 
  3442  0692                     	;# 
  3443  0693                     	;# 
  3444  0694                     	;# 
  3445  0695                     	;# 
  3446  0696                     	;# 
  3447  0697                     	;# 
  3448  0698                     	;# 
  3449  0699                     	;# 
  3450  0711                     	;# 
  3451  0712                     	;# 
  3452  0713                     	;# 
  3453  0714                     	;# 
  3454  0715                     	;# 
  3455  0716                     	;# 
  3456  0717                     	;# 
  3457  0718                     	;# 
  3458  0719                     	;# 
  3459  0891                     	;# 
  3460  0891                     	;# 
  3461  0891                     	;# 
  3462  0891                     	;# 
  3463  0891                     	;# 
  3464  0891                     	;# 
  3465  0892                     	;# 
  3466  0892                     	;# 
  3467  0892                     	;# 
  3468  0893                     	;# 
  3469  0893                     	;# 
  3470  0893                     	;# 
  3471  0893                     	;# 
  3472  0893                     	;# 
  3473  0893                     	;# 
  3474  0894                     	;# 
  3475  0894                     	;# 
  3476  0894                     	;# 
  3477  0895                     	;# 
  3478  0895                     	;# 
  3479  0895                     	;# 
  3480  0896                     	;# 
  3481  0896                     	;# 
  3482  0896                     	;# 
  3483  089B                     	;# 
  3484  0911                     	;# 
  3485  0912                     	;# 
  3486  0913                     	;# 
  3487  0914                     	;# 
  3488  0915                     	;# 
  3489  0916                     	;# 
  3490  0918                     	;# 
  3491  0919                     	;# 
  3492  091A                     	;# 
  3493  091B                     	;# 
  3494  091C                     	;# 
  3495  091D                     	;# 
  3496  091E                     	;# 
  3497  091F                     	;# 
  3498  0E0F                     	;# 
  3499  0E10                     	;# 
  3500  0E11                     	;# 
  3501  0E12                     	;# 
  3502  0E13                     	;# 
  3503  0E14                     	;# 
  3504  0E15                     	;# 
  3505  0E16                     	;# 
  3506  0E17                     	;# 
  3507  0E18                     	;# 
  3508  0E19                     	;# 
  3509  0E1A                     	;# 
  3510  0E1B                     	;# 
  3511  0E1C                     	;# 
  3512  0E1D                     	;# 
  3513  0E1E                     	;# 
  3514  0E1F                     	;# 
  3515  0E20                     	;# 
  3516  0E21                     	;# 
  3517  0E22                     	;# 
  3518  0E24                     	;# 
  3519  0E25                     	;# 
  3520  0E28                     	;# 
  3521  0E29                     	;# 
  3522  0E2A                     	;# 
  3523  0E2B                     	;# 
  3524  0E2C                     	;# 
  3525  0E2D                     	;# 
  3526  0E2E                     	;# 
  3527  0E2F                     	;# 
  3528  0E90                     	;# 
  3529  0E91                     	;# 
  3530  0E92                     	;# 
  3531  0E94                     	;# 
  3532  0E95                     	;# 
  3533  0E9C                     	;# 
  3534  0E9D                     	;# 
  3535  0E9E                     	;# 
  3536  0E9F                     	;# 
  3537  0EA0                     	;# 
  3538  0EA1                     	;# 
  3539  0EA2                     	;# 
  3540  0EA3                     	;# 
  3541  0EA4                     	;# 
  3542  0EA5                     	;# 
  3543  0EA6                     	;# 
  3544  0EA7                     	;# 
  3545  0F0F                     	;# 
  3546  0F10                     	;# 
  3547  0F11                     	;# 
  3548  0F12                     	;# 
  3549  0F13                     	;# 
  3550  0F14                     	;# 
  3551  0F15                     	;# 
  3552  0F16                     	;# 
  3553  0F17                     	;# 
  3554  0F18                     	;# 
  3555  0F19                     	;# 
  3556  0F1A                     	;# 
  3557  0F1B                     	;# 
  3558  0F1C                     	;# 
  3559  0F1D                     	;# 
  3560  0F1E                     	;# 
  3561  0F1F                     	;# 
  3562  0F20                     	;# 
  3563  0F21                     	;# 
  3564  0F22                     	;# 
  3565  0F23                     	;# 
  3566  0F24                     	;# 
  3567  0F25                     	;# 
  3568  0F26                     	;# 
  3569  0F27                     	;# 
  3570  0F28                     	;# 
  3571  0F29                     	;# 
  3572  0F2A                     	;# 
  3573  0F2B                     	;# 
  3574  0F2C                     	;# 
  3575  0F2D                     	;# 
  3576  0F2E                     	;# 
  3577  0F2F                     	;# 
  3578  0F30                     	;# 
  3579  0F31                     	;# 
  3580  0F32                     	;# 
  3581  0F33                     	;# 
  3582  0F34                     	;# 
  3583  0F35                     	;# 
  3584  0F36                     	;# 
  3585  0F37                     	;# 
  3586  0FE4                     	;# 
  3587  0FE5                     	;# 
  3588  0FE6                     	;# 
  3589  0FE7                     	;# 
  3590  0FE8                     	;# 
  3591  0FE9                     	;# 
  3592  0FEA                     	;# 
  3593  0FEB                     	;# 
  3594  0FED                     	;# 
  3595  0FEE                     	;# 
  3596  0FEF                     	;# 
  3597  0000                     	;# 
  3598  0001                     	;# 
  3599  0002                     	;# 
  3600  0003                     	;# 
  3601  0004                     	;# 
  3602  0005                     	;# 
  3603  0006                     	;# 
  3604  0007                     	;# 
  3605  0008                     	;# 
  3606  0009                     	;# 
  3607  000A                     	;# 
  3608  000B                     	;# 
  3609  000C                     	;# 
  3610  000D                     	;# 
  3611  000E                     	;# 
  3612  0010                     	;# 
  3613  0011                     	;# 
  3614  0012                     	;# 
  3615  0013                     	;# 
  3616  0014                     	;# 
  3617  0015                     	;# 
  3618  0015                     	;# 
  3619  0016                     	;# 
  3620  0016                     	;# 
  3621  0017                     	;# 
  3622  0018                     	;# 
  3623  0019                     	;# 
  3624  0019                     	;# 
  3625  001A                     	;# 
  3626  001B                     	;# 
  3627  001C                     	;# 
  3628  001D                     	;# 
  3629  001E                     	;# 
  3630  001F                     	;# 
  3631  008C                     	;# 
  3632  008D                     	;# 
  3633  008E                     	;# 
  3634  0090                     	;# 
  3635  0091                     	;# 
  3636  0092                     	;# 
  3637  0093                     	;# 
  3638  0094                     	;# 
  3639  0097                     	;# 
  3640  009B                     	;# 
  3641  009B                     	;# 
  3642  009C                     	;# 
  3643  009D                     	;# 
  3644  009E                     	;# 
  3645  009F                     	;# 
  3646  010C                     	;# 
  3647  010D                     	;# 
  3648  010E                     	;# 
  3649  0111                     	;# 
  3650  0112                     	;# 
  3651  0113                     	;# 
  3652  0114                     	;# 
  3653  0115                     	;# 
  3654  0116                     	;# 
  3655  0117                     	;# 
  3656  0118                     	;# 
  3657  0119                     	;# 
  3658  018C                     	;# 
  3659  018D                     	;# 
  3660  018E                     	;# 
  3661  0197                     	;# 
  3662  0199                     	;# 
  3663  0199                     	;# 
  3664  0199                     	;# 
  3665  019A                     	;# 
  3666  019A                     	;# 
  3667  019A                     	;# 
  3668  019B                     	;# 
  3669  019B                     	;# 
  3670  019B                     	;# 
  3671  019B                     	;# 
  3672  019B                     	;# 
  3673  019C                     	;# 
  3674  019C                     	;# 
  3675  019C                     	;# 
  3676  019D                     	;# 
  3677  019D                     	;# 
  3678  019D                     	;# 
  3679  019E                     	;# 
  3680  019E                     	;# 
  3681  019E                     	;# 
  3682  019F                     	;# 
  3683  019F                     	;# 
  3684  019F                     	;# 
  3685  019F                     	;# 
  3686  019F                     	;# 
  3687  020C                     	;# 
  3688  020D                     	;# 
  3689  020E                     	;# 
  3690  0211                     	;# 
  3691  0211                     	;# 
  3692  0212                     	;# 
  3693  0212                     	;# 
  3694  0213                     	;# 
  3695  0213                     	;# 
  3696  0214                     	;# 
  3697  0214                     	;# 
  3698  0215                     	;# 
  3699  0215                     	;# 
  3700  0215                     	;# 
  3701  0215                     	;# 
  3702  0216                     	;# 
  3703  0216                     	;# 
  3704  0217                     	;# 
  3705  0217                     	;# 
  3706  0219                     	;# 
  3707  021A                     	;# 
  3708  021B                     	;# 
  3709  021C                     	;# 
  3710  021D                     	;# 
  3711  021D                     	;# 
  3712  021E                     	;# 
  3713  021F                     	;# 
  3714  028C                     	;# 
  3715  028D                     	;# 
  3716  028E                     	;# 
  3717  0291                     	;# 
  3718  0291                     	;# 
  3719  0292                     	;# 
  3720  0293                     	;# 
  3721  0294                     	;# 
  3722  0295                     	;# 
  3723  0295                     	;# 
  3724  0296                     	;# 
  3725  0297                     	;# 
  3726  0298                     	;# 
  3727  029F                     	;# 
  3728  030C                     	;# 
  3729  030D                     	;# 
  3730  030E                     	;# 
  3731  0311                     	;# 
  3732  0311                     	;# 
  3733  0312                     	;# 
  3734  0313                     	;# 
  3735  0314                     	;# 
  3736  0315                     	;# 
  3737  0315                     	;# 
  3738  0316                     	;# 
  3739  0317                     	;# 
  3740  0318                     	;# 
  3741  038C                     	;# 
  3742  038D                     	;# 
  3743  038E                     	;# 
  3744  0391                     	;# 
  3745  0392                     	;# 
  3746  0393                     	;# 
  3747  0394                     	;# 
  3748  0395                     	;# 
  3749  0396                     	;# 
  3750  0397                     	;# 
  3751  0398                     	;# 
  3752  0399                     	;# 
  3753  039A                     	;# 
  3754  039C                     	;# 
  3755  039D                     	;# 
  3756  039E                     	;# 
  3757  039F                     	;# 
  3758  0411                     	;# 
  3759  0411                     	;# 
  3760  0412                     	;# 
  3761  0413                     	;# 
  3762  0414                     	;# 
  3763  0415                     	;# 
  3764  0416                     	;# 
  3765  0417                     	;# 
  3766  0418                     	;# 
  3767  0418                     	;# 
  3768  0419                     	;# 
  3769  041A                     	;# 
  3770  041B                     	;# 
  3771  041C                     	;# 
  3772  041D                     	;# 
  3773  041E                     	;# 
  3774  041F                     	;# 
  3775  0498                     	;# 
  3776  0498                     	;# 
  3777  0499                     	;# 
  3778  049A                     	;# 
  3779  049B                     	;# 
  3780  049B                     	;# 
  3781  049C                     	;# 
  3782  049D                     	;# 
  3783  049E                     	;# 
  3784  049F                     	;# 
  3785  0617                     	;# 
  3786  0618                     	;# 
  3787  0619                     	;# 
  3788  0619                     	;# 
  3789  061A                     	;# 
  3790  061B                     	;# 
  3791  061C                     	;# 
  3792  061C                     	;# 
  3793  061F                     	;# 
  3794  0691                     	;# 
  3795  0692                     	;# 
  3796  0693                     	;# 
  3797  0694                     	;# 
  3798  0695                     	;# 
  3799  0696                     	;# 
  3800  0697                     	;# 
  3801  0698                     	;# 
  3802  0699                     	;# 
  3803  0711                     	;# 
  3804  0712                     	;# 
  3805  0713                     	;# 
  3806  0714                     	;# 
  3807  0715                     	;# 
  3808  0716                     	;# 
  3809  0717                     	;# 
  3810  0718                     	;# 
  3811  0719                     	;# 
  3812  0891                     	;# 
  3813  0891                     	;# 
  3814  0891                     	;# 
  3815  0891                     	;# 
  3816  0891                     	;# 
  3817  0891                     	;# 
  3818  0892                     	;# 
  3819  0892                     	;# 
  3820  0892                     	;# 
  3821  0893                     	;# 
  3822  0893                     	;# 
  3823  0893                     	;# 
  3824  0893                     	;# 
  3825  0893                     	;# 
  3826  0893                     	;# 
  3827  0894                     	;# 
  3828  0894                     	;# 
  3829  0894                     	;# 
  3830  0895                     	;# 
  3831  0895                     	;# 
  3832  0895                     	;# 
  3833  0896                     	;# 
  3834  0896                     	;# 
  3835  0896                     	;# 
  3836  089B                     	;# 
  3837  0911                     	;# 
  3838  0912                     	;# 
  3839  0913                     	;# 
  3840  0914                     	;# 
  3841  0915                     	;# 
  3842  0916                     	;# 
  3843  0918                     	;# 
  3844  0919                     	;# 
  3845  091A                     	;# 
  3846  091B                     	;# 
  3847  091C                     	;# 
  3848  091D                     	;# 
  3849  091E                     	;# 
  3850  091F                     	;# 
  3851  0E0F                     	;# 
  3852  0E10                     	;# 
  3853  0E11                     	;# 
  3854  0E12                     	;# 
  3855  0E13                     	;# 
  3856  0E14                     	;# 
  3857  0E15                     	;# 
  3858  0E16                     	;# 
  3859  0E17                     	;# 
  3860  0E18                     	;# 
  3861  0E19                     	;# 
  3862  0E1A                     	;# 
  3863  0E1B                     	;# 
  3864  0E1C                     	;# 
  3865  0E1D                     	;# 
  3866  0E1E                     	;# 
  3867  0E1F                     	;# 
  3868  0E20                     	;# 
  3869  0E21                     	;# 
  3870  0E22                     	;# 
  3871  0E24                     	;# 
  3872  0E25                     	;# 
  3873  0E28                     	;# 
  3874  0E29                     	;# 
  3875  0E2A                     	;# 
  3876  0E2B                     	;# 
  3877  0E2C                     	;# 
  3878  0E2D                     	;# 
  3879  0E2E                     	;# 
  3880  0E2F                     	;# 
  3881  0E90                     	;# 
  3882  0E91                     	;# 
  3883  0E92                     	;# 
  3884  0E94                     	;# 
  3885  0E95                     	;# 
  3886  0E9C                     	;# 
  3887  0E9D                     	;# 
  3888  0E9E                     	;# 
  3889  0E9F                     	;# 
  3890  0EA0                     	;# 
  3891  0EA1                     	;# 
  3892  0EA2                     	;# 
  3893  0EA3                     	;# 
  3894  0EA4                     	;# 
  3895  0EA5                     	;# 
  3896  0EA6                     	;# 
  3897  0EA7                     	;# 
  3898  0F0F                     	;# 
  3899  0F10                     	;# 
  3900  0F11                     	;# 
  3901  0F12                     	;# 
  3902  0F13                     	;# 
  3903  0F14                     	;# 
  3904  0F15                     	;# 
  3905  0F16                     	;# 
  3906  0F17                     	;# 
  3907  0F18                     	;# 
  3908  0F19                     	;# 
  3909  0F1A                     	;# 
  3910  0F1B                     	;# 
  3911  0F1C                     	;# 
  3912  0F1D                     	;# 
  3913  0F1E                     	;# 
  3914  0F1F                     	;# 
  3915  0F20                     	;# 
  3916  0F21                     	;# 
  3917  0F22                     	;# 
  3918  0F23                     	;# 
  3919  0F24                     	;# 
  3920  0F25                     	;# 
  3921  0F26                     	;# 
  3922  0F27                     	;# 
  3923  0F28                     	;# 
  3924  0F29                     	;# 
  3925  0F2A                     	;# 
  3926  0F2B                     	;# 
  3927  0F2C                     	;# 
  3928  0F2D                     	;# 
  3929  0F2E                     	;# 
  3930  0F2F                     	;# 
  3931  0F30                     	;# 
  3932  0F31                     	;# 
  3933  0F32                     	;# 
  3934  0F33                     	;# 
  3935  0F34                     	;# 
  3936  0F35                     	;# 
  3937  0F36                     	;# 
  3938  0F37                     	;# 
  3939  0FE4                     	;# 
  3940  0FE5                     	;# 
  3941  0FE6                     	;# 
  3942  0FE7                     	;# 
  3943  0FE8                     	;# 
  3944  0FE9                     	;# 
  3945  0FEA                     	;# 
  3946  0FEB                     	;# 
  3947  0FED                     	;# 
  3948  0FEE                     	;# 
  3949  0FEF                     	;# 
  3950                           
  3951                           	psect	idataBANK1
  3952  15B2                     __pidataBANK1:	
  3953                           
  3954                           ;initializer for BLE_SendCMD@F7924
  3955  15B2  3441               	retlw	65
  3956  15B3  3454               	retlw	84
  3957  15B4  342B               	retlw	43
  3958  15B5  344F               	retlw	79
  3959  15B6  344B               	retlw	75
  3960  15B7  340D               	retlw	13
  3961  15B8  340A               	retlw	10
  3962                           
  3963                           	psect	idataBANK3
  3964  0824                     __pidataBANK3:	
  3965                           
  3966                           ;initializer for checkDevID@F7931
  3967  0824  3433               	retlw	51
  3968  0825  3430               	retlw	48
  3969  0826  3433               	retlw	51
  3970  0827  3431               	retlw	49
  3971  0828  3433               	retlw	51
  3972  0829  3435               	retlw	53
  3973  082A  3433               	retlw	51
  3974  082B  3432               	retlw	50
  3975  082C  3433               	retlw	51
  3976  082D  3430               	retlw	48
  3977  082E  3433               	retlw	51
  3978  082F  3431               	retlw	49
  3979  0830  3433               	retlw	51
  3980  0831  3430               	retlw	48
  3981  0832  3433               	retlw	51
  3982  0833  3432               	retlw	50
  3983  0834  3400               	retlw	0
  3984                           
  3985                           ;initializer for _MONTH_DAY
  3986  0835  341F               	retlw	31
  3987  0836  341C               	retlw	28
  3988  0837  341F               	retlw	31
  3989  0838  341E               	retlw	30
  3990  0839  341F               	retlw	31
  3991  083A  341E               	retlw	30
  3992  083B  341F               	retlw	31
  3993  083C  341F               	retlw	31
  3994  083D  341E               	retlw	30
  3995  083E  341F               	retlw	31
  3996  083F  341E               	retlw	30
  3997  0840  341F               	retlw	31
  3998  001F                     _T2CONbits	set	31
  3999  001D                     _TMR2	set	29
  4000  001E                     _PR2	set	30
  4001  001F                     _T2CON	set	31
  4002  0017                     _T0CON0bits	set	23
  4003  0015                     _TMR0L	set	21
  4004  0016                     _TMR0H	set	22
  4005  0018                     _T0CON1	set	24
  4006  0017                     _T0CON0	set	23
  4007  000E                     _PORTC	set	14
  4008  000B                     _INTCONbits	set	11
  4009  0010                     _PIR0bits	set	16
  4010  0011                     _PIR1bits	set	17
  4011  005F                     _GIE	set	95
  4012  008C                     _TXIF	set	140
  4013  0062                     _RA2	set	98
  4014  0090                     _PIE0bits	set	144
  4015  008E                     _TRISC	set	142
  4016  008D                     _TRISB	set	141
  4017  008C                     _TRISA	set	140
  4018  0091                     _PIE1bits	set	145
  4019  010E                     _LATC	set	270
  4020  010D                     _LATB	set	269
  4021  010C                     _LATA	set	268
  4022  010C                     _LATAbits	set	268
  4023  010D                     _LATBbits	set	269
  4024  086D                     _LATB5	set	2157
  4025  0871                     _LATC1	set	2161
  4026  018C                     _ANSELA	set	396
  4027  018D                     _ANSELB	set	397
  4028  018E                     _ANSELC	set	398
  4029  019A                     _TXREG	set	410
  4030  019C                     _SP1BRGH	set	412
  4031  019B                     _SP1BRGL	set	411
  4032  019E                     _TX1STA	set	414
  4033  019D                     _RC1STA	set	413
  4034  019F                     _BAUD1CON	set	415
  4035  019D                     _RC1STAbits	set	413
  4036  0199                     _RCREG	set	409
  4037  0CF1                     _TRMT	set	3313
  4038  020E                     _WPUC	set	526
  4039  020C                     _WPUA	set	524
  4040  020D                     _WPUB	set	525
  4041  0297                     _CCP2CONbits	set	663
  4042  0295                     _CCPR2L	set	661
  4043  0296                     _CCPR2H	set	662
  4044  0297                     _CCP2CON	set	663
  4045  0293                     _CCP1CONbits	set	659
  4046  029F                     _CCPTMRSbits	set	671
  4047  0291                     _CCPR1L	set	657
  4048  0292                     _CCPR1H	set	658
  4049  0293                     _CCP1CON	set	659
  4050  028E                     _ODCONC	set	654
  4051  028D                     _ODCONB	set	653
  4052  028C                     _ODCONA	set	652
  4053  0317                     _CCP4CONbits	set	791
  4054  0315                     _CCPR4L	set	789
  4055  0316                     _CCPR4H	set	790
  4056  0317                     _CCP4CON	set	791
  4057  0313                     _CCP3CONbits	set	787
  4058  0311                     _CCPR3L	set	785
  4059  0312                     _CCPR3H	set	786
  4060  0313                     _CCP3CON	set	787
  4061  0619                     _PWM5CON	set	1561
  4062  061F                     _PWMTMRSbits	set	1567
  4063  0617                     _PWM5DCL	set	1559
  4064  0618                     _PWM5DCH	set	1560
  4065  0891                     _NVMADR	set	2193
  4066  0893                     _NVMDATL	set	2195
  4067  0891                     _NVMADRL	set	2193
  4068  0892                     _NVMADRH	set	2194
  4069  0895                     _NVMCON1bits	set	2197
  4070  0896                     _NVMCON2	set	2198
  4071  0895                     _NVMCON1	set	2197
  4072  091E                     _OSCTUNE	set	2334
  4073  091F                     _OSCFRQ	set	2335
  4074  091D                     _OSCEN	set	2333
  4075  091B                     _OSCCON3	set	2331
  4076  0919                     _OSCCON1	set	2329
  4077  0E24                     _RXPPSbits	set	3620
  4078  0E0F                     _PPSLOCKbits	set	3599
  4079  0E0F                     _PPSLOCK	set	3599
  4080  0EA7                     _RC7PPSbits	set	3751
  4081  0EA6                     _RC6PPSbits	set	3750
  4082  0EA3                     _RC3PPSbits	set	3747
  4083  0EA4                     _RC4PPSbits	set	3748
  4084  0EA5                     _RC5PPSbits	set	3749
  4085  0E9C                     _RB4PPSbits	set	3740
  4086                           
  4087                           	psect	stringtext
  4088  1800                     __pstringtext:	
  4089  1800                     STR_2:	
  4090  1800  3441               	retlw	65	;'A'
  4091  1801  3454               	retlw	84	;'T'
  4092  1802  342B               	retlw	43	;'+'
  4093  1803  3441               	retlw	65	;'A'
  4094  1804  3444               	retlw	68	;'D'
  4095  1805  3456               	retlw	86	;'V'
  4096  1806  345F               	retlw	95	;'_'
  4097  1807  344D               	retlw	77	;'M'
  4098  1808  3446               	retlw	70	;'F'
  4099  1809  3452               	retlw	82	;'R'
  4100  180A  345F               	retlw	95	;'_'
  4101  180B  3453               	retlw	83	;'S'
  4102  180C  3450               	retlw	80	;'P'
  4103  180D  3443               	retlw	67	;'C'
  4104  180E  343D               	retlw	61	;'='
  4105  180F  3433               	retlw	51	;'3'
  4106  1810  3430               	retlw	48	;'0'
  4107  1811  3433               	retlw	51	;'3'
  4108  1812  3431               	retlw	49	;'1'
  4109  1813  3433               	retlw	51	;'3'
  4110  1814  3435               	retlw	53	;'5'
  4111  1815  3433               	retlw	51	;'3'
  4112  1816  3432               	retlw	50	;'2'
  4113  1817  3433               	retlw	51	;'3'
  4114  1818  3430               	retlw	48	;'0'
  4115  1819  3433               	retlw	51	;'3'
  4116  181A  3431               	retlw	49	;'1'
  4117  181B  3433               	retlw	51	;'3'
  4118  181C  3430               	retlw	48	;'0'
  4119  181D  3433               	retlw	51	;'3'
  4120  181E  3432               	retlw	50	;'2'
  4121  181F  340D               	retlw	13
  4122  1820  340A               	retlw	10
  4123  1821  3400               	retlw	0
  4124  1822                     STR_1:	
  4125  1822  3441               	retlw	65	;'A'
  4126  1823  3454               	retlw	84	;'T'
  4127  1824  342B               	retlw	43	;'+'
  4128  1825  3441               	retlw	65	;'A'
  4129  1826  3444               	retlw	68	;'D'
  4130  1827  3456               	retlw	86	;'V'
  4131  1828  345F               	retlw	95	;'_'
  4132  1829  344D               	retlw	77	;'M'
  4133  182A  3446               	retlw	70	;'F'
  4134  182B  3452               	retlw	82	;'R'
  4135  182C  345F               	retlw	95	;'_'
  4136  182D  3453               	retlw	83	;'S'
  4137  182E  3450               	retlw	80	;'P'
  4138  182F  3443               	retlw	67	;'C'
  4139  1830  343D               	retlw	61	;'='
  4140  1831  343F               	retlw	63	;'?'
  4141  1832  340D               	retlw	13
  4142  1833  340A               	retlw	10
  4143  1834  3400               	retlw	0
  4144  1835                     STR_4:	
  4145  1835  3441               	retlw	65	;'A'
  4146  1836  3454               	retlw	84	;'T'
  4147  1837  342B               	retlw	43	;'+'
  4148  1838  344D               	retlw	77	;'M'
  4149  1839  344F               	retlw	79	;'O'
  4150  183A  3444               	retlw	68	;'D'
  4151  183B  3445               	retlw	69	;'E'
  4152  183C  343D               	retlw	61	;'='
  4153  183D  3444               	retlw	68	;'D'
  4154  183E  3441               	retlw	65	;'A'
  4155  183F  3454               	retlw	84	;'T'
  4156  1840  3441               	retlw	65	;'A'
  4157  1841  340D               	retlw	13
  4158  1842  340A               	retlw	10
  4159  1843  3400               	retlw	0
  4160  1844                     STR_3:	
  4161  1844  3441               	retlw	65	;'A'
  4162  1845  3454               	retlw	84	;'T'
  4163  1846  342B               	retlw	43	;'+'
  4164  1847  3453               	retlw	83	;'S'
  4165  1848  3445               	retlw	69	;'E'
  4166  1849  3454               	retlw	84	;'T'
  4167  184A  343D               	retlw	61	;'='
  4168  184B  3431               	retlw	49	;'1'
  4169  184C  340D               	retlw	13
  4170  184D  340A               	retlw	10
  4171  184E  3400               	retlw	0
  4172                           
  4173                           	psect	cinit
  4174  0C03                     start_initialization:	
  4175                           ; #config settings
  4176                           
  4177  0C03                     __initialization:	
  4178                           
  4179                           ; Initialize objects allocated to BANK1
  4180  0C03  30B2               	movlw	low __pidataBANK1
  4181  0C04  0084               	movwf	4
  4182  0C05  3095               	movlw	(high __pidataBANK1)| (0+128)
  4183  0C06  0085               	movwf	5
  4184  0C07  30E4               	movlw	low __pdataBANK1
  4185  0C08  0086               	movwf	6
  4186  0C09  3000               	movlw	high __pdataBANK1
  4187  0C0A  0087               	movwf	7
  4188  0C0B  3007               	movlw	7
  4189  0C0C  3195  25AC  318C   	fcall	init_ram
  4190                           
  4191                           ; Initialize objects allocated to BANK3
  4192  0C0F  3024               	movlw	low __pidataBANK3
  4193  0C10  0084               	movwf	4
  4194  0C11  3088               	movlw	(high __pidataBANK3)| (0+128)
  4195  0C12  0085               	movwf	5
  4196  0C13  30D0               	movlw	low __pdataBANK3
  4197  0C14  0086               	movwf	6
  4198  0C15  3001               	movlw	high __pdataBANK3
  4199  0C16  0087               	movwf	7
  4200  0C17  301D               	movlw	29
  4201  0C18  3195  25AC  318C   	fcall	init_ram
  4202  0C1B  30D8               	movlw	low __pbssBANK1
  4203                           
  4204                           ; Clear objects allocated to COMMON
  4205  0C1C  01FB               	clrf	__pbssCOMMON& (0+127)
  4206  0C1D  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
  4207  0C1E  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
  4208                           
  4209                           ; Clear objects allocated to BANK1
  4210  0C1F  0084               	movwf	4
  4211  0C20  3000               	movlw	high __pbssBANK1
  4212  0C21  0085               	movwf	5
  4213  0C22  300C               	movlw	12
  4214  0C23  3195  25A6  318C   	fcall	clear_ram0
  4215                           
  4216                           ; Clear objects allocated to BANK2
  4217  0C26  3020               	movlw	low __pbssBANK2
  4218  0C27  0084               	movwf	4
  4219  0C28  3001               	movlw	high __pbssBANK2
  4220  0C29  0085               	movwf	5
  4221  0C2A  3050               	movlw	80
  4222  0C2B  3195  25A6  318C   	fcall	clear_ram0
  4223                           
  4224                           ; Clear objects allocated to BANK3
  4225  0C2E  30A0               	movlw	low __pbssBANK3
  4226  0C2F  0084               	movwf	4
  4227  0C30  3001               	movlw	high __pbssBANK3
  4228  0C31  0085               	movwf	5
  4229  0C32  3030               	movlw	48
  4230  0C33  3195  25A6  318C   	fcall	clear_ram0
  4231                           
  4232                           ; Clear objects allocated to BANK4
  4233  0C36  3020               	movlw	low __pbssBANK4
  4234  0C37  0084               	movwf	4
  4235  0C38  3002               	movlw	high __pbssBANK4
  4236  0C39  0085               	movwf	5
  4237  0C3A  3030               	movlw	48
  4238  0C3B  3195  25A6  318C   	fcall	clear_ram0
  4239  0C3E                     end_of_initialization:	
  4240                           ;End of C runtime variable initialization code
  4241                           
  4242  0C3E                     __end_of__initialization:	
  4243  0C3E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4244  0C3F  0020               	movlb	0
  4245  0C40  2C41               	ljmp	_main	;jump to C main() function
  4246  0C41                     __pmaintext:	
  4247 ;;
  4248 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4249 ;;
  4250 ;; *************** function _main *****************
  4251 ;; Defined at:
  4252 ;;		line 59 in file "src/main.c"
  4253 ;; Parameters:    Size  Location     Type
  4254 ;;		None
  4255 ;; Auto vars:     Size  Location     Type
  4256 ;;		None
  4257 ;; Return value:  Size  Location     Type
  4258 ;;                  1    wreg      void 
  4259 ;; Registers used:
  4260 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4261 ;; Tracked objects:
  4262 ;;		On entry : B1F/0
  4263 ;;		On exit  : 1F/2
  4264 ;;		Unchanged: 0/0
  4265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4268 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4269 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4270 ;;Total ram usage:        1 bytes
  4271 ;; Hardware stack levels required when called:   12
  4272 ;; This function calls:
  4273 ;;		_DecodeDATA
  4274 ;;		_SYSTEM_Initialize
  4275 ;;		_TMR0_StartTimer
  4276 ;;		_TMR2_StartTimer
  4277 ;;		_autoRun
  4278 ;;		_findDeviceFlash
  4279 ;;		_initBLE
  4280 ;;		_initLed
  4281 ;;		_initRTC
  4282 ;;		_preview
  4283 ;;		_saveLedPara
  4284 ;; This function is called by:
  4285 ;;		Startup code after reset
  4286 ;; This function uses a non-reentrant model
  4287 ;;
  4288                           
  4289                           
  4290                           ;psect for function _main
  4291  0C41                     _main:	
  4292                           
  4293                           ;main.c: 62: SYSTEM_Initialize();
  4294                           
  4295                           ;incstack = 0
  4296                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4297  0C41  273C               	fcall	_SYSTEM_Initialize
  4298                           
  4299                           ;main.c: 64: initBLE();
  4300  0C42  3197  2711  318C   	fcall	_initBLE
  4301                           
  4302                           ;main.c: 66: (INTCONbits.GIE = 1);
  4303  0C45  178B               	bsf	11,7	;volatile
  4304                           
  4305                           ;main.c: 68: (INTCONbits.PEIE = 1);
  4306  0C46  170B               	bsf	11,6	;volatile
  4307                           
  4308                           ;main.c: 71: initLed();
  4309  0C47  2788  318C         	fcall	_initLed
  4310                           
  4311                           ;main.c: 73: initRTC();
  4312  0C49  27DF  318C         	fcall	_initRTC
  4313                           
  4314                           ;main.c: 74: TMR0_StartTimer();
  4315  0C4B  2783  318C         	fcall	_TMR0_StartTimer
  4316                           
  4317                           ;main.c: 77: TMR2_StartTimer();
  4318  0C4D  2786  318C         	fcall	_TMR2_StartTimer
  4319  0C4F                     l627:	
  4320                           ;main.c: 79: while (1)
  4321                           
  4322  0C4F  0064               	clrwdt	;# 
  4323                           
  4324                           ;main.c: 83: if((RA2 == 0) && LATC1)
  4325  0C50  0020               	movlb	0	; select bank0
  4326  0C51  190C               	btfsc	12,2	;volatile
  4327  0C52  2C63               	goto	l4315
  4328  0C53  0022               	movlb	2	; select bank2
  4329  0C54  1C8E               	btfss	14,1	;volatile
  4330  0C55  2C63               	goto	l4315
  4331                           
  4332                           ;main.c: 84: {
  4333                           ;main.c: 85: nRcvIdx = 0;
  4334  0C56  0021               	movlb	1	; select bank1
  4335  0C57  01DF               	clrf	_nRcvIdx^(0+128)	;volatile
  4336                           
  4337                           ;main.c: 86: _delay((unsigned long)((800)*(16000000/4000000.0)));
  4338  0C58  3005               	movlw	5
  4339  0C59  0020               	movlb	0	; select bank0
  4340  0C5A  00EF               	movwf	??_main
  4341  0C5B  3026               	movlw	38
  4342  0C5C                     u4337:	
  4343  0C5C  0B89               	decfsz	9,f
  4344  0C5D  2C5C               	goto	u4337
  4345  0C5E  0BEF               	decfsz	??_main,f
  4346  0C5F  2C5C               	goto	u4337
  4347  0C60  0000               	nop
  4348                           
  4349                           ;main.c: 87: LATC1 = 0;
  4350  0C61  0022               	movlb	2	; select bank2
  4351  0C62  108E               	bcf	14,1	;volatile
  4352  0C63                     l4315:	
  4353                           
  4354                           ;main.c: 88: }
  4355                           ;main.c: 89: if(RA2 && (LATC1 == 0))
  4356  0C63  0020               	movlb	0	; select bank0
  4357  0C64  1D0C               	btfss	12,2	;volatile
  4358  0C65  2C73               	goto	l4327
  4359  0C66  0022               	movlb	2	; select bank2
  4360  0C67  188E               	btfsc	14,1	;volatile
  4361  0C68  2C73               	goto	l4327
  4362                           
  4363                           ;main.c: 90: {
  4364                           ;main.c: 91: _delay((unsigned long)((100)*(16000000/4000000.0)));
  4365  0C69  3085               	movlw	133
  4366  0C6A                     u4347:	
  4367  0C6A  0B89               	decfsz	9,f
  4368  0C6B  2C6A               	goto	u4347
  4369  0C6C  0000               	nop
  4370                           
  4371                           ;main.c: 92: LATC1 = 1;
  4372  0C6D  0022               	movlb	2	; select bank2
  4373  0C6E  148E               	bsf	14,1	;volatile
  4374                           
  4375                           ;main.c: 93: DecodeDATA();
  4376  0C6F  2492  318C         	fcall	_DecodeDATA
  4377                           
  4378                           ;main.c: 94: nRcvIdx = 0;
  4379  0C71  0021               	movlb	1	; select bank1
  4380  0C72  01DF               	clrf	_nRcvIdx^(0+128)	;volatile
  4381  0C73                     l4327:	
  4382                           
  4383                           ;main.c: 95: }
  4384                           ;main.c: 97: if (gLedRunPara.fSec)
  4385  0C73  0022               	movlb	2	; select bank2
  4386  0C74  1CD7               	btfss	_gLedRunPara^(0+256),1	;volatile
  4387  0C75  2C4F               	goto	l627
  4388                           
  4389                           ;main.c: 98: {
  4390                           ;main.c: 99: gLedRunPara.fSec = 0;
  4391  0C76  10D7               	bcf	_gLedRunPara^(0+256),1	;volatile
  4392                           
  4393                           ;main.c: 101: if (gLedRunPara.find)
  4394  0C77  1C57               	btfss	_gLedRunPara^(0+256),0	;volatile
  4395  0C78  2C7D               	goto	l4333
  4396                           
  4397                           ;main.c: 102: {
  4398                           ;main.c: 103: findDeviceFlash();
  4399  0C79  3184  241D  318C   	fcall	_findDeviceFlash
  4400                           
  4401                           ;main.c: 104: }
  4402  0C7C  2C8B               	goto	l4343
  4403  0C7D                     l4333:	
  4404                           
  4405                           ;main.c: 105: else if (gLedPara.fSta == 3 && gLedPara.fAuto)
  4406  0C7D  0C20               	rrf	_gLedPara^(0+256),w	;volatile
  4407  0C7E  3903               	andlw	3
  4408  0C7F  3A03               	xorlw	3
  4409  0C80  1903               	btfsc	3,2
  4410  0C81  1C20               	btfss	_gLedPara^(0+256),0	;volatile
  4411  0C82  2C8B               	goto	l4343
  4412                           
  4413                           ;main.c: 106: {
  4414                           ;main.c: 108: if (gLedRunPara.fPrev)
  4415  0C83  1DD7               	btfss	_gLedRunPara^(0+256),3	;volatile
  4416  0C84  2C88               	goto	l4341
  4417                           
  4418                           ;main.c: 109: {
  4419                           ;main.c: 110: preview();
  4420  0C85  27E9  318C         	fcall	_preview
  4421                           
  4422                           ;main.c: 111: }
  4423  0C87  2C8B               	goto	l4343
  4424  0C88                     l4341:	
  4425                           
  4426                           ;main.c: 112: else
  4427                           ;main.c: 113: {
  4428                           ;main.c: 114: autoRun();
  4429  0C88  3188  20FC  318C   	fcall	_autoRun
  4430  0C8B                     l4343:	
  4431                           
  4432                           ;main.c: 115: }
  4433                           ;main.c: 116: }
  4434                           ;main.c: 118: if (gLedRunPara.fSave)
  4435  0C8B  0022               	movlb	2	; select bank2
  4436  0C8C  1D57               	btfss	_gLedRunPara^(0+256),2	;volatile
  4437  0C8D  2C4F               	goto	l627
  4438                           
  4439                           ;main.c: 119: {
  4440                           ;main.c: 120: saveLedPara();
  4441  0C8E  3196  262B  318C   	fcall	_saveLedPara
  4442  0C91  2C4F               	goto	l627
  4443  0C92                     __end_of_main:	
  4444  0C92                     __ptext45:	
  4445 ;; *************** function _DecodeDATA *****************
  4446 ;; Defined at:
  4447 ;;		line 154 in file "src/ble.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;		None
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;  val             2   18[BANK0 ] unsigned int 
  4452 ;;  val             2   20[BANK0 ] unsigned int 
  4453 ;;  i               1   24[BANK0 ] unsigned char 
  4454 ;;  i               1   27[BANK0 ] unsigned char 
  4455 ;;  i               1   22[BANK0 ] unsigned char 
  4456 ;;  i               1   23[BANK0 ] unsigned char 
  4457 ;;  len             1   17[BANK0 ] unsigned char 
  4458 ;;  idx             1   26[BANK0 ] unsigned char 
  4459 ;;  idx             1   25[BANK0 ] unsigned char 
  4460 ;;  len             1   16[BANK0 ] unsigned char 
  4461 ;;  idx             1   15[BANK0 ] unsigned char 
  4462 ;;  len             1    0        unsigned char 
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  1    wreg      void 
  4465 ;; Registers used:
  4466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4467 ;; Tracked objects:
  4468 ;;		On entry : 1F/2
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4473 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4474 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4476 ;;Total ram usage:       18 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    9
  4479 ;; This function calls:
  4480 ;;		___bmul
  4481 ;;		___lwdiv
  4482 ;;		_bleSendData
  4483 ;;		_bleSendDeviceData
  4484 ;;		_getCRC
  4485 ;;		_indicateLedBle
  4486 ;;		_turnOffLedRamp
  4487 ;;		_turnOnLedRamp
  4488 ;;		_updatePWM
  4489 ;; This function is called by:
  4490 ;;		_main
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           
  4495                           ;psect for function _DecodeDATA
  4496  0C92                     _DecodeDATA:	
  4497                           
  4498                           ;ble.c: 156: if ( gLedRunPara.find || rxBuf[0] != 0x68 )
  4499                           
  4500                           ;incstack = 0
  4501                           ; Regs used in _DecodeDATA: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4502  0C92  1857               	btfsc	_gLedRunPara^(0+256),0	;volatile
  4503  0C93  0008               	return
  4504  0C94  3068               	movlw	104
  4505  0C95  0023               	movlb	3	; select bank3
  4506  0C96  0620               	xorwf	_rxBuf^(0+384),w
  4507  0C97  1D03               	btfss	3,2
  4508  0C98  0008               	return
  4509  0C99  2EAC               	goto	l4029
  4510  0C9A                     l107:	
  4511                           ;ble.c: 161: {
  4512                           ;ble.c: 162: case 0x02:
  4513                           
  4514                           
  4515                           ;ble.c: 163: if ( !gLedRunPara.fPrev && getCRC(rxBuf, 4) == 0x00 )
  4516  0C9A  0022               	movlb	2	; select bank2
  4517  0C9B  19D7               	btfsc	_gLedRunPara^(0+256),3	;volatile
  4518  0C9C  0008               	return
  4519  0C9D  278C  318C         	fcall	PL6	;call to abstracted procedure
  4520  0C9F  3004               	movlw	4
  4521  0CA0  00A2               	movwf	getCRC@len
  4522  0CA1  26B7  318C         	fcall	_getCRC
  4523  0CA3  3A00               	xorlw	0
  4524  0CA4  1D03               	skipz
  4525  0CA5  0008               	return
  4526                           
  4527                           ;ble.c: 164: {
  4528                           ;ble.c: 165: if ( rxBuf[2] == 0x00 )
  4529  0CA6  0023               	movlb	3	; select bank3
  4530  0CA7  0822               	movf	(_rxBuf^(0+384)+2),w
  4531  0CA8  1D03               	btfss	3,2
  4532  0CA9  2CB4               	goto	l3831
  4533                           
  4534                           ;ble.c: 166: {
  4535                           ;ble.c: 167: gLedPara.fAuto = 0;
  4536  0CAA  0022               	movlb	2	; select bank2
  4537  0CAB  1020               	bcf	_gLedPara^(0+256),0	;volatile
  4538                           
  4539                           ;ble.c: 168: if ( gLedPara.mPara.manualPara.fOn )
  4540  0CAC  1C21               	btfss	(_gLedPara^(0+256)+1),0	;volatile
  4541  0CAD  2CB1               	goto	l3829
  4542                           
  4543                           ;ble.c: 169: {
  4544                           ;ble.c: 170: turnOnLedRamp();
  4545  0CAE  26DB  318C         	fcall	_turnOnLedRamp
  4546                           
  4547                           ;ble.c: 171: }
  4548  0CB0  2CB8               	goto	l112
  4549  0CB1                     l3829:	
  4550                           
  4551                           ;ble.c: 172: else
  4552                           ;ble.c: 173: {
  4553                           ;ble.c: 174: turnOffLedRamp();
  4554  0CB1  26CB  318C         	fcall	_turnOffLedRamp
  4555  0CB3  2CB8               	goto	l112
  4556  0CB4                     l3831:	
  4557                           
  4558                           ;ble.c: 177: else if ( rxBuf[2] == 0x01 )
  4559  0CB4  0B22               	decfsz	(_rxBuf^(0+384)+2),w
  4560  0CB5  2CB8               	goto	l112
  4561                           
  4562                           ;ble.c: 178: {
  4563                           ;ble.c: 179: gLedPara.fAuto = 1;
  4564  0CB6  0022               	movlb	2	; select bank2
  4565  0CB7  1420               	bsf	_gLedPara^(0+256),0	;volatile
  4566  0CB8                     l112:	
  4567                           
  4568                           ;ble.c: 180: }
  4569                           ;ble.c: 181: gLedRunPara.fSave = 1;
  4570  0CB8  0022               	movlb	2	; select bank2
  4571  0CB9  1557               	bsf	_gLedRunPara^(0+256),2	;volatile
  4572                           
  4573                           ;ble.c: 182: gLedRunPara.nSaveDelayCount = 3;
  4574  0CBA  3003               	movlw	3
  4575  0CBB  00DA               	movwf	(_gLedRunPara^(0+256)+3)	;volatile
  4576  0CBC                     l3837:	
  4577                           
  4578                           ;ble.c: 183: bleSendDeviceData();
  4579  0CBC  318B  2BAF         	ljmp	l3283
  4580  0CBE                     l115:	
  4581                           ;ble.c: 187: case 0x03:
  4582                           
  4583                           
  4584                           ;ble.c: 188: if ( !gLedPara.fAuto )
  4585  0CBE  0022               	movlb	2	; select bank2
  4586  0CBF  1820               	btfsc	_gLedPara^(0+256),0	;volatile
  4587  0CC0  0008               	return
  4588                           
  4589                           ;ble.c: 189: {
  4590                           ;ble.c: 190: if ( getCRC(rxBuf, 4) == 0x00 )
  4591  0CC1  278C  318C         	fcall	PL6	;call to abstracted procedure
  4592  0CC3  3004               	movlw	4
  4593  0CC4  00A2               	movwf	getCRC@len
  4594  0CC5  26B7  318C         	fcall	_getCRC
  4595  0CC7  3A00               	xorlw	0
  4596  0CC8  1D03               	skipz
  4597  0CC9  0008               	return
  4598                           
  4599                           ;ble.c: 191: {
  4600                           ;ble.c: 192: if ( rxBuf[2] == 0x00 )
  4601  0CCA  0023               	movlb	3	; select bank3
  4602  0CCB  0822               	movf	(_rxBuf^(0+384)+2),w
  4603  0CCC  1D03               	btfss	3,2
  4604  0CCD  2CD3               	goto	l3847
  4605                           
  4606                           ;ble.c: 193: {
  4607                           ;ble.c: 194: gLedPara.mPara.manualPara.fOn = 0;
  4608  0CCE  0022               	movlb	2	; select bank2
  4609  0CCF  1021               	bcf	(_gLedPara^(0+256)+1),0	;volatile
  4610                           
  4611                           ;ble.c: 195: turnOffLedRamp();
  4612  0CD0  26CB  318C         	fcall	_turnOffLedRamp
  4613                           
  4614                           ;ble.c: 196: }
  4615  0CD2  2CB8               	goto	l112
  4616  0CD3                     l3847:	
  4617                           
  4618                           ;ble.c: 197: else if ( rxBuf[2] == 0x01 )
  4619  0CD3  0B22               	decfsz	(_rxBuf^(0+384)+2),w
  4620  0CD4  2CB8               	goto	l112
  4621                           
  4622                           ;ble.c: 198: {
  4623                           ;ble.c: 199: gLedPara.mPara.manualPara.fOn = 1;
  4624  0CD5  0022               	movlb	2	; select bank2
  4625  0CD6  1421               	bsf	(_gLedPara^(0+256)+1),0	;volatile
  4626                           
  4627                           ;ble.c: 200: turnOnLedRamp();
  4628  0CD7  26DB  318C         	fcall	_turnOnLedRamp
  4629  0CD9  2CB8               	goto	l112
  4630  0CDA                     l121:	
  4631                           ;ble.c: 209: case 0x04:
  4632                           
  4633                           ;ble.c: 201: }
  4634                           ;ble.c: 202: gLedRunPara.fSave = 1;
  4635                           
  4636                           
  4637                           ;ble.c: 210: if ( gLedPara.mPara.manualPara.fOn && ( !gLedPara.fAuto ) )
  4638  0CDA  0022               	movlb	2	; select bank2
  4639  0CDB  1821               	btfsc	(_gLedPara^(0+256)+1),0	;volatile
  4640  0CDC  1820               	btfsc	_gLedPara^(0+256),0	;volatile
  4641  0CDD  0008               	return
  4642                           
  4643                           ;ble.c: 211: {
  4644                           ;ble.c: 212: gLedPara.mPara.manualPara.fDyn = 0;
  4645  0CDE  01A2               	clrf	(_gLedPara^(0+256)+2)	;volatile
  4646                           
  4647                           ;ble.c: 214: if ( getCRC(rxBuf, len) == 0x00 )
  4648  0CDF  278C  318C         	fcall	PL6	;call to abstracted procedure
  4649  0CE1  300D               	movlw	13
  4650  0CE2  00A2               	movwf	getCRC@len
  4651  0CE3  26B7  318C         	fcall	_getCRC
  4652  0CE5  3A00               	xorlw	0
  4653  0CE6  1D03               	skipz
  4654  0CE7  0008               	return
  4655                           
  4656                           ;ble.c: 215: {
  4657                           ;ble.c: 216: for ( unsigned char i = 0; i < 5; i++ )
  4658  0CE8  01BB               	clrf	DecodeDATA@i
  4659  0CE9                     l3873:	
  4660                           
  4661                           ;ble.c: 217: {
  4662                           ;ble.c: 218: unsigned int val = ( rxBuf[2 + 2 * i] << 8 ) | rxBuf[3 + 2 * i];
  4663  0CE9  353B               	lslf	DecodeDATA@i,w
  4664  0CEA  3EA3               	addlw	(low ((_rxBuf| (0+256)+3)))& (0+255)
  4665  0CEB  0086               	movwf	6
  4666  0CEC  3001               	movlw	1	; select bank3/4
  4667  0CED  0087               	movwf	7
  4668  0CEE  353B               	lslf	DecodeDATA@i,w
  4669  0CEF  27B4  318C         	fcall	PL64	;call to abstracted procedure
  4670  0CF1  00B5               	movwf	DecodeDATA@val+1
  4671  0CF2  0801               	movf	1,w
  4672  0CF3  00B4               	movwf	DecodeDATA@val
  4673                           
  4674                           ;ble.c: 219: if ( val <= 1000 )
  4675  0CF4  3003               	movlw	3
  4676  0CF5  0235               	subwf	DecodeDATA@val+1,w
  4677  0CF6  30E9               	movlw	233
  4678  0CF7  1903               	skipnz
  4679  0CF8  0234               	subwf	DecodeDATA@val,w
  4680  0CF9  1803               	skipnc
  4681  0CFA  2D03               	goto	l3879
  4682                           
  4683                           ;ble.c: 220: {
  4684                           ;ble.c: 221: gLedPara.mPara.manualPara.nBrt[i] = val;
  4685  0CFB  353B               	lslf	DecodeDATA@i,w
  4686  0CFC  3E23               	addlw	(low ((_gLedPara| (0+256)+3)))& (0+255)
  4687  0CFD  27C0  318C         	fcall	PL76	;call to abstracted procedure
  4688                           
  4689                           ;ble.c: 222: gLedRunPara.nTargetBrt[i] = val;
  4690  0CFF  353B               	lslf	DecodeDATA@i,w
  4691  0D00  3E5B               	addlw	(low ((_gLedRunPara| (0+256)+4)))& (0+255)
  4692  0D01  27C0  318C         	fcall	PL76	;call to abstracted procedure
  4693  0D03                     l3879:	
  4694  0D03  3005               	movlw	5
  4695  0D04  0ABB               	incf	DecodeDATA@i,f
  4696  0D05  023B               	subwf	DecodeDATA@i,w
  4697  0D06  1C03               	skipc
  4698  0D07  2CE9               	goto	l3873
  4699  0D08                     l125:	
  4700                           
  4701                           ;ble.c: 223: }
  4702                           ;ble.c: 224: }
  4703                           ;ble.c: 225: gLedRunPara.fSave = 1;
  4704                           
  4705                           ;ble.c: 226: gLedRunPara.nSaveDelayCount = 3;
  4706  0D08  2FC6               	ljmp	PL78	;call to abstracted procedure
  4707  0D09                     l3885:	
  4708                           
  4709                           ;ble.c: 232: if ( rxBuf[0] ^ rxBuf[1] == rxBuf[2] )
  4710  0D09  0821               	movf	(_rxBuf^(0+384)+1),w
  4711  0D0A  0622               	xorwf	(_rxBuf^(0+384)+2),w
  4712  0D0B  1D03               	btfss	3,2
  4713  0D0C  2D0F               	goto	u3520
  4714  0D0D  3001               	movlw	1
  4715  0D0E  2D10               	goto	u3530
  4716  0D0F                     u3520:	
  4717  0D0F  3000               	movlw	0
  4718  0D10                     u3530:	
  4719  0D10  0020               	movlb	0	; select bank0
  4720  0D11  00AA               	movwf	??_DecodeDATA
  4721  0D12  279A  318C         	fcall	PL14	;call to abstracted procedure
  4722  0D14  1903               	btfsc	3,2
  4723  0D15  0008               	return
  4724  0D16  2CBC               	goto	l3837
  4725  0D17                     l3889:	
  4726                           
  4727                           ;ble.c: 239: if ( rxBuf[2] < 4 && getCRC(rxBuf, 4) == 0x00 )
  4728  0D17  3004               	movlw	4
  4729  0D18  0222               	subwf	(_rxBuf^(0+384)+2),w
  4730  0D19  1803               	skipnc
  4731  0D1A  0008               	return
  4732  0D1B  278C  318C         	fcall	PL6	;call to abstracted procedure
  4733  0D1D  3004               	movlw	4
  4734  0D1E  00A2               	movwf	getCRC@len
  4735  0D1F  26B7  318C         	fcall	_getCRC
  4736  0D21  3A00               	xorlw	0
  4737  0D22  1D03               	skipz
  4738  0D23  0008               	return
  4739                           
  4740                           ;ble.c: 240: {
  4741                           ;ble.c: 241: unsigned char idx = rxBuf[2];
  4742  0D24  0023               	movlb	3	; select bank3
  4743  0D25  0822               	movf	(_rxBuf^(0+384)+2),w
  4744  0D26  0020               	movlb	0	; select bank0
  4745  0D27  00AF               	movwf	DecodeDATA@idx
  4746                           
  4747                           ;ble.c: 242: for ( unsigned char i = 0; i < 5; i++ )
  4748  0D28  01B7               	clrf	DecodeDATA@i_299
  4749  0D29                     l3901:	
  4750                           
  4751                           ;ble.c: 243: {
  4752                           ;ble.c: 244: gLedPara.mPara.manualPara.nCustomBrt[idx][i] = gLedRunPara.nCurrentBrt[i] /
      +                           10;
  4753  0D29  3005               	movlw	5
  4754  0D2A  00A0               	movwf	___bmul@multiplicand
  4755  0D2B  082F               	movf	DecodeDATA@idx,w
  4756  0D2C  318A  2262  318C   	fcall	___bmul
  4757  0D2F  3E2D               	addlw	(low ((_gLedPara| (0+256)+13)))& (0+255)
  4758  0D30  0737               	addwf	DecodeDATA@i_299,w
  4759  0D31  00AA               	movwf	??_DecodeDATA
  4760  0D32  0086               	movwf	6
  4761  0D33  3001               	movlw	1	; select bank2/3
  4762  0D34  0087               	movwf	7
  4763  0D35  300A               	movlw	10
  4764  0D36  00A0               	movwf	___lwdiv@divisor
  4765  0D37  01A1               	clrf	___lwdiv@divisor+1
  4766  0D38  3537               	lslf	DecodeDATA@i_299,w
  4767  0D39  3E65               	addlw	(low ((_gLedRunPara| (0+256)+14)))& (0+255)
  4768  0D3A  0084               	movwf	4
  4769  0D3B  3001               	movlw	1	; select bank2/3
  4770  0D3C  0085               	movwf	5
  4771  0D3D  3F00               	moviw [0]fsr0
  4772  0D3E  00A2               	movwf	___lwdiv@dividend
  4773  0D3F  3F01               	moviw [1]fsr0
  4774  0D40  00A3               	movwf	___lwdiv@dividend+1
  4775  0D41  26EC  318C         	fcall	___lwdiv
  4776  0D43  0820               	movf	?___lwdiv,w
  4777  0D44  0081               	movwf	1
  4778  0D45  3005               	movlw	5
  4779  0D46  0AB7               	incf	DecodeDATA@i_299,f
  4780  0D47  0237               	subwf	DecodeDATA@i_299,w
  4781  0D48  1C03               	skipc
  4782  0D49  2D29               	goto	l3901
  4783  0D4A  2CB8               	goto	l112
  4784  0D4B                     l133:	
  4785                           ;ble.c: 252: case 0x07:
  4786                           
  4787                           ;ble.c: 245: }
  4788                           ;ble.c: 246: gLedRunPara.fSave = 1;
  4789                           
  4790                           
  4791                           ;ble.c: 253: if ( !gLedRunPara.fPrev && getCRC(rxBuf, 2 * 5 + 11) == 0x00 )
  4792  0D4B  0022               	movlb	2	; select bank2
  4793  0D4C  19D7               	btfsc	_gLedRunPara^(0+256),3	;volatile
  4794  0D4D  0008               	return
  4795  0D4E  278C  318C         	fcall	PL6	;call to abstracted procedure
  4796  0D50  3015               	movlw	21
  4797  0D51  00A2               	movwf	getCRC@len
  4798  0D52  26B7  318C         	fcall	_getCRC
  4799  0D54  3A00               	xorlw	0
  4800  0D55  1D03               	skipz
  4801  0D56  0008               	return
  4802                           
  4803                           ;ble.c: 254: {
  4804                           ;ble.c: 255: unsigned char len = sizeof (gLedPara.aPara.array );
  4805  0D57  3012               	movlw	18
  4806  0D58  00B0               	movwf	DecodeDATA@len_300
  4807                           
  4808                           ;ble.c: 256: for ( unsigned char i = 0; i < len; i++ )
  4809  0D59  01B6               	clrf	DecodeDATA@i_301
  4810  0D5A                     l3921:	
  4811  0D5A  0830               	movf	DecodeDATA@len_300,w
  4812  0D5B  0236               	subwf	DecodeDATA@i_301,w
  4813  0D5C  1803               	btfsc	3,0
  4814  0D5D  2CB8               	goto	l112
  4815                           
  4816                           ;ble.c: 257: {
  4817                           ;ble.c: 258: gLedPara.aPara.array[i] = rxBuf[2 + i];
  4818  0D5E  0836               	movf	DecodeDATA@i_301,w
  4819  0D5F  3E41               	addlw	(low ((_gLedPara| (0+256)+33)))& (0+255)
  4820  0D60  0086               	movwf	6
  4821  0D61  3001               	movlw	1	; select bank2/3
  4822  0D62  0087               	movwf	7
  4823  0D63  0836               	movf	DecodeDATA@i_301,w
  4824  0D64  27B4  318C         	fcall	PL64	;call to abstracted procedure
  4825  0D66  0081               	movwf	1
  4826  0D67  0AB6               	incf	DecodeDATA@i_301,f
  4827  0D68  2D5A               	goto	l3921
  4828  0D69                     l138:	
  4829                           ;ble.c: 266: case 0x08:
  4830                           
  4831                           ;ble.c: 259: }
  4832                           ;ble.c: 260: gLedRunPara.fSave = 1;
  4833                           
  4834                           
  4835                           ;ble.c: 267: if ( gLedPara.mPara.manualPara.fOn && getCRC(rxBuf, 4) == rxBuf[4] && rxBuf
      +                          [2] < 5 )
  4836  0D69  0022               	movlb	2	; select bank2
  4837  0D6A  1C21               	btfss	(_gLedPara^(0+256)+1),0	;volatile
  4838  0D6B  0008               	return
  4839  0D6C  278C  318C         	fcall	PL6	;call to abstracted procedure
  4840  0D6E  3004               	movlw	4
  4841  0D6F  00A2               	movwf	getCRC@len
  4842  0D70  26B7  318C         	fcall	_getCRC
  4843  0D72  0023               	movlb	3	; select bank3
  4844  0D73  0624               	xorwf	(_rxBuf^(0+384)+4),w
  4845  0D74  1D03               	skipz
  4846  0D75  0008               	return
  4847  0D76  3005               	movlw	5
  4848  0D77  0222               	subwf	(_rxBuf^(0+384)+2),w
  4849  0D78  1803               	skipnc
  4850  0D79  0008               	return
  4851                           
  4852                           ;ble.c: 268: {
  4853                           ;ble.c: 269: unsigned char idx = rxBuf[2];
  4854  0D7A  0822               	movf	(_rxBuf^(0+384)+2),w
  4855  0D7B  0020               	movlb	0	; select bank0
  4856  0D7C  00B9               	movwf	DecodeDATA@idx_302
  4857                           
  4858                           ;ble.c: 270: if ( gLedPara.mPara.manualPara.nBrt[idx] + rxBuf[3] < 1000 )
  4859  0D7D  3539               	lslf	DecodeDATA@idx_302,w
  4860  0D7E  3E23               	addlw	(low ((_gLedPara| (0+256)+3)))& (0+255)
  4861  0D7F  27A3  318C         	fcall	PL30	;call to abstracted procedure
  4862  0D81  072A               	addwf	??_DecodeDATA,w
  4863  0D82  00AC               	movwf	??_DecodeDATA+2
  4864  0D83  082B               	movf	??_DecodeDATA+1,w
  4865  0D84  1803               	skipnc
  4866  0D85  0A2B               	incf	??_DecodeDATA+1,w
  4867  0D86  00AD               	movwf	??_DecodeDATA+3
  4868  0D87  3003               	movlw	3
  4869  0D88  022D               	subwf	??_DecodeDATA+3,w
  4870  0D89  30E8               	movlw	232
  4871  0D8A  1903               	skipnz
  4872  0D8B  022C               	subwf	??_DecodeDATA+2,w
  4873  0D8C  1803               	skipnc
  4874  0D8D  2DA2               	goto	l3939
  4875                           
  4876                           ;ble.c: 271: {
  4877                           ;ble.c: 272: gLedPara.mPara.manualPara.nBrt[idx] += rxBuf[3];
  4878  0D8E  3539               	lslf	DecodeDATA@idx_302,w
  4879  0D8F  3E23               	addlw	(low ((_gLedPara| (0+256)+3)))& (0+255)
  4880  0D90  0086               	movwf	6
  4881  0D91  0023               	movlb	3	; select bank3
  4882  0D92  0823               	movf	(_rxBuf^(0+384)+3),w
  4883  0D93  0781               	addwf	1,f
  4884  0D94  3141               	addfsr 1,1
  4885  0D95  1803               	skipnc
  4886  0D96  0A81               	incf	1,f
  4887                           
  4888                           ;ble.c: 273: gLedRunPara.nTargetBrt[idx] = gLedPara.mPara.manualPara.nBrt[idx];
  4889  0D97  0020               	movlb	0	; select bank0
  4890  0D98  3539               	lslf	DecodeDATA@idx_302,w
  4891  0D99  3E23               	addlw	(low ((_gLedPara| (0+256)+3)))& (0+255)
  4892  0D9A  0086               	movwf	6
  4893  0D9B  3001               	movlw	1	; select bank2/3
  4894  0D9C  0087               	movwf	7
  4895  0D9D  3539               	lslf	DecodeDATA@idx_302,w
  4896  0D9E  3E5B               	addlw	(low ((_gLedRunPara| (0+256)+4)))& (0+255)
  4897  0D9F  2792  318C         	fcall	PL8	;call to abstracted procedure
  4898                           
  4899                           ;ble.c: 274: }
  4900  0DA1  2D08               	goto	l125
  4901  0DA2                     l3939:	
  4902                           
  4903                           ;ble.c: 275: else
  4904                           ;ble.c: 276: {
  4905                           ;ble.c: 277: gLedPara.mPara.manualPara.nBrt[idx] = 1000;
  4906  0DA2  27BA  318C         	fcall	PL68	;call to abstracted procedure
  4907  0DA4  3E23               	addlw	(low ((_gLedPara| (0+256)+3)))& (0+255)
  4908  0DA5  0086               	movwf	6
  4909  0DA6  3001               	movlw	1	; select bank2/3
  4910  0DA7  0087               	movwf	7
  4911  0DA8  082A               	movf	??_DecodeDATA,w
  4912  0DA9  3FC0               	movwi [0]fsr1
  4913  0DAA  082B               	movf	??_DecodeDATA+1,w
  4914  0DAB  3FC1               	movwi [1]fsr1
  4915                           
  4916                           ;ble.c: 278: gLedRunPara.nTargetBrt[idx] = 1000;
  4917  0DAC  27BA  318C         	fcall	PL68	;call to abstracted procedure
  4918  0DAE  3E5B               	addlw	(low ((_gLedRunPara| (0+256)+4)))& (0+255)
  4919  0DAF  0086               	movwf	6
  4920  0DB0  082A               	movf	??_DecodeDATA,w
  4921  0DB1  3FC0               	movwi [0]fsr1
  4922  0DB2  082B               	movf	??_DecodeDATA+1,w
  4923  0DB3  3FC1               	movwi [1]fsr1
  4924  0DB4  2D08               	goto	l125
  4925  0DB5                     l142:	
  4926                           ;ble.c: 285: case 0x09:
  4927                           
  4928                           ;ble.c: 279: }
  4929                           ;ble.c: 280: gLedRunPara.fSave = 1;
  4930                           
  4931                           
  4932                           ;ble.c: 286: if ( gLedPara.mPara.manualPara.fOn && getCRC(rxBuf, 4) == rxBuf[4] && rxBuf
      +                          [2] < 5 )
  4933  0DB5  0022               	movlb	2	; select bank2
  4934  0DB6  1C21               	btfss	(_gLedPara^(0+256)+1),0	;volatile
  4935  0DB7  0008               	return
  4936  0DB8  278C  318C         	fcall	PL6	;call to abstracted procedure
  4937  0DBA  3004               	movlw	4
  4938  0DBB  00A2               	movwf	getCRC@len
  4939  0DBC  26B7  318C         	fcall	_getCRC
  4940  0DBE  0023               	movlb	3	; select bank3
  4941  0DBF  0624               	xorwf	(_rxBuf^(0+384)+4),w
  4942  0DC0  1D03               	skipz
  4943  0DC1  0008               	return
  4944  0DC2  3005               	movlw	5
  4945  0DC3  0222               	subwf	(_rxBuf^(0+384)+2),w
  4946  0DC4  1803               	skipnc
  4947  0DC5  0008               	return
  4948                           
  4949                           ;ble.c: 287: {
  4950                           ;ble.c: 288: unsigned char idx = rxBuf[2];
  4951  0DC6  0822               	movf	(_rxBuf^(0+384)+2),w
  4952  0DC7  0020               	movlb	0	; select bank0
  4953  0DC8  00BA               	movwf	DecodeDATA@idx_303
  4954                           
  4955                           ;ble.c: 289: if ( gLedPara.mPara.manualPara.nBrt[idx] > rxBuf[3] )
  4956  0DC9  353A               	lslf	DecodeDATA@idx_303,w
  4957  0DCA  3E23               	addlw	(low ((_gLedPara| (0+256)+3)))& (0+255)
  4958  0DCB  27A3  318C         	fcall	PL30	;call to abstracted procedure
  4959  0DCD  00AC               	movwf	??_DecodeDATA+2
  4960  0DCE  01AD               	clrf	??_DecodeDATA+3
  4961  0DCF  082B               	movf	??_DecodeDATA+1,w
  4962  0DD0  022D               	subwf	??_DecodeDATA+3,w
  4963  0DD1  1D03               	skipz
  4964  0DD2  2DD5               	goto	u3685
  4965  0DD3  082A               	movf	??_DecodeDATA,w
  4966  0DD4  022C               	subwf	??_DecodeDATA+2,w
  4967  0DD5                     u3685:	
  4968  0DD5  1803               	skipnc
  4969  0DD6  2DE8               	goto	l3957
  4970                           
  4971                           ;ble.c: 290: {
  4972                           ;ble.c: 291: gLedPara.mPara.manualPara.nBrt[idx] -= rxBuf[3];
  4973  0DD7  27AE  318C         	fcall	PL62	;call to abstracted procedure
  4974  0DD9  0023               	movlb	3	; select bank3
  4975  0DDA  0823               	movf	(_rxBuf^(0+384)+3),w
  4976  0DDB  0281               	subwf	1,f
  4977  0DDC  3141               	addfsr 1,1
  4978  0DDD  1C03               	skipc
  4979  0DDE  0381               	decf	1,f
  4980  0DDF  317F               	addfsr 1,-1
  4981                           
  4982                           ;ble.c: 292: gLedRunPara.nTargetBrt[idx] = gLedPara.mPara.manualPara.nBrt[idx];
  4983  0DE0  0020               	movlb	0	; select bank0
  4984  0DE1  27AE  318C         	fcall	PL62	;call to abstracted procedure
  4985  0DE3  353A               	lslf	DecodeDATA@idx_303,w
  4986  0DE4  3E5B               	addlw	(low ((_gLedRunPara| (0+256)+4)))& (0+255)
  4987  0DE5  2792  318C         	fcall	PL8	;call to abstracted procedure
  4988                           
  4989                           ;ble.c: 293: }
  4990  0DE7  2D08               	goto	l125
  4991  0DE8                     l3957:	
  4992                           
  4993                           ;ble.c: 294: else
  4994                           ;ble.c: 295: {
  4995                           ;ble.c: 296: gLedPara.mPara.manualPara.nBrt[idx] = 0;
  4996  0DE8  353A               	lslf	DecodeDATA@idx_303,w
  4997  0DE9  3186  26E8  318C   	fcall	PL10	;call to abstracted procedure
  4998                           
  4999                           ;ble.c: 297: gLedRunPara.nTargetBrt[idx] = 0;
  5000  0DEC  353A               	lslf	DecodeDATA@idx_303,w
  5001  0DED  3E5B               	addlw	(low ((_gLedRunPara| (0+256)+4)))& (0+255)
  5002  0DEE  0086               	movwf	6
  5003  0DEF  3000               	movlw	0
  5004  0DF0  3FC0               	movwi [0]fsr1
  5005  0DF1  3FC1               	movwi [1]fsr1
  5006  0DF2  2D08               	goto	l125
  5007  0DF3                     l146:	
  5008                           ;ble.c: 304: case 0x0B:
  5009                           
  5010                           ;ble.c: 298: }
  5011                           ;ble.c: 299: gLedRunPara.fSave = 1;
  5012                           
  5013                           
  5014                           ;ble.c: 305: if ( gLedPara.fAuto )
  5015  0DF3  0022               	movlb	2	; select bank2
  5016  0DF4  1C20               	btfss	_gLedPara^(0+256),0	;volatile
  5017  0DF5  0008               	return
  5018                           
  5019                           ;ble.c: 306: {
  5020                           ;ble.c: 307: unsigned char len = 3 + 2 * 5;
  5021  0DF6  300D               	movlw	13
  5022  0DF7  0020               	movlb	0	; select bank0
  5023  0DF8  00B1               	movwf	DecodeDATA@len_304
  5024                           
  5025                           ;ble.c: 308: if ( getCRC(rxBuf, len) == 0x00 )
  5026  0DF9  30A0               	movlw	low _rxBuf
  5027  0DFA  00A0               	movwf	getCRC@pbuf
  5028  0DFB  3001               	movlw	high _rxBuf
  5029  0DFC  00A1               	movwf	getCRC@pbuf+1
  5030  0DFD  0831               	movf	DecodeDATA@len_304,w
  5031  0DFE  00A2               	movwf	getCRC@len
  5032  0DFF  26B7  318C         	fcall	_getCRC
  5033  0E01  3A00               	xorlw	0
  5034  0E02  1D03               	skipz
  5035  0E03  0008               	return
  5036                           
  5037                           ;ble.c: 309: {
  5038                           ;ble.c: 310: for ( unsigned char i = 0; i < 5; i++ )
  5039  0E04  01B8               	clrf	DecodeDATA@i_305
  5040  0E05                     l3969:	
  5041  0E05  3005               	movlw	5
  5042  0E06  0238               	subwf	DecodeDATA@i_305,w
  5043  0E07  1803               	btfsc	3,0
  5044  0E08  2E24               	goto	l3983
  5045                           
  5046                           ;ble.c: 311: {
  5047                           ;ble.c: 312: unsigned int val = ( rxBuf[2 + 2 * i] << 8 ) | rxBuf[3 + 2 * i];
  5048  0E09  3538               	lslf	DecodeDATA@i_305,w
  5049  0E0A  3EA3               	addlw	(low ((_rxBuf| (0+256)+3)))& (0+255)
  5050  0E0B  0086               	movwf	6
  5051  0E0C  3001               	movlw	1	; select bank3/4
  5052  0E0D  0087               	movwf	7
  5053  0E0E  3538               	lslf	DecodeDATA@i_305,w
  5054  0E0F  27B4  318C         	fcall	PL64	;call to abstracted procedure
  5055  0E11  00B3               	movwf	DecodeDATA@val_306+1
  5056  0E12  0801               	movf	1,w
  5057  0E13  00B2               	movwf	DecodeDATA@val_306
  5058                           
  5059                           ;ble.c: 313: if ( val <= 1000 )
  5060  0E14  3003               	movlw	3
  5061  0E15  0233               	subwf	DecodeDATA@val_306+1,w
  5062  0E16  30E9               	movlw	233
  5063  0E17  1903               	skipnz
  5064  0E18  0232               	subwf	DecodeDATA@val_306,w
  5065  0E19  1803               	skipnc
  5066  0E1A  2E22               	goto	l3979
  5067                           
  5068                           ;ble.c: 314: {
  5069                           ;ble.c: 315: gLedRunPara.nCurrentBrt[i] = val;
  5070  0E1B  3538               	lslf	DecodeDATA@i_305,w
  5071  0E1C  3E65               	addlw	(low ((_gLedRunPara| (0+256)+14)))& (0+255)
  5072  0E1D  0086               	movwf	6
  5073  0E1E  0832               	movf	DecodeDATA@val_306,w
  5074  0E1F  3FC0               	movwi [0]fsr1
  5075  0E20  0833               	movf	DecodeDATA@val_306+1,w
  5076  0E21  3FC1               	movwi [1]fsr1
  5077  0E22                     l3979:	
  5078  0E22  0AB8               	incf	DecodeDATA@i_305,f
  5079  0E23  2E05               	goto	l3969
  5080  0E24                     l3983:	
  5081                           
  5082                           ;ble.c: 316: }
  5083                           ;ble.c: 317: }
  5084                           ;ble.c: 318: updatePWM();
  5085  0E24  3184  24C6         	fcall	_updatePWM
  5086                           
  5087                           ;ble.c: 319: gLedRunPara.fPrev = 1;
  5088  0E26  0022               	movlb	2	; select bank2
  5089  0E27  15D7               	bsf	_gLedRunPara^(0+256),3	;volatile
  5090                           
  5091                           ;ble.c: 320: gLedRunPara.nPrevCount = 3;
  5092  0E28  3003               	movlw	3
  5093  0E29  00D9               	movwf	(_gLedRunPara^(0+256)+2)	;volatile
  5094  0E2A  0008               	return
  5095  0E2B                     l3989:	
  5096                           
  5097                           ;ble.c: 326: if ( rxBuf[0] ^ rxBuf[1] == rxBuf[2] )
  5098  0E2B  0821               	movf	(_rxBuf^(0+384)+1),w
  5099  0E2C  0622               	xorwf	(_rxBuf^(0+384)+2),w
  5100  0E2D  1D03               	btfss	3,2
  5101  0E2E  2E31               	goto	u3730
  5102  0E2F  3001               	movlw	1
  5103  0E30  2E32               	goto	u3740
  5104  0E31                     u3730:	
  5105  0E31  3000               	movlw	0
  5106  0E32                     u3740:	
  5107  0E32  0020               	movlb	0	; select bank0
  5108  0E33  00AA               	movwf	??_DecodeDATA
  5109  0E34  279A  318C         	fcall	PL14	;call to abstracted procedure
  5110  0E36  1903               	btfsc	3,2
  5111  0E37  0008               	return
  5112                           
  5113                           ;ble.c: 327: {
  5114                           ;ble.c: 328: gLedRunPara.fPrev = 0;
  5115  0E38  0022               	movlb	2	; select bank2
  5116  0E39  11D7               	bcf	_gLedRunPara^(0+256),3	;volatile
  5117                           
  5118                           ;ble.c: 329: gLedRunPara.nPrevCount = 0;
  5119  0E3A  01D9               	clrf	(_gLedRunPara^(0+256)+2)	;volatile
  5120  0E3B  0008               	return
  5121  0E3C                     l3995:	
  5122                           
  5123                           ;ble.c: 334: if ( getCRC(rxBuf, 10) == 0x00 )
  5124  0E3C  278C  318C         	fcall	PL6	;call to abstracted procedure
  5125  0E3E  300A               	movlw	10
  5126  0E3F  00A2               	movwf	getCRC@len
  5127  0E40  26B7  318C         	fcall	_getCRC
  5128  0E42  3A00               	xorlw	0
  5129  0E43  1D03               	skipz
  5130  0E44  0008               	return
  5131                           
  5132                           ;ble.c: 335: {
  5133                           ;ble.c: 336: gCurrentTime.datetime.year = rxBuf[2];
  5134  0E45  0023               	movlb	3	; select bank3
  5135  0E46  0822               	movf	(_rxBuf^(0+384)+2),w
  5136  0E47  0021               	movlb	1	; select bank1
  5137  0E48  00D8               	movwf	_gCurrentTime^(0+128)	;volatile
  5138                           
  5139                           ;ble.c: 337: gCurrentTime.datetime.month = rxBuf[3];
  5140  0E49  0023               	movlb	3	; select bank3
  5141  0E4A  0823               	movf	(_rxBuf^(0+384)+3),w
  5142  0E4B  0021               	movlb	1	; select bank1
  5143  0E4C  00D9               	movwf	(_gCurrentTime^(0+128)+1)	;volatile
  5144                           
  5145                           ;ble.c: 338: gCurrentTime.datetime.day = rxBuf[4];
  5146  0E4D  0023               	movlb	3	; select bank3
  5147  0E4E  0824               	movf	(_rxBuf^(0+384)+4),w
  5148  0E4F  0021               	movlb	1	; select bank1
  5149  0E50  00DA               	movwf	(_gCurrentTime^(0+128)+2)	;volatile
  5150                           
  5151                           ;ble.c: 339: gCurrentTime.datetime.wk = rxBuf[5];
  5152  0E51  0023               	movlb	3	; select bank3
  5153  0E52  0825               	movf	(_rxBuf^(0+384)+5),w
  5154  0E53  0021               	movlb	1	; select bank1
  5155  0E54  00DB               	movwf	(_gCurrentTime^(0+128)+3)	;volatile
  5156                           
  5157                           ;ble.c: 340: gCurrentTime.datetime.hour = rxBuf[6];
  5158  0E55  0023               	movlb	3	; select bank3
  5159  0E56  0826               	movf	(_rxBuf^(0+384)+6),w
  5160  0E57  0021               	movlb	1	; select bank1
  5161  0E58  00DC               	movwf	(_gCurrentTime^(0+128)+4)	;volatile
  5162                           
  5163                           ;ble.c: 341: gCurrentTime.datetime.minute = rxBuf[7];
  5164  0E59  0023               	movlb	3	; select bank3
  5165  0E5A  0827               	movf	(_rxBuf^(0+384)+7),w
  5166  0E5B  0021               	movlb	1	; select bank1
  5167  0E5C  00DD               	movwf	(_gCurrentTime^(0+128)+5)	;volatile
  5168                           
  5169                           ;ble.c: 342: gCurrentTime.datetime.second = rxBuf[8];
  5170  0E5D  0023               	movlb	3	; select bank3
  5171  0E5E  0828               	movf	(_rxBuf^(0+384)+8),w
  5172  0E5F  0021               	movlb	1	; select bank1
  5173  0E60  00DE               	movwf	(_gCurrentTime^(0+128)+6)	;volatile
  5174                           
  5175                           ;ble.c: 343: gLedPara.fSta = 3;
  5176  0E61  3006               	movlw	6
  5177  0E62  0022               	movlb	2	; select bank2
  5178  0E63  04A0               	iorwf	_gLedPara^(0+256),f	;volatile
  5179                           
  5180                           ;ble.c: 344: indicateLedBle();
  5181  0E64  273A  318C         	fcall	_indicateLedBle
  5182  0E66  2CBC               	goto	l3837
  5183  0E67                     l4005:	
  5184                           
  5185                           ;ble.c: 350: if ( rxBuf[0] ^ rxBuf[1] == rxBuf[2] )
  5186  0E67  0821               	movf	(_rxBuf^(0+384)+1),w
  5187  0E68  0622               	xorwf	(_rxBuf^(0+384)+2),w
  5188  0E69  1D03               	btfss	3,2
  5189  0E6A  2E6D               	goto	u3770
  5190  0E6B  3001               	movlw	1
  5191  0E6C  2E6E               	goto	u3780
  5192  0E6D                     u3770:	
  5193  0E6D  3000               	movlw	0
  5194  0E6E                     u3780:	
  5195  0E6E  0020               	movlb	0	; select bank0
  5196  0E6F  00AA               	movwf	??_DecodeDATA
  5197  0E70  279A  318C         	fcall	PL14	;call to abstracted procedure
  5198  0E72  1903               	btfsc	3,2
  5199  0E73  0008               	return
  5200                           
  5201                           ;ble.c: 351: {
  5202                           ;ble.c: 352: gLedRunPara.find = 1;
  5203  0E74  0022               	movlb	2	; select bank2
  5204  0E75  1457               	bsf	_gLedRunPara^(0+256),0	;volatile
  5205                           
  5206                           ;ble.c: 353: gLedRunPara.nFlashCount = 3;
  5207  0E76  3003               	movlw	3
  5208  0E77  00D8               	movwf	(_gLedRunPara^(0+256)+1)	;volatile
  5209  0E78  0008               	return
  5210  0E79                     l4011:	
  5211                           
  5212                           ;ble.c: 358: if ( getCRC(rxBuf, 5) == 0x00 )
  5213  0E79  278C  318C         	fcall	PL6	;call to abstracted procedure
  5214  0E7B  3005               	movlw	5
  5215  0E7C  00A2               	movwf	getCRC@len
  5216  0E7D  26B7  318C         	fcall	_getCRC
  5217  0E7F  3A00               	xorlw	0
  5218  0E80  1D03               	skipz
  5219  0E81  0008               	return
  5220                           
  5221                           ;ble.c: 359: {
  5222                           ;ble.c: 360: NVMADR = 8192 - 1;
  5223  0E82  301F               	movlw	31
  5224  0E83  0031               	movlb	17	; select bank17
  5225  0E84  0092               	movwf	18	;volatile
  5226  0E85  30FF               	movlw	255
  5227  0E86  0091               	movwf	17	;volatile
  5228                           
  5229                           ;ble.c: 361: NVMCON1 = 0x94;
  5230  0E87  3094               	movlw	148
  5231  0E88  0095               	movwf	21	;volsfr
  5232                           
  5233                           ;ble.c: 362: NVMCON2 = 0x55;
  5234  0E89  3055               	movlw	85
  5235  0E8A  0096               	movwf	22	;volsfr
  5236                           
  5237                           ;ble.c: 363: NVMCON2 = 0xAA;
  5238  0E8B  30AA               	movlw	170
  5239  0E8C  0096               	movwf	22	;volsfr
  5240                           
  5241                           ;ble.c: 364: NVMCON1bits.WR = 1;
  5242  0E8D  1495               	bsf	21,1	;volsfr
  5243                           
  5244                           ;ble.c: 365: __nop();
  5245  0E8E  0000               	nop
  5246                           
  5247                           ;ble.c: 366: __nop();
  5248  0E8F  0000               	nop
  5249  0E90                     l160:	
  5250                           ;ble.c: 367: while ( NVMCON1bits.WR );
  5251                           
  5252  0E90  0031               	movlb	17	; select bank17
  5253  0E91  1895               	btfsc	21,1	;volsfr
  5254  0E92  2E90               	goto	l160
  5255                           
  5256                           ;ble.c: 368: NVMCON1bits.WREN = 0;
  5257  0E93  1115               	bcf	21,2	;volsfr
  5258                           
  5259                           ;ble.c: 369: bleSendData(rxBuf, 5);
  5260  0E94  30A0               	movlw	low _rxBuf
  5261  0E95  0020               	movlb	0	; select bank0
  5262  0E96  00A1               	movwf	bleSendData@frame
  5263  0E97  3001               	movlw	high _rxBuf
  5264  0E98  00A2               	movwf	bleSendData@frame+1
  5265  0E99  3005               	movlw	5
  5266  0E9A  00A3               	movwf	bleSendData@len
  5267  0E9B  2711  318C         	fcall	_bleSendData
  5268                           
  5269                           ;ble.c: 370: _delay((unsigned long)((96)*(16000000/4000.0)));
  5270  0E9D  3002               	movlw	2
  5271  0E9E  0020               	movlb	0	; select bank0
  5272  0E9F  00AB               	movwf	??_DecodeDATA+1
  5273  0EA0  30F3               	movlw	243
  5274  0EA1  00AA               	movwf	??_DecodeDATA
  5275  0EA2  30B0               	movlw	176
  5276  0EA3                     u4437:	
  5277  0EA3  0B89               	decfsz	9,f
  5278  0EA4  2EA3               	goto	u4437
  5279  0EA5  0BAA               	decfsz	??_DecodeDATA,f
  5280  0EA6  2EA3               	goto	u4437
  5281  0EA7  0BAB               	decfsz	??_DecodeDATA+1,f
  5282  0EA8  2EA3               	goto	u4437
  5283  0EA9  0000               	nop
  5284  0EAA  0001               	reset	;# 
  5285  0EAB  0008               	return
  5286  0EAC                     l4029:	
  5287  0EAC  0821               	movf	(_rxBuf^(0+384)+1),w
  5288                           
  5289                           ; Switch size 1, requested type "space"
  5290                           ; Number of cases is 13, Range of values is 0 to 15
  5291                           ; switch strategies available:
  5292                           ; Name         Instructions Cycles
  5293                           ; direct_byte           38     6 (fixed)
  5294                           ; simple_byte           40    21 (average)
  5295                           ; jumptable            260     6 (fixed)
  5296                           ;	Chosen strategy is direct_byte
  5297  0EAD  0084               	movwf	4
  5298  0EAE  3010               	movlw	16
  5299  0EAF  0204               	subwf	4,w
  5300  0EB0  1803               	skipnc
  5301  0EB1  0008               	return
  5302  0EB2  3188               	movlp	high S4367
  5303  0EB3  3504               	lslf	4,w
  5304  0EB4  3E00               	addlw	low S4367
  5305  0EB5  0082               	movwf	2
  5306  0EB6                     l105:	
  5307  0EB6  0008               	return
  5308  0EB7                     __end_of_DecodeDATA:	
  5309  0EB7                     __ptext56:	
  5310 ;; *************** function _getCRC *****************
  5311 ;; Defined at:
  5312 ;;		line 26 in file "src/ble.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  pbuf            2    0[BANK0 ] PTR unsigned char 
  5315 ;;		 -> rxBuf(48), txBuf(48), 
  5316 ;;  len             1    2[BANK0 ] unsigned char 
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;  i               1    6[BANK0 ] unsigned char 
  5319 ;;  result          1    5[BANK0 ] unsigned char 
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      unsigned char 
  5322 ;; Registers used:
  5323 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5324 ;; Tracked objects:
  5325 ;;		On entry : 1F/0
  5326 ;;		On exit  : 1F/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5329 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5333 ;;Total ram usage:        7 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    6
  5336 ;; This function calls:
  5337 ;;		Nothing
  5338 ;; This function is called by:
  5339 ;;		_bleSendDeviceData
  5340 ;;		_DecodeDATA
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           
  5345                           ;psect for function _getCRC
  5346  0EB7                     _getCRC:	
  5347                           
  5348                           ;ble.c: 28: unsigned char result = 0x00;
  5349                           
  5350                           ;incstack = 0
  5351                           ; Regs used in _getCRC: [wreg+fsr1l+fsr1h+status,2+status,0]
  5352  0EB7  01A5               	clrf	getCRC@result
  5353                           
  5354                           ;ble.c: 29: for ( unsigned char i = 0; i < len; i++ )
  5355  0EB8  01A6               	clrf	getCRC@i
  5356  0EB9                     l3011:	
  5357  0EB9  0822               	movf	getCRC@len,w
  5358  0EBA  0226               	subwf	getCRC@i,w
  5359  0EBB  1803               	btfsc	3,0
  5360  0EBC  2EC9               	goto	l3013
  5361                           
  5362                           ;ble.c: 30: {
  5363                           ;ble.c: 31: result ^= *( pbuf + i );
  5364  0EBD  0826               	movf	getCRC@i,w
  5365  0EBE  00A3               	movwf	??_getCRC
  5366  0EBF  01A4               	clrf	??_getCRC+1
  5367  0EC0  0720               	addwf	getCRC@pbuf,w
  5368  0EC1  0086               	movwf	6
  5369  0EC2  0824               	movf	??_getCRC+1,w
  5370  0EC3  3D21               	addwfc	getCRC@pbuf+1,w
  5371  0EC4  0087               	movwf	7
  5372  0EC5  0801               	movf	1,w
  5373  0EC6  06A5               	xorwf	getCRC@result,f
  5374  0EC7  0AA6               	incf	getCRC@i,f
  5375  0EC8  2EB9               	goto	l3011
  5376  0EC9                     l3013:	
  5377                           
  5378                           ;ble.c: 32: }
  5379                           ;ble.c: 33: return result;
  5380  0EC9  0825               	movf	getCRC@result,w
  5381  0ECA  0008               	return
  5382  0ECB                     __end_of_getCRC:	
  5383  0ECB                     __ptext53:	
  5384 ;; *************** function _turnOffLedRamp *****************
  5385 ;; Defined at:
  5386 ;;		line 149 in file "src/led.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;		None
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;  i               1    0[BANK0 ] unsigned char 
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  1    wreg      void 
  5393 ;; Registers used:
  5394 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5395 ;; Tracked objects:
  5396 ;;		On entry : 1D/0
  5397 ;;		On exit  : 1F/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5401 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5404 ;;Total ram usage:        1 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    6
  5407 ;; This function calls:
  5408 ;;		Nothing
  5409 ;; This function is called by:
  5410 ;;		_DecodeDATA
  5411 ;;		_initLedStatus
  5412 ;; This function uses a non-reentrant model
  5413 ;;
  5414                           
  5415                           
  5416                           ;psect for function _turnOffLedRamp
  5417  0ECB                     _turnOffLedRamp:	
  5418  0ECB                     l3075:	
  5419                           ;incstack = 0
  5420                           ; Regs used in _turnOffLedRamp: [wreg+fsr1l+fsr1h+status,2+status,0]
  5421                           
  5422                           
  5423                           ;led.c: 151: for ( unsigned char i = 0; i < 5; i++ )
  5424  0ECB  0020               	movlb	0	; select bank0
  5425  0ECC  01A0               	clrf	turnOffLedRamp@i
  5426  0ECD                     l3081:	
  5427                           
  5428                           ;led.c: 152: {
  5429                           ;led.c: 153: gLedRunPara.nTargetBrt[i] = 0;
  5430  0ECD  3520               	lslf	turnOffLedRamp@i,w
  5431  0ECE  3E5B               	addlw	(low ((_gLedRunPara| (0+256)+4)))& (0+255)
  5432  0ECF  0086               	movwf	6
  5433  0ED0  3001               	movlw	1	; select bank2/3
  5434  0ED1  0087               	movwf	7
  5435  0ED2  3000               	movlw	0
  5436  0ED3  3FC0               	movwi [0]fsr1
  5437  0ED4  3FC1               	movwi [1]fsr1
  5438  0ED5  3005               	movlw	5
  5439  0ED6  0AA0               	incf	turnOffLedRamp@i,f
  5440  0ED7  0220               	subwf	turnOffLedRamp@i,w
  5441  0ED8  1803               	btfsc	3,0
  5442  0ED9  0008               	return
  5443  0EDA  2ECD               	goto	l3081
  5444  0EDB                     __end_of_turnOffLedRamp:	
  5445  0EDB                     __ptext52:	
  5446 ;; *************** function _turnOnLedRamp *****************
  5447 ;; Defined at:
  5448 ;;		line 138 in file "src/led.c"
  5449 ;; Parameters:    Size  Location     Type
  5450 ;;		None
  5451 ;; Auto vars:     Size  Location     Type
  5452 ;;  i               1    0[BANK0 ] unsigned char 
  5453 ;; Return value:  Size  Location     Type
  5454 ;;                  1    wreg      void 
  5455 ;; Registers used:
  5456 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5457 ;; Tracked objects:
  5458 ;;		On entry : 1F/2
  5459 ;;		On exit  : 1F/0
  5460 ;;		Unchanged: 0/0
  5461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5465 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;Total ram usage:        1 bytes
  5467 ;; Hardware stack levels used:    1
  5468 ;; Hardware stack levels required when called:    6
  5469 ;; This function calls:
  5470 ;;		Nothing
  5471 ;; This function is called by:
  5472 ;;		_DecodeDATA
  5473 ;;		_initLedStatus
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           
  5478                           ;psect for function _turnOnLedRamp
  5479  0EDB                     _turnOnLedRamp:	
  5480  0EDB                     l3063:	
  5481                           ;incstack = 0
  5482                           ; Regs used in _turnOnLedRamp: [wreg-fsr1h+status,2+status,0]
  5483                           
  5484                           
  5485                           ;led.c: 140: for ( unsigned char i = 0; i < 5; i++ )
  5486  0EDB  0020               	movlb	0	; select bank0
  5487  0EDC  01A0               	clrf	turnOnLedRamp@i
  5488  0EDD                     l3069:	
  5489                           
  5490                           ;led.c: 141: {
  5491                           ;led.c: 142: gLedRunPara.nTargetBrt[i] = gLedPara.mPara.manualPara.nBrt[i];
  5492  0EDD  3520               	lslf	turnOnLedRamp@i,w
  5493  0EDE  3E23               	addlw	(low ((_gLedPara| (0+256)+3)))& (0+255)
  5494  0EDF  0086               	movwf	6
  5495  0EE0  3001               	movlw	1	; select bank2/3
  5496  0EE1  0087               	movwf	7
  5497  0EE2  3520               	lslf	turnOnLedRamp@i,w
  5498  0EE3  3E5B               	addlw	(low ((_gLedRunPara| (0+256)+4)))& (0+255)
  5499  0EE4  2792  318C         	fcall	PL8	;call to abstracted procedure
  5500  0EE6  3005               	movlw	5
  5501  0EE7  0AA0               	incf	turnOnLedRamp@i,f
  5502  0EE8  0220               	subwf	turnOnLedRamp@i,w
  5503  0EE9  1803               	btfsc	3,0
  5504  0EEA  0008               	return
  5505  0EEB  2EDD               	goto	l3069
  5506  0EEC                     __end_of_turnOnLedRamp:	
  5507  0EEC                     __ptext59:	
  5508 ;; *************** function ___lwdiv *****************
  5509 ;; Defined at:
  5510 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5511 ;; Parameters:    Size  Location     Type
  5512 ;;  divisor         2    0[BANK0 ] unsigned int 
  5513 ;;  dividend        2    2[BANK0 ] unsigned int 
  5514 ;; Auto vars:     Size  Location     Type
  5515 ;;  quotient        2    4[BANK0 ] unsigned int 
  5516 ;;  counter         1    6[BANK0 ] unsigned char 
  5517 ;; Return value:  Size  Location     Type
  5518 ;;                  2    0[BANK0 ] unsigned int 
  5519 ;; Registers used:
  5520 ;;		wreg, status,2, status,0
  5521 ;; Tracked objects:
  5522 ;;		On entry : 1F/0
  5523 ;;		On exit  : 1F/0
  5524 ;;		Unchanged: 0/0
  5525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5526 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5527 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5529 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5530 ;;Total ram usage:        7 bytes
  5531 ;; Hardware stack levels used:    1
  5532 ;; Hardware stack levels required when called:    6
  5533 ;; This function calls:
  5534 ;;		Nothing
  5535 ;; This function is called by:
  5536 ;;		_DecodeDATA
  5537 ;; This function uses a non-reentrant model
  5538 ;;
  5539                           
  5540                           
  5541                           ;psect for function ___lwdiv
  5542  0EEC                     ___lwdiv:	
  5543                           
  5544                           ;incstack = 0
  5545                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5546  0EEC  01A4               	clrf	___lwdiv@quotient
  5547  0EED  01A5               	clrf	___lwdiv@quotient+1
  5548  0EEE  0820               	movf	___lwdiv@divisor,w
  5549  0EEF  0421               	iorwf	___lwdiv@divisor+1,w
  5550  0EF0  1903               	btfsc	3,2
  5551  0EF1  2F0C               	goto	l3813
  5552  0EF2  01A6               	clrf	___lwdiv@counter
  5553  0EF3                     L9:	
  5554  0EF3  0AA6               	incf	___lwdiv@counter,f
  5555  0EF4  1BA1               	btfsc	___lwdiv@divisor+1,7
  5556  0EF5  2EF9               	goto	l3801
  5557  0EF6  35A0               	lslf	___lwdiv@divisor,f
  5558  0EF7  0DA1               	rlf	___lwdiv@divisor+1,f
  5559  0EF8  2EF3               	goto	L9
  5560  0EF9                     l3801:	
  5561  0EF9  35A4               	lslf	___lwdiv@quotient,f
  5562  0EFA  0DA5               	rlf	___lwdiv@quotient+1,f
  5563  0EFB  0821               	movf	___lwdiv@divisor+1,w
  5564  0EFC  0223               	subwf	___lwdiv@dividend+1,w
  5565  0EFD  1D03               	skipz
  5566  0EFE  2F01               	goto	u3345
  5567  0EFF  0820               	movf	___lwdiv@divisor,w
  5568  0F00  0222               	subwf	___lwdiv@dividend,w
  5569  0F01                     u3345:	
  5570  0F01  1C03               	skipc
  5571  0F02  2F08               	goto	l3809
  5572  0F03  0820               	movf	___lwdiv@divisor,w
  5573  0F04  02A2               	subwf	___lwdiv@dividend,f
  5574  0F05  0821               	movf	___lwdiv@divisor+1,w
  5575  0F06  3BA3               	subwfb	___lwdiv@dividend+1,f
  5576  0F07  1424               	bsf	___lwdiv@quotient,0
  5577  0F08                     l3809:	
  5578  0F08  36A1               	lsrf	___lwdiv@divisor+1,f
  5579  0F09  0CA0               	rrf	___lwdiv@divisor,f
  5580  0F0A  0BA6               	decfsz	___lwdiv@counter,f
  5581  0F0B  2EF9               	goto	l3801
  5582  0F0C                     l3813:	
  5583  0F0C  0825               	movf	___lwdiv@quotient+1,w
  5584  0F0D  00A1               	movwf	?___lwdiv+1
  5585  0F0E  0824               	movf	___lwdiv@quotient,w
  5586  0F0F  00A0               	movwf	?___lwdiv
  5587  0F10  0008               	return
  5588  0F11                     __end_of___lwdiv:	
  5589  0F11                     __ptext57:	
  5590 ;; *************** function _bleSendData *****************
  5591 ;; Defined at:
  5592 ;;		line 114 in file "src/ble.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;  frame           2    1[BANK0 ] PTR const unsigned char 
  5595 ;;		 -> rxBuf(48), txBuf(48), 
  5596 ;;  len             1    3[BANK0 ] unsigned char 
  5597 ;; Auto vars:     Size  Location     Type
  5598 ;;		None
  5599 ;; Return value:  Size  Location     Type
  5600 ;;                  1    wreg      void 
  5601 ;; Registers used:
  5602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5603 ;; Tracked objects:
  5604 ;;		On entry : 1F/0
  5605 ;;		On exit  : 1F/2
  5606 ;;		Unchanged: 0/0
  5607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5608 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5611 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5612 ;;Total ram usage:        4 bytes
  5613 ;; Hardware stack levels used:    1
  5614 ;; Hardware stack levels required when called:    7
  5615 ;; This function calls:
  5616 ;;		_eusartSendByte
  5617 ;; This function is called by:
  5618 ;;		_bleSendDeviceData
  5619 ;;		_DecodeDATA
  5620 ;; This function uses a non-reentrant model
  5621 ;;
  5622                           
  5623                           
  5624                           ;psect for function _bleSendData
  5625  0F11                     _bleSendData:	
  5626  0F11                     l3053:	
  5627                           ;incstack = 0
  5628                           ; Regs used in _bleSendData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5629                           
  5630                           
  5631                           ;ble.c: 116: LATC1 = 0;
  5632  0F11  0022               	movlb	2	; select bank2
  5633  0F12  108E               	bcf	14,1	;volatile
  5634                           
  5635                           ;ble.c: 117: _delay((unsigned long)((800)*(16000000/4000000.0)));
  5636  0F13  3005               	movlw	5
  5637  0F14  0020               	movlb	0	; select bank0
  5638  0F15  00A4               	movwf	??_bleSendData
  5639  0F16  3026               	movlw	38
  5640  0F17                     u4447:	
  5641  0F17  0B89               	decfsz	9,f
  5642  0F18  2F17               	goto	u4447
  5643  0F19  0BA4               	decfsz	??_bleSendData,f
  5644  0F1A  2F17               	goto	u4447
  5645  0F1B  0000               	nop
  5646  0F1C                     l3061:	
  5647                           ;ble.c: 118: while ( len-- )
  5648                           
  5649  0F1C  0020               	movlb	0	; select bank0
  5650  0F1D  03A3               	decf	bleSendData@len,f
  5651  0F1E  0A23               	incf	bleSendData@len,w
  5652  0F1F  1903               	btfsc	3,2
  5653  0F20  2F2D               	goto	l85
  5654                           
  5655                           ;ble.c: 119: {
  5656                           ;ble.c: 120: eusartSendByte(*frame++);
  5657  0F21  0821               	movf	bleSendData@frame,w
  5658  0F22  0086               	movwf	6
  5659  0F23  0822               	movf	bleSendData@frame+1,w
  5660  0F24  0087               	movwf	7
  5661  0F25  0801               	movf	1,w
  5662  0F26  2733  318C         	fcall	_eusartSendByte
  5663  0F28  0020               	movlb	0	; select bank0
  5664  0F29  0AA1               	incf	bleSendData@frame,f
  5665  0F2A  1903               	skipnz
  5666  0F2B  0AA2               	incf	bleSendData@frame+1,f
  5667  0F2C  2F1C               	goto	l3061
  5668  0F2D                     l85:	
  5669  0F2D  0023               	movlb	3	; select bank3
  5670  0F2E  1C9E               	btfss	30,1	;volatile
  5671  0F2F  2F2D               	goto	l85
  5672                           
  5673                           ;ble.c: 124: LATC1 = 1;
  5674  0F30  0022               	movlb	2	; select bank2
  5675  0F31  148E               	bsf	14,1	;volatile
  5676  0F32  0008               	return
  5677  0F33                     __end_of_bleSendData:	
  5678  0F33                     __ptext58:	
  5679 ;; *************** function _eusartSendByte *****************
  5680 ;; Defined at:
  5681 ;;		line 61 in file "src/eusart.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;  byte            1    wreg     unsigned char 
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;  byte            1    0[BANK0 ] unsigned char 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      void 
  5688 ;; Registers used:
  5689 ;;		wreg
  5690 ;; Tracked objects:
  5691 ;;		On entry : 1F/0
  5692 ;;		On exit  : 1F/3
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5698 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5699 ;;Total ram usage:        1 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    6
  5702 ;; This function calls:
  5703 ;;		Nothing
  5704 ;; This function is called by:
  5705 ;;		_BLE_SendCMD
  5706 ;;		_bleSendData
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           
  5711                           ;psect for function _eusartSendByte
  5712  0F33                     _eusartSendByte:	
  5713                           
  5714                           ;incstack = 0
  5715                           ; Regs used in _eusartSendByte: [wreg]
  5716                           ;eusartSendByte@byte stored from wreg
  5717  0F33  00A0               	movwf	eusartSendByte@byte
  5718  0F34                     l715:	
  5719                           ;eusart.c: 63: while(!TXIF);
  5720                           
  5721  0F34  1E11               	btfss	17,4	;volatile
  5722  0F35  2F34               	goto	l715
  5723                           
  5724                           ;eusart.c: 64: TXREG = byte;
  5725  0F36  0820               	movf	eusartSendByte@byte,w
  5726  0F37  0023               	movlb	3	; select bank3
  5727  0F38  009A               	movwf	26	;volatile
  5728  0F39  0008               	return
  5729  0F3A                     __end_of_eusartSendByte:	
  5730  0F3A                     __ptext54:	
  5731 ;; *************** function _indicateLedBle *****************
  5732 ;; Defined at:
  5733 ;;		line 384 in file "src/led.c"
  5734 ;; Parameters:    Size  Location     Type
  5735 ;;		None
  5736 ;; Auto vars:     Size  Location     Type
  5737 ;;		None
  5738 ;; Return value:  Size  Location     Type
  5739 ;;                  1    wreg      void 
  5740 ;; Registers used:
  5741 ;;		None
  5742 ;; Tracked objects:
  5743 ;;		On entry : 1D/0
  5744 ;;		On exit  : 1F/2
  5745 ;;		Unchanged: 0/0
  5746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5751 ;;Total ram usage:        0 bytes
  5752 ;; Hardware stack levels used:    1
  5753 ;; Hardware stack levels required when called:    6
  5754 ;; This function calls:
  5755 ;;		Nothing
  5756 ;; This function is called by:
  5757 ;;		_DecodeDATA
  5758 ;;		_initLedStatus
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           
  5763                           ;psect for function _indicateLedBle
  5764  0F3A                     _indicateLedBle:	
  5765                           
  5766                           ;incstack = 0
  5767                           ; Regs used in _indicateLedBle: []
  5768                           ;led.c: 386: do { LATBbits.LATB6 = 1; } while(0);
  5769                           
  5770                           ;led.c: 387: do { LATAbits.LATA1 = 0; } while(0);
  5771                           
  5772                           ;led.c: 388: do { LATBbits.LATB7 = 1; } while(0);
  5773  0F3A  3187  2F42         	ljmp	PL92	;call to abstracted procedure
  5774  0F3C                     __end_of_indicateLedBle:	
  5775  0F3C                     __ptext34:	
  5776 ;; *************** function _SYSTEM_Initialize *****************
  5777 ;; Defined at:
  5778 ;;		line 58 in file "src/comman.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;		None
  5783 ;; Return value:  Size  Location     Type
  5784 ;;                  1    wreg      void 
  5785 ;; Registers used:
  5786 ;;		wreg, status,2, status,0, pclath, cstack
  5787 ;; Tracked objects:
  5788 ;;		On entry : B1F/0
  5789 ;;		On exit  : 1F/1
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;Total ram usage:        0 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:    7
  5799 ;; This function calls:
  5800 ;;		_EUSART_Initialize
  5801 ;;		_OSCILLATOR_Initialize
  5802 ;;		_PIN_MANAGER_Initialize
  5803 ;;		_PWM1_Initialize
  5804 ;;		_PWM2_Initialize
  5805 ;;		_PWM3_Initialize
  5806 ;;		_PWM4_Initialize
  5807 ;;		_PWM5_Initialize
  5808 ;;		_TMR0_Initialize
  5809 ;;		_TMR2_Initialize
  5810 ;; This function is called by:
  5811 ;;		_main
  5812 ;; This function uses a non-reentrant model
  5813 ;;
  5814                           
  5815                           
  5816                           ;psect for function _SYSTEM_Initialize
  5817  0F3C                     _SYSTEM_Initialize:	
  5818                           
  5819                           ;comman.c: 60: PIN_MANAGER_Initialize( );
  5820                           
  5821                           ;incstack = 0
  5822                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5823  0F3C  3195  25DB  318C   	fcall	_PIN_MANAGER_Initialize
  5824                           
  5825                           ;comman.c: 61: OSCILLATOR_Initialize( );
  5826  0F3F  2750  318C         	fcall	_OSCILLATOR_Initialize
  5827                           
  5828                           ;comman.c: 62: PWM1_Initialize( );
  5829  0F41  275A  318C         	fcall	_PWM1_Initialize
  5830                           
  5831                           ;comman.c: 63: PWM2_Initialize( );
  5832  0F43  2764  318C         	fcall	_PWM2_Initialize
  5833                           
  5834                           ;comman.c: 64: PWM3_Initialize( );
  5835  0F45  276D  318C         	fcall	_PWM3_Initialize
  5836                           
  5837                           ;comman.c: 65: PWM4_Initialize( );
  5838  0F47  2778  318C         	fcall	_PWM4_Initialize
  5839                           
  5840                           ;comman.c: 66: PWM5_Initialize();
  5841  0F49  27CB  318C         	fcall	_PWM5_Initialize
  5842                           
  5843                           ;comman.c: 67: TMR2_Initialize( );
  5844  0F4B  27D5               	fcall	_TMR2_Initialize
  5845                           
  5846                           ;comman.c: 68: TMR0_Initialize( );
  5847  0F4C  3195  25B9  318C   	fcall	_TMR0_Initialize
  5848                           
  5849                           ;comman.c: 69: EUSART_Initialize( );
  5850  0F4F  2FF0               	ljmp	l3435
  5851  0F50                     __end_of_SYSTEM_Initialize:	
  5852  0F50                     __ptext43:	
  5853 ;; *************** function _OSCILLATOR_Initialize *****************
  5854 ;; Defined at:
  5855 ;;		line 43 in file "src/comman.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;		None
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;		None
  5860 ;; Return value:  Size  Location     Type
  5861 ;;                  1    wreg      void 
  5862 ;; Registers used:
  5863 ;;		wreg, status,2
  5864 ;; Tracked objects:
  5865 ;;		On entry : 0/0
  5866 ;;		On exit  : 1F/12
  5867 ;;		Unchanged: 0/0
  5868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5873 ;;Total ram usage:        0 bytes
  5874 ;; Hardware stack levels used:    1
  5875 ;; Hardware stack levels required when called:    6
  5876 ;; This function calls:
  5877 ;;		Nothing
  5878 ;; This function is called by:
  5879 ;;		_SYSTEM_Initialize
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           
  5884                           ;psect for function _OSCILLATOR_Initialize
  5885  0F50                     _OSCILLATOR_Initialize:	
  5886                           
  5887                           ;comman.c: 46: OSCCON1 = 0x60;
  5888                           
  5889                           ;incstack = 0
  5890                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5891  0F50  3060               	movlw	96
  5892  0F51  0032               	movlb	18	; select bank18
  5893  0F52  0099               	movwf	25	;volatile
  5894                           
  5895                           ;comman.c: 48: OSCCON3 = 0x00;
  5896  0F53  019B               	clrf	27	;volatile
  5897                           
  5898                           ;comman.c: 50: OSCEN = 0x48;
  5899  0F54  3048               	movlw	72
  5900  0F55  009D               	movwf	29	;volatile
  5901                           
  5902                           ;comman.c: 52: OSCFRQ = 0x06;
  5903  0F56  3006               	movlw	6
  5904  0F57  009F               	movwf	31	;volatile
  5905                           
  5906                           ;comman.c: 54: OSCTUNE = 0x00;
  5907  0F58  019E               	clrf	30	;volatile
  5908  0F59  0008               	return
  5909  0F5A                     __end_of_OSCILLATOR_Initialize:	
  5910  0F5A                     __ptext41:	
  5911 ;; *************** function _PWM1_Initialize *****************
  5912 ;; Defined at:
  5913 ;;		line 4 in file "src/pwm.c"
  5914 ;; Parameters:    Size  Location     Type
  5915 ;;		None
  5916 ;; Auto vars:     Size  Location     Type
  5917 ;;		None
  5918 ;; Return value:  Size  Location     Type
  5919 ;;                  1    wreg      void 
  5920 ;; Registers used:
  5921 ;;		wreg, status,2, status,0
  5922 ;; Tracked objects:
  5923 ;;		On entry : 1F/12
  5924 ;;		On exit  : 1F/5
  5925 ;;		Unchanged: 0/0
  5926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5931 ;;Total ram usage:        0 bytes
  5932 ;; Hardware stack levels used:    1
  5933 ;; Hardware stack levels required when called:    6
  5934 ;; This function calls:
  5935 ;;		Nothing
  5936 ;; This function is called by:
  5937 ;;		_SYSTEM_Initialize
  5938 ;; This function uses a non-reentrant model
  5939 ;;
  5940                           
  5941                           
  5942                           ;psect for function _PWM1_Initialize
  5943  0F5A                     _PWM1_Initialize:	
  5944                           
  5945                           ;pwm.c: 9: CCP1CON = 0x8F;
  5946                           
  5947                           ;incstack = 0
  5948                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
  5949  0F5A  308F               	movlw	143
  5950  0F5B  0025               	movlb	5	; select bank5
  5951  0F5C  0093               	movwf	19	;volatile
  5952                           
  5953                           ;pwm.c: 12: CCPR1H = 0x00;
  5954  0F5D  0192               	clrf	18	;volatile
  5955                           
  5956                           ;pwm.c: 15: CCPR1L = 0x00;
  5957  0F5E  0191               	clrf	17	;volatile
  5958                           
  5959                           ;pwm.c: 18: CCPTMRSbits.C1TSEL = 0x1;
  5960  0F5F  081F               	movf	31,w	;volatile
  5961  0F60  39FC               	andlw	-4
  5962  0F61  3801               	iorlw	1
  5963  0F62  009F               	movwf	31	;volatile
  5964  0F63  0008               	return
  5965  0F64                     __end_of_PWM1_Initialize:	
  5966  0F64                     __ptext40:	
  5967 ;; *************** function _PWM2_Initialize *****************
  5968 ;; Defined at:
  5969 ;;		line 39 in file "src/pwm.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;		None
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;		None
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  1    wreg      void 
  5976 ;; Registers used:
  5977 ;;		wreg, status,2, status,0
  5978 ;; Tracked objects:
  5979 ;;		On entry : 1F/5
  5980 ;;		On exit  : 1F/5
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5987 ;;Total ram usage:        0 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    6
  5990 ;; This function calls:
  5991 ;;		Nothing
  5992 ;; This function is called by:
  5993 ;;		_SYSTEM_Initialize
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           
  5998                           ;psect for function _PWM2_Initialize
  5999  0F64                     _PWM2_Initialize:	
  6000                           
  6001                           ;pwm.c: 44: CCP2CON = 0x8F;
  6002                           
  6003                           ;incstack = 0
  6004                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
  6005  0F64  308F               	movlw	143
  6006  0F65  0097               	movwf	23	;volatile
  6007                           
  6008                           ;pwm.c: 47: CCPR2H = 0x00;
  6009  0F66  0196               	clrf	22	;volatile
  6010                           
  6011                           ;pwm.c: 50: CCPR2L = 0x00;
  6012  0F67  0195               	clrf	21	;volatile
  6013                           
  6014                           ;pwm.c: 53: CCPTMRSbits.C2TSEL = 0x1;
  6015  0F68  081F               	movf	31,w	;volatile
  6016  0F69  39F3               	andlw	-13
  6017  0F6A  3804               	iorlw	4
  6018  0F6B  009F               	movwf	31	;volatile
  6019  0F6C  0008               	return
  6020  0F6D                     __end_of_PWM2_Initialize:	
  6021  0F6D                     __ptext39:	
  6022 ;; *************** function _PWM3_Initialize *****************
  6023 ;; Defined at:
  6024 ;;		line 74 in file "src/pwm.c"
  6025 ;; Parameters:    Size  Location     Type
  6026 ;;		None
  6027 ;; Auto vars:     Size  Location     Type
  6028 ;;		None
  6029 ;; Return value:  Size  Location     Type
  6030 ;;                  1    wreg      void 
  6031 ;; Registers used:
  6032 ;;		wreg, status,2, status,0
  6033 ;; Tracked objects:
  6034 ;;		On entry : 1F/5
  6035 ;;		On exit  : 1F/5
  6036 ;;		Unchanged: 0/0
  6037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6042 ;;Total ram usage:        0 bytes
  6043 ;; Hardware stack levels used:    1
  6044 ;; Hardware stack levels required when called:    6
  6045 ;; This function calls:
  6046 ;;		Nothing
  6047 ;; This function is called by:
  6048 ;;		_SYSTEM_Initialize
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           
  6053                           ;psect for function _PWM3_Initialize
  6054  0F6D                     _PWM3_Initialize:	
  6055                           
  6056                           ;pwm.c: 79: CCP3CON = 0x8F;
  6057                           
  6058                           ;incstack = 0
  6059                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  6060  0F6D  308F               	movlw	143
  6061  0F6E  0026               	movlb	6	; select bank6
  6062  0F6F  0093               	movwf	19	;volatile
  6063                           
  6064                           ;pwm.c: 82: CCPR3H = 0x00;
  6065  0F70  0192               	clrf	18	;volatile
  6066                           
  6067                           ;pwm.c: 85: CCPR3L = 0x00;
  6068  0F71  0191               	clrf	17	;volatile
  6069                           
  6070                           ;pwm.c: 88: CCPTMRSbits.C3TSEL = 0x1;
  6071  0F72  0025               	movlb	5	; select bank5
  6072  0F73  081F               	movf	31,w	;volatile
  6073  0F74  39CF               	andlw	-49
  6074  0F75  3810               	iorlw	16
  6075  0F76  009F               	movwf	31	;volatile
  6076  0F77  0008               	return
  6077  0F78                     __end_of_PWM3_Initialize:	
  6078  0F78                     __ptext38:	
  6079 ;; *************** function _PWM4_Initialize *****************
  6080 ;; Defined at:
  6081 ;;		line 109 in file "src/pwm.c"
  6082 ;; Parameters:    Size  Location     Type
  6083 ;;		None
  6084 ;; Auto vars:     Size  Location     Type
  6085 ;;		None
  6086 ;; Return value:  Size  Location     Type
  6087 ;;                  1    wreg      void 
  6088 ;; Registers used:
  6089 ;;		wreg, status,2, status,0
  6090 ;; Tracked objects:
  6091 ;;		On entry : 1F/5
  6092 ;;		On exit  : 1F/5
  6093 ;;		Unchanged: 0/0
  6094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6099 ;;Total ram usage:        0 bytes
  6100 ;; Hardware stack levels used:    1
  6101 ;; Hardware stack levels required when called:    6
  6102 ;; This function calls:
  6103 ;;		Nothing
  6104 ;; This function is called by:
  6105 ;;		_SYSTEM_Initialize
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           
  6110                           ;psect for function _PWM4_Initialize
  6111  0F78                     _PWM4_Initialize:	
  6112                           
  6113                           ;pwm.c: 114: CCP4CON = 0x8F;
  6114                           
  6115                           ;incstack = 0
  6116                           ; Regs used in _PWM4_Initialize: [wreg+status,2+status,0]
  6117  0F78  308F               	movlw	143
  6118  0F79  0026               	movlb	6	; select bank6
  6119  0F7A  0097               	movwf	23	;volatile
  6120                           
  6121                           ;pwm.c: 117: CCPR4H = 0x00;
  6122  0F7B  0196               	clrf	22	;volatile
  6123                           
  6124                           ;pwm.c: 120: CCPR4L = 0x00;
  6125  0F7C  0195               	clrf	21	;volatile
  6126                           
  6127                           ;pwm.c: 123: CCPTMRSbits.C4TSEL = 0x1;
  6128  0F7D  0025               	movlb	5	; select bank5
  6129  0F7E  081F               	movf	31,w	;volatile
  6130  0F7F  393F               	andlw	-193
  6131  0F80  3840               	iorlw	64
  6132  0F81  009F               	movwf	31	;volatile
  6133  0F82  0008               	return
  6134  0F83                     __end_of_PWM4_Initialize:	
  6135  0F83                     __ptext33:	
  6136 ;; *************** function _TMR0_StartTimer *****************
  6137 ;; Defined at:
  6138 ;;		line 30 in file "src/tmr.c"
  6139 ;; Parameters:    Size  Location     Type
  6140 ;;		None
  6141 ;; Auto vars:     Size  Location     Type
  6142 ;;		None
  6143 ;; Return value:  Size  Location     Type
  6144 ;;                  1    wreg      void 
  6145 ;; Registers used:
  6146 ;;		None
  6147 ;; Tracked objects:
  6148 ;;		On entry : 1F/1
  6149 ;;		On exit  : 1F/0
  6150 ;;		Unchanged: 0/0
  6151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6156 ;;Total ram usage:        0 bytes
  6157 ;; Hardware stack levels used:    1
  6158 ;; Hardware stack levels required when called:    6
  6159 ;; This function calls:
  6160 ;;		Nothing
  6161 ;; This function is called by:
  6162 ;;		_main
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           
  6167                           ;psect for function _TMR0_StartTimer
  6168  0F83                     _TMR0_StartTimer:	
  6169                           
  6170                           ;tmr.c: 33: T0CON0bits.T0EN = 1;
  6171                           
  6172                           ;incstack = 0
  6173                           ; Regs used in _TMR0_StartTimer: []
  6174  0F83  0020               	movlb	0	; select bank0
  6175  0F84  1797               	bsf	23,7	;volatile
  6176  0F85  0008               	return
  6177  0F86                     __end_of_TMR0_StartTimer:	
  6178  0F86                     __ptext32:	
  6179 ;; *************** function _TMR2_StartTimer *****************
  6180 ;; Defined at:
  6181 ;;		line 57 in file "src/tmr.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;		None
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;		None
  6186 ;; Return value:  Size  Location     Type
  6187 ;;                  1    wreg      void 
  6188 ;; Registers used:
  6189 ;;		None
  6190 ;; Tracked objects:
  6191 ;;		On entry : 1F/0
  6192 ;;		On exit  : 1F/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6199 ;;Total ram usage:        0 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    6
  6202 ;; This function calls:
  6203 ;;		Nothing
  6204 ;; This function is called by:
  6205 ;;		_main
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           
  6210                           ;psect for function _TMR2_StartTimer
  6211  0F86                     _TMR2_StartTimer:	
  6212                           
  6213                           ;tmr.c: 60: T2CONbits.TMR2ON = 1;
  6214                           
  6215                           ;incstack = 0
  6216                           ; Regs used in _TMR2_StartTimer: []
  6217  0F86  151F               	bsf	31,2	;volatile
  6218  0F87  0008               	return
  6219  0F88                     __end_of_TMR2_StartTimer:	
  6220  0F88                     __ptext8:	
  6221 ;; *************** function _initLed *****************
  6222 ;; Defined at:
  6223 ;;		line 309 in file "src/led.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;		None
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;		None
  6228 ;; Return value:  Size  Location     Type
  6229 ;;                  1    wreg      void 
  6230 ;; Registers used:
  6231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6232 ;; Tracked objects:
  6233 ;;		On entry : 1F/2
  6234 ;;		On exit  : 1D/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6241 ;;Total ram usage:        0 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; Hardware stack levels required when called:   11
  6244 ;; This function calls:
  6245 ;;		_initLedPara
  6246 ;;		_initLedStatus
  6247 ;; This function is called by:
  6248 ;;		_main
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           
  6253                           ;psect for function _initLed
  6254  0F88                     _initLed:	
  6255                           
  6256                           ;led.c: 311: initLedPara();
  6257                           
  6258                           ;incstack = 0
  6259                           ; Regs used in _initLed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6260  0F88  3188  2041         	fcall	_initLedPara
  6261                           
  6262                           ;led.c: 312: initLedStatus();
  6263  0F8A  3184  2C6A         	ljmp	l3687
  6264  0F8C                     __end_of_initLed:	
  6265  0F8C                     PL6:	
  6266  0F8C  30A0               	movlw	low _rxBuf
  6267  0F8D  0020               	movlb	0	; select bank0
  6268  0F8E  00A0               	movwf	getCRC@pbuf
  6269  0F8F  3001               	movlw	high _rxBuf
  6270  0F90  00A1               	movwf	getCRC@pbuf+1
  6271  0F91  0008               	return
  6272  0F92                     __end_ofPL6:	
  6273  0F92                     PL8:	
  6274  0F92  0084               	movwf	4
  6275  0F93  3001               	movlw	1	; select bank2/3
  6276  0F94  0085               	movwf	5
  6277  0F95  3F40               	moviw [0]fsr1
  6278  0F96  3F80               	movwi [0]fsr0
  6279  0F97  3F41               	moviw [1]fsr1
  6280  0F98  3F81               	movwi [1]fsr0
  6281  0F99  0008               	return
  6282  0F9A                     __end_ofPL8:	
  6283  0F9A                     PL14:	
  6284  0F9A  01AB               	clrf	??_DecodeDATA+1
  6285  0F9B  0023               	movlb	3	; select bank3
  6286  0F9C  0620               	xorwf	_rxBuf^(0+384),w
  6287  0F9D  0020               	movlb	0	; select bank0
  6288  0F9E  00AC               	movwf	??_DecodeDATA+2
  6289  0F9F  082B               	movf	??_DecodeDATA+1,w
  6290  0FA0  00AD               	movwf	??_DecodeDATA+3
  6291  0FA1  042C               	iorwf	??_DecodeDATA+2,w
  6292  0FA2  0008               	return
  6293  0FA3                     __end_ofPL14:	
  6294  0FA3                     PL30:	
  6295  0FA3  0086               	movwf	6
  6296  0FA4  3001               	movlw	1	; select bank2/3
  6297  0FA5  0087               	movwf	7
  6298  0FA6  3F40               	moviw [0]fsr1
  6299  0FA7  00AA               	movwf	??_DecodeDATA
  6300  0FA8  3F41               	moviw [1]fsr1
  6301  0FA9  00AB               	movwf	??_DecodeDATA+1
  6302  0FAA  0023               	movlb	3	; select bank3
  6303  0FAB  0823               	movf	(_rxBuf^(0+384)+3),w
  6304  0FAC  0020               	movlb	0	; select bank0
  6305  0FAD  0008               	return
  6306  0FAE                     __end_ofPL30:	
  6307  0FAE                     PL62:	
  6308  0FAE  353A               	lslf	DecodeDATA@idx_303,w
  6309  0FAF  3E23               	addlw	(low ((_gLedPara| (0+256)+3)))& (0+255)
  6310  0FB0  0086               	movwf	6
  6311  0FB1  3001               	movlw	1	; select bank2/3
  6312  0FB2  0087               	movwf	7
  6313  0FB3  0008               	return
  6314  0FB4                     __end_ofPL62:	
  6315  0FB4                     PL64:	
  6316  0FB4  3EA2               	addlw	(low ((_rxBuf| (0+256)+2)))& (0+255)
  6317  0FB5  0084               	movwf	4
  6318  0FB6  3001               	movlw	1	; select bank3/4
  6319  0FB7  0085               	movwf	5
  6320  0FB8  0800               	movf	0,w
  6321  0FB9  0008               	return
  6322  0FBA                     __end_ofPL64:	
  6323  0FBA                     PL68:	
  6324  0FBA  30E8               	movlw	232
  6325  0FBB  00AA               	movwf	??_DecodeDATA
  6326  0FBC  3003               	movlw	3
  6327  0FBD  00AB               	movwf	??_DecodeDATA+1
  6328  0FBE  3539               	lslf	DecodeDATA@idx_302,w
  6329  0FBF  0008               	return
  6330  0FC0                     __end_ofPL68:	
  6331  0FC0                     PL76:	
  6332  0FC0  0086               	movwf	6
  6333  0FC1  0834               	movf	DecodeDATA@val,w
  6334  0FC2  3FC0               	movwi [0]fsr1
  6335  0FC3  0835               	movf	DecodeDATA@val+1,w
  6336  0FC4  3FC1               	movwi [1]fsr1
  6337  0FC5  0008               	return
  6338  0FC6                     __end_ofPL76:	
  6339  0FC6                     PL78:	
  6340  0FC6  0022               	movlb	2	; select bank2
  6341  0FC7  1557               	bsf	_gLedRunPara^(0+256),2	;volatile
  6342  0FC8  3003               	movlw	3
  6343  0FC9  00DA               	movwf	(_gLedRunPara^(0+256)+3)	;volatile
  6344  0FCA  0008               	return
  6345  0FCB                     __end_ofPL78:	
  6346  0FCB                     __ptext37:	
  6347 ;; *************** function _PWM5_Initialize *****************
  6348 ;; Defined at:
  6349 ;;		line 144 in file "src/pwm.c"
  6350 ;; Parameters:    Size  Location     Type
  6351 ;;		None
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;		None
  6354 ;; Return value:  Size  Location     Type
  6355 ;;                  1    wreg      void 
  6356 ;; Registers used:
  6357 ;;		wreg, status,2, status,0
  6358 ;; Tracked objects:
  6359 ;;		On entry : 1F/5
  6360 ;;		On exit  : 1F/C
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6367 ;;Total ram usage:        0 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:    6
  6370 ;; This function calls:
  6371 ;;		Nothing
  6372 ;; This function is called by:
  6373 ;;		_SYSTEM_Initialize
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           
  6378                           ;psect for function _PWM5_Initialize
  6379  0FCB                     _PWM5_Initialize:	
  6380                           
  6381                           ;pwm.c: 146: PWM5DCH = 0;
  6382                           
  6383                           ;incstack = 0
  6384                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
  6385  0FCB  002C               	movlb	12	; select bank12
  6386  0FCC  0198               	clrf	24	;volatile
  6387                           
  6388                           ;pwm.c: 147: PWM5DCL = 0;
  6389  0FCD  0197               	clrf	23	;volatile
  6390                           
  6391                           ;pwm.c: 148: PWMTMRSbits.P5TSEL = 0X01;
  6392  0FCE  081F               	movf	31,w	;volatile
  6393  0FCF  39FC               	andlw	-4
  6394  0FD0  3801               	iorlw	1
  6395  0FD1  009F               	movwf	31	;volatile
  6396                           
  6397                           ;pwm.c: 149: PWM5CON = 0X80;
  6398  0FD2  3080               	movlw	128
  6399  0FD3  0099               	movwf	25	;volatile
  6400  0FD4  0008               	return
  6401  0FD5                     __end_of_PWM5_Initialize:	
  6402  0FD5                     __ptext35:	
  6403 ;; *************** function _TMR2_Initialize *****************
  6404 ;; Defined at:
  6405 ;;		line 37 in file "src/tmr.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;		None
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;		None
  6410 ;; Return value:  Size  Location     Type
  6411 ;;                  1    wreg      void 
  6412 ;; Registers used:
  6413 ;;		wreg, status,2
  6414 ;; Tracked objects:
  6415 ;;		On entry : 1F/C
  6416 ;;		On exit  : 1F/1
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;Total ram usage:        0 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:    6
  6426 ;; This function calls:
  6427 ;;		Nothing
  6428 ;; This function is called by:
  6429 ;;		_SYSTEM_Initialize
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           
  6434                           ;psect for function _TMR2_Initialize
  6435  0FD5                     _TMR2_Initialize:	
  6436                           
  6437                           ;tmr.c: 42: T2CON = 0x78;
  6438                           
  6439                           ;incstack = 0
  6440                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  6441  0FD5  3078               	movlw	120
  6442  0FD6  0020               	movlb	0	; select bank0
  6443  0FD7  009F               	movwf	31	;volatile
  6444                           
  6445                           ;tmr.c: 45: PR2 = 0xF9;
  6446  0FD8  30F9               	movlw	249
  6447  0FD9  009E               	movwf	30	;volatile
  6448                           
  6449                           ;tmr.c: 48: TMR2 = 0x00;
  6450  0FDA  019D               	clrf	29	;volatile
  6451                           
  6452                           ;tmr.c: 51: PIR1bits.TMR2IF = 0;
  6453  0FDB  1091               	bcf	17,1	;volatile
  6454                           
  6455                           ;tmr.c: 54: PIE1bits.TMR2IE = 1;
  6456  0FDC  0021               	movlb	1	; select bank1
  6457  0FDD  1491               	bsf	17,1	;volatile
  6458  0FDE  0008               	return
  6459  0FDF                     __end_of_TMR2_Initialize:	
  6460  0FDF                     __ptext7:	
  6461 ;; *************** function _initRTC *****************
  6462 ;; Defined at:
  6463 ;;		line 38 in file "src/rtc.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;		None
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;		None
  6468 ;; Return value:  Size  Location     Type
  6469 ;;                  1    wreg      void 
  6470 ;; Registers used:
  6471 ;;		wreg, status,2
  6472 ;; Tracked objects:
  6473 ;;		On entry : 1D/2
  6474 ;;		On exit  : 1F/1
  6475 ;;		Unchanged: 0/0
  6476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;Total ram usage:        0 bytes
  6482 ;; Hardware stack levels used:    1
  6483 ;; Hardware stack levels required when called:    6
  6484 ;; This function calls:
  6485 ;;		Nothing
  6486 ;; This function is called by:
  6487 ;;		_main
  6488 ;; This function uses a non-reentrant model
  6489 ;;
  6490                           
  6491                           
  6492                           ;psect for function _initRTC
  6493  0FDF                     _initRTC:	
  6494                           
  6495                           ;rtc.c: 40: gCurrentTime.datetime.second = 0;
  6496                           
  6497                           ;incstack = 0
  6498                           ; Regs used in _initRTC: [wreg+status,2]
  6499  0FDF  0021               	movlb	1	; select bank1
  6500  0FE0  01DE               	clrf	(_gCurrentTime^(0+128)+6)	;volatile
  6501                           
  6502                           ;rtc.c: 41: gCurrentTime.datetime.minute = 0;
  6503  0FE1  01DD               	clrf	(_gCurrentTime^(0+128)+5)	;volatile
  6504                           
  6505                           ;rtc.c: 42: gCurrentTime.datetime.hour = 0;
  6506  0FE2  01DC               	clrf	(_gCurrentTime^(0+128)+4)	;volatile
  6507                           
  6508                           ;rtc.c: 43: gCurrentTime.datetime.wk = 0;
  6509  0FE3  01DB               	clrf	(_gCurrentTime^(0+128)+3)	;volatile
  6510                           
  6511                           ;rtc.c: 44: gCurrentTime.datetime.day = 1;
  6512  0FE4  3001               	movlw	1
  6513  0FE5  00DA               	movwf	(_gCurrentTime^(0+128)+2)	;volatile
  6514                           
  6515                           ;rtc.c: 45: gCurrentTime.datetime.month = 1;
  6516  0FE6  00D9               	movwf	(_gCurrentTime^(0+128)+1)	;volatile
  6517                           
  6518                           ;rtc.c: 46: gCurrentTime.datetime.year = 0;
  6519  0FE7  01D8               	clrf	_gCurrentTime^(0+128)	;volatile
  6520  0FE8  0008               	return
  6521  0FE9                     __end_of_initRTC:	
  6522  0FE9                     __ptext6:	
  6523 ;; *************** function _preview *****************
  6524 ;; Defined at:
  6525 ;;		line 343 in file "src/led.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;		None
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;		None
  6530 ;; Return value:  Size  Location     Type
  6531 ;;                  1    wreg      void 
  6532 ;; Registers used:
  6533 ;;		wreg, status,2, status,0
  6534 ;; Tracked objects:
  6535 ;;		On entry : 1F/2
  6536 ;;		On exit  : 1F/2
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6543 ;;Total ram usage:        0 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; Hardware stack levels required when called:    6
  6546 ;; This function calls:
  6547 ;;		Nothing
  6548 ;; This function is called by:
  6549 ;;		_main
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553                           
  6554                           ;psect for function _preview
  6555  0FE9                     _preview:	
  6556                           
  6557                           ;led.c: 345: if ( gLedRunPara.nPrevCount > 0 )
  6558                           
  6559                           ;incstack = 0
  6560                           ; Regs used in _preview: [wreg+status,2+status,0]
  6561  0FE9  0859               	movf	(_gLedRunPara^(0+256)+2),w	;volatile
  6562  0FEA  1D03               	btfss	3,2
  6563                           
  6564                           ;led.c: 346: {
  6565                           ;led.c: 347: gLedRunPara.nPrevCount--;
  6566  0FEB  03D9               	decf	(_gLedRunPara^(0+256)+2),f	;volatile
  6567                           
  6568                           ;led.c: 348: }
  6569                           ;led.c: 349: if ( gLedRunPara.nPrevCount == 0 )
  6570  0FEC  0859               	movf	(_gLedRunPara^(0+256)+2),w	;volatile
  6571  0FED  1903               	btfsc	3,2
  6572                           
  6573                           ;led.c: 350: {
  6574                           ;led.c: 351: gLedRunPara.fPrev = 0;
  6575  0FEE  11D7               	bcf	_gLedRunPara^(0+256),3	;volatile
  6576  0FEF  0008               	return
  6577  0FF0                     __end_of_preview:	
  6578  0FF0                     __ptext44:	
  6579 ;; *************** function _EUSART_Initialize *****************
  6580 ;; Defined at:
  6581 ;;		line 8 in file "src/eusart.c"
  6582 ;; Parameters:    Size  Location     Type
  6583 ;;		None
  6584 ;; Auto vars:     Size  Location     Type
  6585 ;;		None
  6586 ;; Return value:  Size  Location     Type
  6587 ;;                  1    wreg      void 
  6588 ;; Registers used:
  6589 ;;		wreg
  6590 ;; Tracked objects:
  6591 ;;		On entry : 1F/1
  6592 ;;		On exit  : 1F/1
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;Total ram usage:        0 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:    6
  6602 ;; This function calls:
  6603 ;;		Nothing
  6604 ;; This function is called by:
  6605 ;;		_SYSTEM_Initialize
  6606 ;; This function uses a non-reentrant model
  6607 ;;
  6608                           
  6609                           
  6610                           ;psect for function _EUSART_Initialize
  6611  0FF0                     _EUSART_Initialize:	
  6612  0FF0                     l3435:	
  6613                           ;incstack = 0
  6614                           ; Regs used in _EUSART_Initialize: [wreg]
  6615                           
  6616                           
  6617                           ;eusart.c: 11: PIE1bits.RCIE = 0;
  6618  0FF0  1291               	bcf	17,5	;volatile
  6619                           
  6620                           ;eusart.c: 12: PIE1bits.TXIE = 0;
  6621  0FF1  1211               	bcf	17,4	;volatile
  6622                           
  6623                           ;eusart.c: 17: BAUD1CON = 0x08;
  6624  0FF2  3008               	movlw	8
  6625  0FF3  0023               	movlb	3	; select bank3
  6626  0FF4  009F               	movwf	31	;volatile
  6627                           
  6628                           ;eusart.c: 20: RC1STA = 0x90;
  6629  0FF5  3090               	movlw	144
  6630  0FF6  009D               	movwf	29	;volatile
  6631                           
  6632                           ;eusart.c: 23: TX1STA = 0x24;
  6633  0FF7  3024               	movlw	36
  6634  0FF8  009E               	movwf	30	;volatile
  6635                           
  6636                           ;eusart.c: 26: SP1BRGL = 0xA0;
  6637  0FF9  30A0               	movlw	160
  6638  0FFA  009B               	movwf	27	;volatile
  6639                           
  6640                           ;eusart.c: 29: SP1BRGH = 0x01;
  6641  0FFB  3001               	movlw	1
  6642  0FFC  009C               	movwf	28	;volatile
  6643                           
  6644                           ;eusart.c: 32: PIE1bits.RCIE = 1;
  6645  0FFD  0021               	movlb	1	; select bank1
  6646  0FFE  1691               	bsf	17,5	;volatile
  6647  0FFF  0008               	return
  6648  1000                     __end_of_EUSART_Initialize:	
  6649                           
  6650                           	psect	bssCOMMON
  6651  007B                     __pbssCOMMON:	
  6652  007B                     keyScan@rptCount:	
  6653  007B                     	ds	1
  6654  007C                     _keyValue:	
  6655  007C                     	ds	1
  6656  007D                     keyScan@lastKey:	
  6657  007D                     	ds	1
  6658                           
  6659                           	psect	bssBANK1
  6660  00D8                     __pbssBANK1:	
  6661  00D8                     _gCurrentTime:	
  6662  00D8                     	ds	7
  6663  00DF                     _nRcvIdx:	
  6664  00DF                     	ds	1
  6665  00E0                     findDeviceFlash@tog:	
  6666  00E0                     	ds	1
  6667  00E1                     ReadKey@Cont:	
  6668  00E1                     	ds	1
  6669  00E2                     ReadKey@Trg:	
  6670  00E2                     	ds	1
  6671  00E3                     TMR2_UserInterruptHandler@cnt:	
  6672  00E3                     	ds	1
  6673                           
  6674                           	psect	dataBANK1
  6675  00E4                     __pdataBANK1:	
  6676  00E4                     BLE_SendCMD@F7924:	
  6677  00E4                     	ds	7
  6678                           
  6679                           	psect	bssBANK2
  6680  0120                     __pbssBANK2:	
  6681  0120                     _gLedPara:	
  6682  0120                     	ds	55
  6683  0157                     _gLedRunPara:	
  6684  0157                     	ds	25
  6685                           
  6686                           	psect	bssBANK3
  6687  01A0                     __pbssBANK3:	
  6688  01A0                     _rxBuf:	
  6689  01A0                     	ds	48
  6690                           
  6691                           	psect	dataBANK3
  6692  01D0                     __pdataBANK3:	
  6693  01D0                     checkDevID@F7931:	
  6694  01D0                     	ds	17
  6695  01E1                     _MONTH_DAY:	
  6696  01E1                     	ds	12
  6697                           
  6698                           	psect	bssBANK4
  6699  0220                     __pbssBANK4:	
  6700  0220                     _txBuf:	
  6701  0220                     	ds	48
  6702                           
  6703                           	psect	inittext
  6704  15AC                     init_ram:	
  6705  15AC  00FE               	movwf	126
  6706  15AD                     initloop:	
  6707  15AD  0012               	moviw fsr0++
  6708  15AE  001E               	movwi fsr1++
  6709  15AF  0BFE               	decfsz	126,f
  6710  15B0  2DAD               	goto	initloop
  6711  15B1  3400               	retlw	0
  6712                           
  6713                           	psect	clrtext
  6714  15A6                     clear_ram0:	
  6715                           ;	Called with FSR0 containing the base address, and
  6716                           ;	WREG with the size to clear
  6717                           
  6718  15A6  0064               	clrwdt	;clear the watchdog before getting into this loop
  6719  15A7                     clrloop0:	
  6720  15A7  0180               	clrf	0	;clear RAM location pointed to by FSR
  6721  15A8  3101               	addfsr 0,1
  6722  15A9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  6723  15AA  2DA7               	goto	clrloop0	;have we reached the end yet?
  6724  15AB  3400               	retlw	0	;all done for this memory range, return
  6725                           
  6726                           	psect	cstackBANK1
  6727  00A0                     __pcstackBANK1:	
  6728  00A0                     readLedPara@addr:	
  6729                           
  6730                           ; 1 bytes @ 0x0
  6731  00A0                     	ds	1
  6732  00A1                     readLedPara@para:	
  6733                           
  6734                           ; 55 bytes @ 0x1
  6735  00A1                     	ds	55
  6736                           
  6737                           	psect	cstackCOMMON
  6738  0070                     __pcstackCOMMON:	
  6739  0070                     ?_eusartSendByte:	
  6740  0070                     ?_turnOnLedRamp:	
  6741                           ; 1 bytes @ 0x0
  6742                           
  6743  0070                     ?_turnOffLedRamp:	
  6744                           ; 1 bytes @ 0x0
  6745                           
  6746  0070                     ?_updatePWM:	
  6747                           ; 1 bytes @ 0x0
  6748                           
  6749  0070                     ?_indicateLedBle:	
  6750                           ; 1 bytes @ 0x0
  6751                           
  6752  0070                     ?_PIN_MANAGER_Initialize:	
  6753                           ; 1 bytes @ 0x0
  6754                           
  6755  0070                     ?_PWM1_Initialize:	
  6756                           ; 1 bytes @ 0x0
  6757                           
  6758  0070                     ?_PWM2_Initialize:	
  6759                           ; 1 bytes @ 0x0
  6760                           
  6761  0070                     ?_PWM3_Initialize:	
  6762                           ; 1 bytes @ 0x0
  6763                           
  6764  0070                     ?_PWM4_Initialize:	
  6765                           ; 1 bytes @ 0x0
  6766                           
  6767  0070                     ?_PWM5_Initialize:	
  6768                           ; 1 bytes @ 0x0
  6769                           
  6770  0070                     ?_TMR2_Initialize:	
  6771                           ; 1 bytes @ 0x0
  6772                           
  6773  0070                     ?_TMR0_Initialize:	
  6774                           ; 1 bytes @ 0x0
  6775                           
  6776  0070                     ?_EUSART_Initialize:	
  6777                           ; 1 bytes @ 0x0
  6778                           
  6779  0070                     ?_keyScan:	
  6780                           ; 1 bytes @ 0x0
  6781                           
  6782  0070                     ?_keyAction:	
  6783                           ; 1 bytes @ 0x0
  6784                           
  6785  0070                     ?_updateLed:	
  6786                           ; 1 bytes @ 0x0
  6787                           
  6788  0070                     ?_EUSART_RCV_ISR:	
  6789                           ; 1 bytes @ 0x0
  6790                           
  6791  0070                     ??_EUSART_RCV_ISR:	
  6792                           ; 1 bytes @ 0x0
  6793                           
  6794  0070                     ?_runRTC:	
  6795                           ; 1 bytes @ 0x0
  6796                           
  6797  0070                     ?_indicateLedOff:	
  6798                           ; 1 bytes @ 0x0
  6799                           
  6800  0070                     ?_updateDayBright:	
  6801                           ; 1 bytes @ 0x0
  6802                           
  6803  0070                     ?_indicateLedDay:	
  6804                           ; 1 bytes @ 0x0
  6805                           
  6806  0070                     ?_updateDayRiseStatus:	
  6807                           ; 1 bytes @ 0x0
  6808                           
  6809  0070                     ?_updateNightBright:	
  6810                           ; 1 bytes @ 0x0
  6811                           
  6812  0070                     ?_indicateLedNight:	
  6813                           ; 1 bytes @ 0x0
  6814                           
  6815  0070                     ?_updateNightRiseStatus:	
  6816                           ; 1 bytes @ 0x0
  6817                           
  6818  0070                     ?_initRTC:	
  6819                           ; 1 bytes @ 0x0
  6820                           
  6821  0070                     ?_TMR0_StartTimer:	
  6822                           ; 1 bytes @ 0x0
  6823                           
  6824  0070                     ?_TMR2_StartTimer:	
  6825                           ; 1 bytes @ 0x0
  6826                           
  6827  0070                     ?_checkDevID:	
  6828                           ; 1 bytes @ 0x0
  6829                           
  6830  0070                     ?_bleSendDeviceData:	
  6831                           ; 1 bytes @ 0x0
  6832                           
  6833  0070                     ?_DecodeDATA:	
  6834                           ; 1 bytes @ 0x0
  6835                           
  6836  0070                     ?_initBLE:	
  6837                           ; 1 bytes @ 0x0
  6838                           
  6839  0070                     ?_OSCILLATOR_Initialize:	
  6840                           ; 1 bytes @ 0x0
  6841                           
  6842  0070                     ?_SYSTEM_Initialize:	
  6843                           ; 1 bytes @ 0x0
  6844                           
  6845  0070                     ?_TMR2_UserInterruptHandler:	
  6846                           ; 1 bytes @ 0x0
  6847                           
  6848  0070                     ?_INTERRUPT_InterruptManager:	
  6849                           ; 1 bytes @ 0x0
  6850                           
  6851  0070                     ?_readByte:	
  6852                           ; 1 bytes @ 0x0
  6853                           
  6854  0070                     ?_saveLedPara:	
  6855                           ; 1 bytes @ 0x0
  6856                           
  6857  0070                     ?_ReadKey:	
  6858                           ; 1 bytes @ 0x0
  6859                           
  6860  0070                     ??_ReadKey:	
  6861                           ; 1 bytes @ 0x0
  6862                           
  6863  0070                     ?_autoRun:	
  6864                           ; 1 bytes @ 0x0
  6865                           
  6866  0070                     ?_turnMaxLed:	
  6867                           ; 1 bytes @ 0x0
  6868                           
  6869  0070                     ?_turnOffLed:	
  6870                           ; 1 bytes @ 0x0
  6871                           
  6872  0070                     ?_initLedPara:	
  6873                           ; 1 bytes @ 0x0
  6874                           
  6875  0070                     ?_initLedStatus:	
  6876                           ; 1 bytes @ 0x0
  6877                           
  6878  0070                     ?_initLed:	
  6879                           ; 1 bytes @ 0x0
  6880                           
  6881  0070                     ?_findDeviceFlash:	
  6882                           ; 1 bytes @ 0x0
  6883                           
  6884  0070                     ?_preview:	
  6885                           ; 1 bytes @ 0x0
  6886                           
  6887  0070                     ?_main:	
  6888                           ; 1 bytes @ 0x0
  6889                           
  6890  0070                     ?i1_updatePWM:	
  6891                           ; 1 bytes @ 0x0
  6892                           
  6893  0070                     ?i1_indicateLedOff:	
  6894                           ; 1 bytes @ 0x0
  6895                           
  6896  0070                     ??i1_indicateLedOff:	
  6897                           ; 1 bytes @ 0x0
  6898                           
  6899  0070                     ?i1_indicateLedDay:	
  6900                           ; 1 bytes @ 0x0
  6901                           
  6902  0070                     ??i1_indicateLedDay:	
  6903                           ; 1 bytes @ 0x0
  6904                           
  6905  0070                     ?i1_indicateLedNight:	
  6906                           ; 1 bytes @ 0x0
  6907                           
  6908  0070                     ??i1_indicateLedNight:	
  6909                           ; 1 bytes @ 0x0
  6910                           
  6911  0070                     ?i1_indicateLedBle:	
  6912                           ; 1 bytes @ 0x0
  6913                           
  6914  0070                     ??i1_indicateLedBle:	
  6915                           ; 1 bytes @ 0x0
  6916                           
  6917  0070                     ?i1_updateDayBright:	
  6918                           ; 1 bytes @ 0x0
  6919                           
  6920  0070                     ?i1_updateDayRiseStatus:	
  6921                           ; 1 bytes @ 0x0
  6922                           
  6923  0070                     ??i1_updateDayRiseStatus:	
  6924                           ; 1 bytes @ 0x0
  6925                           
  6926  0070                     ?i1_updateNightBright:	
  6927                           ; 1 bytes @ 0x0
  6928                           
  6929  0070                     ?i1_updateNightRiseStatus:	
  6930                           ; 1 bytes @ 0x0
  6931                           
  6932  0070                     ??i1_updateNightRiseStatus:	
  6933                           ; 1 bytes @ 0x0
  6934                           
  6935  0070                     ?i1_PWM1_LoadDutyValue:	
  6936                           ; 1 bytes @ 0x0
  6937                           
  6938  0070                     ?i1_PWM2_LoadDutyValue:	
  6939                           ; 1 bytes @ 0x0
  6940                           
  6941  0070                     ?i1_PWM3_LoadDutyValue:	
  6942                           ; 1 bytes @ 0x0
  6943                           
  6944  0070                     ?i1_PWM4_LoadDutyValue:	
  6945                           ; 1 bytes @ 0x0
  6946                           
  6947  0070                     ?i1_PWM5_LoadDutyValue:	
  6948                           ; 1 bytes @ 0x0
  6949                           
  6950  0070                     ?___lwmod:	
  6951                           ; 1 bytes @ 0x0
  6952                           
  6953  0070                     ReadKey@ReadData:	
  6954                           ; 2 bytes @ 0x0
  6955                           
  6956  0070                     ___lwmod@divisor:	
  6957                           ; 1 bytes @ 0x0
  6958                           
  6959  0070                     i1PWM1_LoadDutyValue@dutyValue:	
  6960                           ; 2 bytes @ 0x0
  6961                           
  6962  0070                     i1PWM2_LoadDutyValue@dutyValue:	
  6963                           ; 2 bytes @ 0x0
  6964                           
  6965  0070                     i1PWM3_LoadDutyValue@dutyValue:	
  6966                           ; 2 bytes @ 0x0
  6967                           
  6968  0070                     i1PWM4_LoadDutyValue@dutyValue:	
  6969                           ; 2 bytes @ 0x0
  6970                           
  6971  0070                     i1PWM5_LoadDutyValue@dutyValue:	
  6972                           ; 2 bytes @ 0x0
  6973                           
  6974                           
  6975                           ; 2 bytes @ 0x0
  6976  0070                     	ds	1
  6977  0071                     ??_keyScan:	
  6978  0071                     keyScan@keyNum:	
  6979                           ; 1 bytes @ 0x1
  6980                           
  6981                           
  6982                           ; 1 bytes @ 0x1
  6983  0071                     	ds	1
  6984  0072                     ??i1_PWM1_LoadDutyValue:	
  6985  0072                     ??i1_PWM2_LoadDutyValue:	
  6986                           ; 1 bytes @ 0x2
  6987                           
  6988  0072                     ??i1_PWM3_LoadDutyValue:	
  6989                           ; 1 bytes @ 0x2
  6990                           
  6991  0072                     ??i1_PWM4_LoadDutyValue:	
  6992                           ; 1 bytes @ 0x2
  6993                           
  6994  0072                     ??i1_PWM5_LoadDutyValue:	
  6995                           ; 1 bytes @ 0x2
  6996                           
  6997  0072                     ___lwmod@dividend:	
  6998                           ; 1 bytes @ 0x2
  6999                           
  7000                           
  7001                           ; 2 bytes @ 0x2
  7002  0072                     	ds	2
  7003  0074                     ??_updateLed:	
  7004  0074                     ??___lwmod:	
  7005                           ; 1 bytes @ 0x4
  7006                           
  7007  0074                     ??i1_updatePWM:	
  7008                           ; 1 bytes @ 0x4
  7009                           
  7010  0074                     ??i1_updateDayBright:	
  7011                           ; 1 bytes @ 0x4
  7012                           
  7013  0074                     ??i1_updateNightBright:	
  7014                           ; 1 bytes @ 0x4
  7015                           
  7016  0074                     ___lwmod@counter:	
  7017                           ; 1 bytes @ 0x4
  7018                           
  7019  0074                     i1updateDayBright@i:	
  7020                           ; 1 bytes @ 0x4
  7021                           
  7022  0074                     i1updateNightBright@i:	
  7023                           ; 1 bytes @ 0x4
  7024                           
  7025                           
  7026                           ; 1 bytes @ 0x4
  7027  0074                     	ds	1
  7028  0075                     ??_keyAction:	
  7029  0075                     ?_checkIsYearLeap:	
  7030                           ; 1 bytes @ 0x5
  7031                           
  7032  0075                     checkIsYearLeap@year:	
  7033                           ; 1 bytes @ 0x5
  7034                           
  7035                           
  7036                           ; 2 bytes @ 0x5
  7037  0075                     	ds	2
  7038  0077                     ??_runRTC:	
  7039  0077                     ??_checkIsYearLeap:	
  7040                           ; 1 bytes @ 0x7
  7041                           
  7042  0077                     keyAction@sta:	
  7043                           ; 1 bytes @ 0x7
  7044                           
  7045                           
  7046                           ; 1 bytes @ 0x7
  7047  0077                     	ds	1
  7048  0078                     keyAction@i:	
  7049                           
  7050                           ; 1 bytes @ 0x8
  7051  0078                     	ds	2
  7052  007A                     updateLed@i:	
  7053                           
  7054                           ; 1 bytes @ 0xA
  7055  007A                     	ds	1
  7056  007B                     ??_TMR2_UserInterruptHandler:	
  7057  007B                     ??_INTERRUPT_InterruptManager:	
  7058                           ; 1 bytes @ 0xB
  7059                           
  7060                           
  7061                           	psect	cstackBANK0
  7062  0020                     __pcstackBANK0:	
  7063                           ; 1 bytes @ 0xB
  7064                           
  7065  0020                     ??_eusartSendByte:	
  7066  0020                     ??_turnOnLedRamp:	
  7067                           ; 1 bytes @ 0x0
  7068                           
  7069  0020                     ??_turnOffLedRamp:	
  7070                           ; 1 bytes @ 0x0
  7071                           
  7072  0020                     ??_indicateLedBle:	
  7073                           ; 1 bytes @ 0x0
  7074                           
  7075  0020                     ??_PIN_MANAGER_Initialize:	
  7076                           ; 1 bytes @ 0x0
  7077                           
  7078  0020                     ??_PWM1_Initialize:	
  7079                           ; 1 bytes @ 0x0
  7080                           
  7081  0020                     ??_PWM2_Initialize:	
  7082                           ; 1 bytes @ 0x0
  7083                           
  7084  0020                     ??_PWM3_Initialize:	
  7085                           ; 1 bytes @ 0x0
  7086                           
  7087  0020                     ??_PWM4_Initialize:	
  7088                           ; 1 bytes @ 0x0
  7089                           
  7090  0020                     ??_PWM5_Initialize:	
  7091                           ; 1 bytes @ 0x0
  7092                           
  7093  0020                     ??_TMR2_Initialize:	
  7094                           ; 1 bytes @ 0x0
  7095                           
  7096  0020                     ??_TMR0_Initialize:	
  7097                           ; 1 bytes @ 0x0
  7098                           
  7099  0020                     ??_EUSART_Initialize:	
  7100                           ; 1 bytes @ 0x0
  7101                           
  7102  0020                     ??_indicateLedOff:	
  7103                           ; 1 bytes @ 0x0
  7104                           
  7105  0020                     ??_indicateLedDay:	
  7106                           ; 1 bytes @ 0x0
  7107                           
  7108  0020                     ??_updateDayRiseStatus:	
  7109                           ; 1 bytes @ 0x0
  7110                           
  7111  0020                     ??_indicateLedNight:	
  7112                           ; 1 bytes @ 0x0
  7113                           
  7114  0020                     ??_updateNightRiseStatus:	
  7115                           ; 1 bytes @ 0x0
  7116                           
  7117  0020                     ?_PWM3_LoadDutyValue:	
  7118                           ; 1 bytes @ 0x0
  7119                           
  7120  0020                     ?_PWM2_LoadDutyValue:	
  7121                           ; 1 bytes @ 0x0
  7122                           
  7123  0020                     ?_PWM1_LoadDutyValue:	
  7124                           ; 1 bytes @ 0x0
  7125                           
  7126  0020                     ?_PWM5_LoadDutyValue:	
  7127                           ; 1 bytes @ 0x0
  7128                           
  7129  0020                     ?_PWM4_LoadDutyValue:	
  7130                           ; 1 bytes @ 0x0
  7131                           
  7132  0020                     ??_initRTC:	
  7133                           ; 1 bytes @ 0x0
  7134                           
  7135  0020                     ??_TMR0_StartTimer:	
  7136                           ; 1 bytes @ 0x0
  7137                           
  7138  0020                     ??_TMR2_StartTimer:	
  7139                           ; 1 bytes @ 0x0
  7140                           
  7141  0020                     ?_getCRC:	
  7142                           ; 1 bytes @ 0x0
  7143                           
  7144  0020                     ??_OSCILLATOR_Initialize:	
  7145                           ; 1 bytes @ 0x0
  7146                           
  7147  0020                     ?_DATAEE_WriteByte:	
  7148                           ; 1 bytes @ 0x0
  7149                           
  7150  0020                     ?_DATAEE_ReadByte:	
  7151                           ; 1 bytes @ 0x0
  7152                           
  7153  0020                     ??_preview:	
  7154                           ; 1 bytes @ 0x0
  7155                           
  7156  0020                     ?___bmul:	
  7157                           ; 1 bytes @ 0x0
  7158                           
  7159  0020                     ?___lwdiv:	
  7160                           ; 1 bytes @ 0x0
  7161                           
  7162  0020                     ?___lmul:	
  7163                           ; 2 bytes @ 0x0
  7164                           
  7165  0020                     turnOnLedRamp@i:	
  7166                           ; 4 bytes @ 0x0
  7167                           
  7168  0020                     turnOffLedRamp@i:	
  7169                           ; 1 bytes @ 0x0
  7170                           
  7171  0020                     eusartSendByte@byte:	
  7172                           ; 1 bytes @ 0x0
  7173                           
  7174  0020                     PIN_MANAGER_Initialize@state:	
  7175                           ; 1 bytes @ 0x0
  7176                           
  7177  0020                     ___bmul@multiplicand:	
  7178                           ; 1 bytes @ 0x0
  7179                           
  7180  0020                     getCRC@pbuf:	
  7181                           ; 1 bytes @ 0x0
  7182                           
  7183  0020                     DATAEE_WriteByte@bAdd:	
  7184                           ; 2 bytes @ 0x0
  7185                           
  7186  0020                     DATAEE_ReadByte@bAdd:	
  7187                           ; 2 bytes @ 0x0
  7188                           
  7189  0020                     PWM1_LoadDutyValue@dutyValue:	
  7190                           ; 2 bytes @ 0x0
  7191                           
  7192  0020                     PWM2_LoadDutyValue@dutyValue:	
  7193                           ; 2 bytes @ 0x0
  7194                           
  7195  0020                     PWM3_LoadDutyValue@dutyValue:	
  7196                           ; 2 bytes @ 0x0
  7197                           
  7198  0020                     PWM4_LoadDutyValue@dutyValue:	
  7199                           ; 2 bytes @ 0x0
  7200                           
  7201  0020                     PWM5_LoadDutyValue@dutyValue:	
  7202                           ; 2 bytes @ 0x0
  7203                           
  7204  0020                     ___lwdiv@divisor:	
  7205                           ; 2 bytes @ 0x0
  7206                           
  7207  0020                     ___lmul@multiplier:	
  7208                           ; 2 bytes @ 0x0
  7209                           
  7210                           
  7211                           ; 4 bytes @ 0x0
  7212  0020                     	ds	1
  7213  0021                     ?_BLE_SendCMD:	
  7214  0021                     ?_bleSendData:	
  7215                           ; 1 bytes @ 0x1
  7216                           
  7217  0021                     ??_SYSTEM_Initialize:	
  7218                           ; 1 bytes @ 0x1
  7219                           
  7220  0021                     ??___bmul:	
  7221                           ; 1 bytes @ 0x1
  7222                           
  7223  0021                     ___bmul@product:	
  7224                           ; 1 bytes @ 0x1
  7225                           
  7226  0021                     BLE_SendCMD@pBuf:	
  7227                           ; 1 bytes @ 0x1
  7228                           
  7229  0021                     bleSendData@frame:	
  7230                           ; 2 bytes @ 0x1
  7231                           
  7232                           
  7233                           ; 2 bytes @ 0x1
  7234  0021                     	ds	1
  7235  0022                     ??_PWM3_LoadDutyValue:	
  7236  0022                     ??_PWM2_LoadDutyValue:	
  7237                           ; 1 bytes @ 0x2
  7238                           
  7239  0022                     ??_PWM1_LoadDutyValue:	
  7240                           ; 1 bytes @ 0x2
  7241                           
  7242  0022                     ??_PWM5_LoadDutyValue:	
  7243                           ; 1 bytes @ 0x2
  7244                           
  7245  0022                     ??_PWM4_LoadDutyValue:	
  7246                           ; 1 bytes @ 0x2
  7247                           
  7248  0022                     ??_DATAEE_ReadByte:	
  7249                           ; 1 bytes @ 0x2
  7250                           
  7251  0022                     ??_readByte:	
  7252                           ; 1 bytes @ 0x2
  7253                           
  7254  0022                     getCRC@len:	
  7255                           ; 1 bytes @ 0x2
  7256                           
  7257  0022                     DATAEE_WriteByte@bData:	
  7258                           ; 1 bytes @ 0x2
  7259                           
  7260  0022                     readByte@addr:	
  7261                           ; 1 bytes @ 0x2
  7262                           
  7263  0022                     ___bmul@multiplier:	
  7264                           ; 1 bytes @ 0x2
  7265                           
  7266  0022                     ___lwdiv@dividend:	
  7267                           ; 1 bytes @ 0x2
  7268                           
  7269                           
  7270                           ; 2 bytes @ 0x2
  7271  0022                     	ds	1
  7272  0023                     ??_getCRC:	
  7273  0023                     ??_BLE_SendCMD:	
  7274                           ; 1 bytes @ 0x3
  7275                           
  7276  0023                     ??_DATAEE_WriteByte:	
  7277                           ; 1 bytes @ 0x3
  7278                           
  7279  0023                     ?___wmul:	
  7280                           ; 1 bytes @ 0x3
  7281                           
  7282  0023                     bleSendData@len:	
  7283                           ; 2 bytes @ 0x3
  7284                           
  7285  0023                     DATAEE_WriteByte@GIEBitValue:	
  7286                           ; 1 bytes @ 0x3
  7287                           
  7288  0023                     readByte@result:	
  7289                           ; 1 bytes @ 0x3
  7290                           
  7291  0023                     ___wmul@multiplier:	
  7292                           ; 1 bytes @ 0x3
  7293                           
  7294                           
  7295                           ; 2 bytes @ 0x3
  7296  0023                     	ds	1
  7297  0024                     ??_updatePWM:	
  7298  0024                     ??_updateDayBright:	
  7299                           ; 1 bytes @ 0x4
  7300                           
  7301  0024                     ??_updateNightBright:	
  7302                           ; 1 bytes @ 0x4
  7303                           
  7304  0024                     ??_bleSendData:	
  7305                           ; 1 bytes @ 0x4
  7306                           
  7307  0024                     ?_writeByte:	
  7308                           ; 1 bytes @ 0x4
  7309                           
  7310  0024                     ?_readBuffer:	
  7311                           ; 1 bytes @ 0x4
  7312                           
  7313  0024                     ??_turnMaxLed:	
  7314                           ; 1 bytes @ 0x4
  7315                           
  7316  0024                     ??_turnOffLed:	
  7317                           ; 1 bytes @ 0x4
  7318                           
  7319  0024                     ??___lwdiv:	
  7320                           ; 1 bytes @ 0x4
  7321                           
  7322  0024                     writeByte@byte:	
  7323                           ; 1 bytes @ 0x4
  7324                           
  7325  0024                     readBuffer@buf:	
  7326                           ; 1 bytes @ 0x4
  7327                           
  7328  0024                     updateDayBright@i:	
  7329                           ; 1 bytes @ 0x4
  7330                           
  7331  0024                     updateNightBright@i:	
  7332                           ; 1 bytes @ 0x4
  7333                           
  7334  0024                     ___lwdiv@quotient:	
  7335                           ; 1 bytes @ 0x4
  7336                           
  7337  0024                     ___lmul@multiplicand:	
  7338                           ; 2 bytes @ 0x4
  7339                           
  7340  0024                     BLE_SendCMD@ack:	
  7341                           ; 4 bytes @ 0x4
  7342                           
  7343                           
  7344                           ; 7 bytes @ 0x4
  7345  0024                     	ds	1
  7346  0025                     ??_writeByte:	
  7347  0025                     ??_initLedStatus:	
  7348                           ; 1 bytes @ 0x5
  7349                           
  7350  0025                     getCRC@result:	
  7351                           ; 1 bytes @ 0x5
  7352                           
  7353  0025                     writeByte@addr:	
  7354                           ; 1 bytes @ 0x5
  7355                           
  7356  0025                     readBuffer@len:	
  7357                           ; 1 bytes @ 0x5
  7358                           
  7359  0025                     initLedStatus@sta:	
  7360                           ; 1 bytes @ 0x5
  7361                           
  7362  0025                     ___wmul@multiplicand:	
  7363                           ; 1 bytes @ 0x5
  7364                           
  7365                           
  7366                           ; 2 bytes @ 0x5
  7367  0025                     	ds	1
  7368  0026                     ?_writeBuffer:	
  7369  0026                     ??_readBuffer:	
  7370                           ; 1 bytes @ 0x6
  7371                           
  7372  0026                     ??_findDeviceFlash:	
  7373                           ; 1 bytes @ 0x6
  7374                           
  7375  0026                     getCRC@i:	
  7376                           ; 1 bytes @ 0x6
  7377                           
  7378  0026                     writeBuffer@buf:	
  7379                           ; 1 bytes @ 0x6
  7380                           
  7381  0026                     ___lwdiv@counter:	
  7382                           ; 1 bytes @ 0x6
  7383                           
  7384                           
  7385                           ; 1 bytes @ 0x6
  7386  0026                     	ds	1
  7387  0027                     ??_bleSendDeviceData:	
  7388  0027                     ??___wmul:	
  7389                           ; 1 bytes @ 0x7
  7390                           
  7391  0027                     writeBuffer@len:	
  7392                           ; 1 bytes @ 0x7
  7393                           
  7394  0027                     readBuffer@addr:	
  7395                           ; 1 bytes @ 0x7
  7396                           
  7397  0027                     ___wmul@product:	
  7398                           ; 1 bytes @ 0x7
  7399                           
  7400                           
  7401                           ; 2 bytes @ 0x7
  7402  0027                     	ds	1
  7403  0028                     ??_writeBuffer:	
  7404  0028                     ??___lmul:	
  7405                           ; 1 bytes @ 0x8
  7406                           
  7407  0028                     bleSendDeviceData@len:	
  7408                           ; 1 bytes @ 0x8
  7409                           
  7410  0028                     readBuffer@i:	
  7411                           ; 1 bytes @ 0x8
  7412                           
  7413  0028                     ___lmul@product:	
  7414                           ; 1 bytes @ 0x8
  7415                           
  7416                           
  7417                           ; 4 bytes @ 0x8
  7418  0028                     	ds	1
  7419  0029                     ?_readLedPara:	
  7420  0029                     bleSendDeviceData@i:	
  7421                           ; 55 bytes @ 0x9
  7422                           
  7423  0029                     writeBuffer@addr:	
  7424                           ; 1 bytes @ 0x9
  7425                           
  7426                           
  7427                           ; 1 bytes @ 0x9
  7428  0029                     	ds	1
  7429  002A                     ??_DecodeDATA:	
  7430  002A                     writeBuffer@i:	
  7431                           ; 1 bytes @ 0xA
  7432                           
  7433                           
  7434                           ; 1 bytes @ 0xA
  7435  002A                     	ds	1
  7436  002B                     ?_writeLedPara:	
  7437  002B                     BLE_SendCMD@cnt:	
  7438                           ; 1 bytes @ 0xB
  7439                           
  7440  002B                     writeLedPara@para:	
  7441                           ; 2 bytes @ 0xB
  7442                           
  7443                           
  7444                           ; 55 bytes @ 0xB
  7445  002B                     	ds	1
  7446  002C                     ?___lldiv:	
  7447  002C                     ___lldiv@divisor:	
  7448                           ; 4 bytes @ 0xC
  7449                           
  7450                           
  7451                           ; 4 bytes @ 0xC
  7452  002C                     	ds	1
  7453  002D                     BLE_SendCMD@rev:	
  7454                           
  7455                           ; 1 bytes @ 0xD
  7456  002D                     	ds	1
  7457  002E                     BLE_SendCMD@index:	
  7458                           
  7459                           ; 1 bytes @ 0xE
  7460  002E                     	ds	1
  7461  002F                     ??_checkDevID:	
  7462  002F                     DecodeDATA@idx:	
  7463                           ; 1 bytes @ 0xF
  7464                           
  7465                           
  7466                           ; 1 bytes @ 0xF
  7467  002F                     	ds	1
  7468  0030                     DecodeDATA@len_300:	
  7469  0030                     ___lldiv@dividend:	
  7470                           ; 1 bytes @ 0x10
  7471                           
  7472  0030                     checkDevID@dev:	
  7473                           ; 4 bytes @ 0x10
  7474                           
  7475                           
  7476                           ; 17 bytes @ 0x10
  7477  0030                     	ds	1
  7478  0031                     DecodeDATA@len_304:	
  7479                           
  7480                           ; 1 bytes @ 0x11
  7481  0031                     	ds	1
  7482  0032                     DecodeDATA@val_306:	
  7483                           
  7484                           ; 2 bytes @ 0x12
  7485  0032                     	ds	2
  7486  0034                     ??___lldiv:	
  7487  0034                     DecodeDATA@val:	
  7488                           ; 1 bytes @ 0x14
  7489                           
  7490  0034                     ___lldiv@quotient:	
  7491                           ; 2 bytes @ 0x14
  7492                           
  7493                           
  7494                           ; 4 bytes @ 0x14
  7495  0034                     	ds	2
  7496  0036                     DecodeDATA@i_301:	
  7497                           
  7498                           ; 1 bytes @ 0x16
  7499  0036                     	ds	1
  7500  0037                     DecodeDATA@i_299:	
  7501                           
  7502                           ; 1 bytes @ 0x17
  7503  0037                     	ds	1
  7504  0038                     DecodeDATA@i_305:	
  7505  0038                     ___lldiv@counter:	
  7506                           ; 1 bytes @ 0x18
  7507                           
  7508                           
  7509                           ; 1 bytes @ 0x18
  7510  0038                     	ds	1
  7511  0039                     ??_autoRun:	
  7512  0039                     DecodeDATA@idx_302:	
  7513                           ; 1 bytes @ 0x19
  7514                           
  7515                           
  7516                           ; 1 bytes @ 0x19
  7517  0039                     	ds	1
  7518  003A                     DecodeDATA@idx_303:	
  7519                           
  7520                           ; 1 bytes @ 0x1A
  7521  003A                     	ds	1
  7522  003B                     DecodeDATA@i:	
  7523                           
  7524                           ; 1 bytes @ 0x1B
  7525  003B                     	ds	6
  7526  0041                     checkDevID@cnt:	
  7527                           
  7528                           ; 2 bytes @ 0x21
  7529  0041                     	ds	1
  7530  0042                     autoRun@val:	
  7531                           
  7532                           ; 20 bytes @ 0x22
  7533  0042                     	ds	1
  7534  0043                     checkDevID@rev:	
  7535                           
  7536                           ; 1 bytes @ 0x23
  7537  0043                     	ds	1
  7538  0044                     checkDevID@index:	
  7539                           
  7540                           ; 1 bytes @ 0x24
  7541  0044                     	ds	1
  7542  0045                     ??_initBLE:	
  7543                           
  7544                           ; 1 bytes @ 0x25
  7545  0045                     	ds	17
  7546  0056                     autoRun@tr:	
  7547                           
  7548                           ; 8 bytes @ 0x36
  7549  0056                     	ds	8
  7550  005E                     autoRun@dbrt:	
  7551                           
  7552                           ; 1 bytes @ 0x3E
  7553  005E                     	ds	1
  7554  005F                     autoRun@duration:	
  7555                           
  7556                           ; 2 bytes @ 0x3F
  7557  005F                     	ds	1
  7558  0060                     ??_readLedPara:	
  7559                           
  7560                           ; 1 bytes @ 0x40
  7561  0060                     	ds	1
  7562  0061                     ??_initLedPara:	
  7563  0061                     autoRun@dt:	
  7564                           ; 1 bytes @ 0x41
  7565                           
  7566                           
  7567                           ; 4 bytes @ 0x41
  7568  0061                     	ds	1
  7569  0062                     ??_writeLedPara:	
  7570  0062                     writeLedPara@addr:	
  7571                           ; 1 bytes @ 0x42
  7572                           
  7573                           
  7574                           ; 1 bytes @ 0x42
  7575  0062                     	ds	1
  7576  0063                     ??_saveLedPara:	
  7577  0063                     initLedPara@j:	
  7578                           ; 1 bytes @ 0x43
  7579                           
  7580                           
  7581                           ; 1 bytes @ 0x43
  7582  0063                     	ds	1
  7583  0064                     initLedPara@i:	
  7584                           
  7585                           ; 1 bytes @ 0x44
  7586  0064                     	ds	1
  7587  0065                     ??_initLed:	
  7588  0065                     autoRun@sec:	
  7589                           ; 1 bytes @ 0x45
  7590                           
  7591                           
  7592                           ; 1 bytes @ 0x45
  7593  0065                     	ds	1
  7594  0066                     autoRun@j:	
  7595                           
  7596                           ; 1 bytes @ 0x46
  7597  0066                     	ds	1
  7598  0067                     autoRun@et:	
  7599                           
  7600                           ; 2 bytes @ 0x47
  7601  0067                     	ds	2
  7602  0069                     autoRun@ct:	
  7603                           
  7604                           ; 2 bytes @ 0x49
  7605  0069                     	ds	2
  7606  006B                     autoRun@st:	
  7607                           
  7608                           ; 2 bytes @ 0x4B
  7609  006B                     	ds	2
  7610  006D                     autoRun@k:	
  7611                           
  7612                           ; 1 bytes @ 0x4D
  7613  006D                     	ds	1
  7614  006E                     autoRun@i:	
  7615                           
  7616                           ; 1 bytes @ 0x4E
  7617  006E                     	ds	1
  7618  006F                     ??_main:	
  7619                           
  7620                           ; 1 bytes @ 0x4F
  7621  006F                     	ds	1
  7622                           
  7623                           	psect	text1
  7624  162B                     __ptext1:	
  7625 ;; *************** function _saveLedPara *****************
  7626 ;; Defined at:
  7627 ;;		line 108 in file "src/eeprom.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;		None
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;		None
  7632 ;; Return value:  Size  Location     Type
  7633 ;;                  1    wreg      void 
  7634 ;; Registers used:
  7635 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7636 ;; Tracked objects:
  7637 ;;		On entry : 1F/2
  7638 ;;		On exit  : 1F/2
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7643 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7644 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7645 ;;Total ram usage:        1 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; Hardware stack levels required when called:   10
  7648 ;; This function calls:
  7649 ;;		_writeLedPara
  7650 ;; This function is called by:
  7651 ;;		_main
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           
  7656                           ;psect for function _saveLedPara
  7657  162B                     _saveLedPara:	
  7658                           
  7659                           ;eeprom.c: 110: if (gLedRunPara.nSaveDelayCount > 0)
  7660                           
  7661                           ;incstack = 0
  7662                           ; Regs used in _saveLedPara: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7663  162B  085A               	movf	(_gLedRunPara^(0+256)+3),w	;volatile
  7664  162C  1D03               	btfss	3,2
  7665                           
  7666                           ;eeprom.c: 111: {
  7667                           ;eeprom.c: 112: gLedRunPara.nSaveDelayCount--;
  7668  162D  03DA               	decf	(_gLedRunPara^(0+256)+3),f	;volatile
  7669                           
  7670                           ;eeprom.c: 113: }
  7671                           ;eeprom.c: 114: if (gLedRunPara.nSaveDelayCount == 0)
  7672  162E  085A               	movf	(_gLedRunPara^(0+256)+3),w	;volatile
  7673  162F  1D03               	btfss	3,2
  7674  1630  0008               	return
  7675                           
  7676                           ;eeprom.c: 115: {
  7677                           ;eeprom.c: 116: writeLedPara( 0x10, gLedPara );
  7678  1631  3020               	movlw	low _gLedPara
  7679  1632  0086               	movwf	6
  7680  1633  3001               	movlw	high _gLedPara
  7681  1634  0087               	movwf	7
  7682  1635  302B               	movlw	low writeLedPara@para
  7683  1636  0084               	movwf	4
  7684  1637  3000               	movlw	high writeLedPara@para
  7685  1638  0085               	movwf	5
  7686  1639  3037               	movlw	55
  7687  163A  0020               	movlb	0	; select bank0
  7688  163B  00E3               	movwf	??_saveLedPara
  7689  163C                     u4040:	
  7690  163C  0016               	moviw fsr1++
  7691  163D  001A               	movwi fsr0++
  7692  163E  0BE3               	decfsz	??_saveLedPara,f
  7693  163F  2E3C               	goto	u4040
  7694  1640  3010               	movlw	16
  7695  1641  2645               	fcall	_writeLedPara
  7696                           
  7697                           ;eeprom.c: 117: gLedRunPara.fSave = 0;
  7698  1642  0022               	movlb	2	; select bank2
  7699  1643  1157               	bcf	_gLedRunPara^(0+256),2	;volatile
  7700  1644  0008               	return
  7701  1645                     __end_of_saveLedPara:	
  7702  1645                     __ptext2:	
  7703 ;; *************** function _writeLedPara *****************
  7704 ;; Defined at:
  7705 ;;		line 91 in file "src/eeprom.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;  addr            1    wreg     unsigned char 
  7708 ;;  para           55   11[BANK0 ] struct .
  7709 ;; Auto vars:     Size  Location     Type
  7710 ;;  addr            1   66[BANK0 ] unsigned char 
  7711 ;; Return value:  Size  Location     Type
  7712 ;;                  1    wreg      void 
  7713 ;; Registers used:
  7714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7715 ;; Tracked objects:
  7716 ;;		On entry : 1F/0
  7717 ;;		On exit  : 1F/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7720 ;;      Params:         0      55       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;      Totals:         0      56       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;Total ram usage:       56 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; Hardware stack levels required when called:    9
  7727 ;; This function calls:
  7728 ;;		_writeBuffer
  7729 ;; This function is called by:
  7730 ;;		_saveLedPara
  7731 ;; This function uses a non-reentrant model
  7732 ;;
  7733                           
  7734                           
  7735                           ;psect for function _writeLedPara
  7736  1645                     _writeLedPara:	
  7737                           
  7738                           ;incstack = 0
  7739                           ; Regs used in _writeLedPara: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7740                           ;writeLedPara@addr stored from wreg
  7741  1645  00E2               	movwf	writeLedPara@addr
  7742                           
  7743                           ;eeprom.c: 93: writeBuffer(addr, (unsigned char*)&para, sizeof(para));
  7744  1646  302B               	movlw	(low (writeLedPara@para| 0))& (0+255)
  7745  1647  00A6               	movwf	writeBuffer@buf
  7746  1648  3037               	movlw	55
  7747  1649  00A7               	movwf	writeBuffer@len
  7748  164A  0862               	movf	writeLedPara@addr,w
  7749  164B  2E4C               	ljmp	_writeBuffer
  7750  164C                     __end_of_writeLedPara:	
  7751  164C                     __ptext3:	
  7752 ;; *************** function _writeBuffer *****************
  7753 ;; Defined at:
  7754 ;;		line 64 in file "src/eeprom.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  addr            1    wreg     unsigned char 
  7757 ;;  buf             1    6[BANK0 ] PTR unsigned char 
  7758 ;;		 -> writeLedPara@para(55), 
  7759 ;;  len             1    7[BANK0 ] unsigned char 
  7760 ;; Auto vars:     Size  Location     Type
  7761 ;;  addr            1    9[BANK0 ] unsigned char 
  7762 ;;  i               1   10[BANK0 ] unsigned char 
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  1    wreg      void 
  7765 ;; Registers used:
  7766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7767 ;; Tracked objects:
  7768 ;;		On entry : 1F/0
  7769 ;;		On exit  : 1F/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7772 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7775 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;Total ram usage:        5 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:    8
  7779 ;; This function calls:
  7780 ;;		_writeByte
  7781 ;; This function is called by:
  7782 ;;		_writeLedPara
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786                           
  7787                           ;psect for function _writeBuffer
  7788  164C                     _writeBuffer:	
  7789                           
  7790                           ;incstack = 0
  7791                           ; Regs used in _writeBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7792                           ;writeBuffer@addr stored from wreg
  7793  164C  00A9               	movwf	writeBuffer@addr
  7794                           
  7795                           ;eeprom.c: 66: for (unsigned char i = 0; i < len; i++)
  7796  164D  01AA               	clrf	writeBuffer@i
  7797  164E                     l3093:	
  7798  164E  0827               	movf	writeBuffer@len,w
  7799  164F  022A               	subwf	writeBuffer@i,w
  7800  1650  1803               	btfsc	3,0
  7801  1651  0008               	return
  7802                           
  7803                           ;eeprom.c: 67: {
  7804                           ;eeprom.c: 68: writeByte((addr+i), *(buf+i));
  7805  1652  082A               	movf	writeBuffer@i,w
  7806  1653  0726               	addwf	writeBuffer@buf,w
  7807  1654  00A8               	movwf	??_writeBuffer
  7808  1655  0086               	movwf	6
  7809  1656  0187               	clrf	7
  7810  1657  0801               	movf	1,w
  7811  1658  00A4               	movwf	writeByte@byte
  7812  1659  0829               	movf	writeBuffer@addr,w
  7813  165A  072A               	addwf	writeBuffer@i,w
  7814  165B  265F  3196         	fcall	_writeByte
  7815  165D  0AAA               	incf	writeBuffer@i,f
  7816  165E  2E4E               	goto	l3093
  7817  165F                     __end_of_writeBuffer:	
  7818  165F                     __ptext4:	
  7819 ;; *************** function _writeByte *****************
  7820 ;; Defined at:
  7821 ;;		line 42 in file "src/eeprom.c"
  7822 ;; Parameters:    Size  Location     Type
  7823 ;;  addr            1    wreg     unsigned char 
  7824 ;;  byte            1    4[BANK0 ] unsigned char 
  7825 ;; Auto vars:     Size  Location     Type
  7826 ;;  addr            1    5[BANK0 ] unsigned char 
  7827 ;; Return value:  Size  Location     Type
  7828 ;;                  1    wreg      void 
  7829 ;; Registers used:
  7830 ;;		wreg, status,2, status,0, pclath, cstack
  7831 ;; Tracked objects:
  7832 ;;		On entry : 1F/0
  7833 ;;		On exit  : 1F/0
  7834 ;;		Unchanged: 0/0
  7835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7836 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7837 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7839 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7840 ;;Total ram usage:        2 bytes
  7841 ;; Hardware stack levels used:    1
  7842 ;; Hardware stack levels required when called:    7
  7843 ;; This function calls:
  7844 ;;		_DATAEE_WriteByte
  7845 ;; This function is called by:
  7846 ;;		_writeBuffer
  7847 ;; This function uses a non-reentrant model
  7848 ;;
  7849                           
  7850                           
  7851                           ;psect for function _writeByte
  7852  165F                     _writeByte:	
  7853                           
  7854                           ;incstack = 0
  7855                           ; Regs used in _writeByte: [wreg+status,2+status,0+pclath+cstack]
  7856                           ;writeByte@addr stored from wreg
  7857  165F  00A5               	movwf	writeByte@addr
  7858                           
  7859                           ;eeprom.c: 44: DATAEE_WriteByte(0x7000 + addr, byte);
  7860  1660  00A0               	movwf	DATAEE_WriteByte@bAdd
  7861  1661  3070               	movlw	112
  7862  1662  01A1               	clrf	DATAEE_WriteByte@bAdd+1
  7863  1663  07A1               	addwf	DATAEE_WriteByte@bAdd+1,f
  7864  1664  0824               	movf	writeByte@byte,w
  7865  1665  00A2               	movwf	DATAEE_WriteByte@bData
  7866  1666  2E67               	ljmp	l2883
  7867  1667                     __end_of_writeByte:	
  7868  1667                     __ptext5:	
  7869 ;; *************** function _DATAEE_WriteByte *****************
  7870 ;; Defined at:
  7871 ;;		line 3 in file "src/eeprom.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;  bAdd            2    0[BANK0 ] unsigned int 
  7874 ;;  bData           1    2[BANK0 ] unsigned char 
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  7877 ;; Return value:  Size  Location     Type
  7878 ;;                  1    wreg      void 
  7879 ;; Registers used:
  7880 ;;		wreg, status,2, status,0
  7881 ;; Tracked objects:
  7882 ;;		On entry : 1F/0
  7883 ;;		On exit  : 1F/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7886 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7887 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7889 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;Total ram usage:        4 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:    6
  7893 ;; This function calls:
  7894 ;;		Nothing
  7895 ;; This function is called by:
  7896 ;;		_writeByte
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           
  7901                           ;psect for function _DATAEE_WriteByte
  7902  1667                     _DATAEE_WriteByte:	
  7903  1667                     l2883:	
  7904                           ;incstack = 0
  7905                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  7906                           
  7907                           
  7908                           ;eeprom.c: 5: unsigned char GIEBitValue = INTCONbits.GIE;
  7909  1667  3000               	movlw	0
  7910  1668  1B8B               	btfsc	11,7	;volatile
  7911  1669  3001               	movlw	1
  7912  166A  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
  7913                           
  7914                           ;eeprom.c: 7: NVMADRH = ((bAdd >> 8) & 0xFF);
  7915  166B  0821               	movf	DATAEE_WriteByte@bAdd+1,w
  7916  166C  0031               	movlb	17	; select bank17
  7917  166D  0092               	movwf	18	;volatile
  7918                           
  7919                           ;eeprom.c: 8: NVMADRL = (bAdd & 0xFF);
  7920  166E  0020               	movlb	0	; select bank0
  7921  166F  0820               	movf	DATAEE_WriteByte@bAdd,w
  7922  1670  0031               	movlb	17	; select bank17
  7923  1671  0091               	movwf	17	;volatile
  7924                           
  7925                           ;eeprom.c: 9: NVMDATL = bData;
  7926  1672  0020               	movlb	0	; select bank0
  7927  1673  0822               	movf	DATAEE_WriteByte@bData,w
  7928  1674  0031               	movlb	17	; select bank17
  7929  1675  0093               	movwf	19	;volatile
  7930                           
  7931                           ;eeprom.c: 10: NVMCON1bits.NVMREGS = 1;
  7932  1676  1715               	bsf	21,6	;volsfr
  7933                           
  7934                           ;eeprom.c: 11: NVMCON1bits.WREN = 1;
  7935  1677  1515               	bsf	21,2	;volsfr
  7936                           
  7937                           ;eeprom.c: 12: INTCONbits.GIE = 0;
  7938  1678  138B               	bcf	11,7	;volatile
  7939                           
  7940                           ;eeprom.c: 13: NVMCON2 = 0x55;
  7941  1679  3055               	movlw	85
  7942  167A  0096               	movwf	22	;volsfr
  7943                           
  7944                           ;eeprom.c: 14: NVMCON2 = 0xAA;
  7945  167B  30AA               	movlw	170
  7946  167C  0096               	movwf	22	;volsfr
  7947                           
  7948                           ;eeprom.c: 15: NVMCON1bits.WR = 1;
  7949  167D  1495               	bsf	21,1	;volsfr
  7950  167E                     l262:	
  7951                           ;eeprom.c: 18: {
  7952                           
  7953  167E  1895               	btfsc	21,1	;volsfr
  7954  167F  2E7E               	goto	l262
  7955                           
  7956                           ;eeprom.c: 19: }
  7957                           ;eeprom.c: 21: NVMCON1bits.WREN = 0;
  7958  1680  1115               	bcf	21,2	;volsfr
  7959                           
  7960                           ;eeprom.c: 22: INTCONbits.GIE = GIEBitValue;
  7961  1681  0020               	movlb	0	; select bank0
  7962  1682  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
  7963  1683  1C03               	skipc
  7964  1684  138B               	bcf	11,7	;volatile
  7965  1685  1803               	skipnc
  7966  1686  178B               	bsf	11,7	;volatile
  7967  1687  0008               	return
  7968  1688                     __end_of_DATAEE_WriteByte:	
  7969                           
  7970                           	psect	text9
  7971  0841                     __ptext9:	
  7972 ;; *************** function _initLedPara *****************
  7973 ;; Defined at:
  7974 ;;		line 178 in file "src/led.c"
  7975 ;; Parameters:    Size  Location     Type
  7976 ;;		None
  7977 ;; Auto vars:     Size  Location     Type
  7978 ;;  j               1   67[BANK0 ] unsigned char 
  7979 ;;  i               1   68[BANK0 ] unsigned char 
  7980 ;; Return value:  Size  Location     Type
  7981 ;;                  1    wreg      void 
  7982 ;; Registers used:
  7983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7984 ;; Tracked objects:
  7985 ;;		On entry : 1F/2
  7986 ;;		On exit  : 1F/2
  7987 ;;		Unchanged: 0/0
  7988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7990 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7991 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7992 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7993 ;;Total ram usage:        4 bytes
  7994 ;; Hardware stack levels used:    1
  7995 ;; Hardware stack levels required when called:   10
  7996 ;; This function calls:
  7997 ;;		___bmul
  7998 ;;		_readLedPara
  7999 ;;		_updateDayRiseStatus
  8000 ;;		_updateNightRiseStatus
  8001 ;; This function is called by:
  8002 ;;		_initLed
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           
  8007                           ;psect for function _initLedPara
  8008  0841                     _initLedPara:	
  8009                           
  8010                           ;led.c: 180: gLedPara = readLedPara(0x10);
  8011                           
  8012                           ;incstack = 0
  8013                           ; Regs used in _initLedPara: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8014  0841  3010               	movlw	16
  8015  0842  22D2  3188         	fcall	_readLedPara
  8016  0844  3029               	movlw	low ?_readLedPara
  8017  0845  0086               	movwf	6
  8018  0846  3000               	movlw	high ?_readLedPara
  8019  0847  0087               	movwf	7
  8020  0848  3020               	movlw	low _gLedPara
  8021  0849  0084               	movwf	4
  8022  084A  3001               	movlw	high _gLedPara
  8023  084B  0085               	movwf	5
  8024  084C  3037               	movlw	55
  8025  084D  00E1               	movwf	??_initLedPara
  8026  084E                     u3000:	
  8027  084E  0016               	moviw fsr1++
  8028  084F  001A               	movwi fsr0++
  8029  0850  0BE1               	decfsz	??_initLedPara,f
  8030  0851  284E               	goto	u3000
  8031                           
  8032                           ;led.c: 181: gLedPara.fRsv = 0;
  8033  0852  3007               	movlw	-249
  8034  0853  0022               	movlb	2	; select bank2
  8035  0854  05A0               	andwf	_gLedPara^(0+256),f	;volatile
  8036                           
  8037                           ;led.c: 182: gLedPara.mPara.manualPara.fRsv = 0;
  8038  0855  3001               	movlw	-255
  8039  0856  05A1               	andwf	(_gLedPara^(0+256)+1),f	;volatile
  8040                           
  8041                           ;led.c: 183: for ( unsigned char i = 0; i < 5; i++ )
  8042  0857  0020               	movlb	0	; select bank0
  8043  0858  01E4               	clrf	initLedPara@i
  8044  0859                     l3607:	
  8045                           
  8046                           ;led.c: 184: {
  8047                           ;led.c: 186: if ( gLedPara.mPara.manualPara.nBrt[i] > 1000 )
  8048  0859  3564               	lslf	initLedPara@i,w
  8049  085A  3E23               	addlw	(low ((_gLedPara| (0+256)+3)))& (0+255)
  8050  085B  0086               	movwf	6
  8051  085C  3001               	movlw	1	; select bank2/3
  8052  085D  0087               	movwf	7
  8053  085E  3F40               	moviw [0]fsr1
  8054  085F  00E1               	movwf	??_initLedPara
  8055  0860  3F41               	moviw [1]fsr1
  8056  0861  00E2               	movwf	??_initLedPara+1
  8057  0862  3003               	movlw	3
  8058  0863  0262               	subwf	??_initLedPara+1,w
  8059  0864  30E9               	movlw	233
  8060  0865  1903               	skipnz
  8061  0866  0261               	subwf	??_initLedPara,w
  8062  0867  1C03               	skipc
  8063  0868  2874               	goto	l3611
  8064                           
  8065                           ;led.c: 187: {
  8066                           ;led.c: 188: gLedPara.mPara.manualPara.nBrt[i] = 1000;
  8067  0869  30E8               	movlw	232
  8068  086A  00E1               	movwf	??_initLedPara
  8069  086B  3003               	movlw	3
  8070  086C  00E2               	movwf	??_initLedPara+1
  8071  086D  3564               	lslf	initLedPara@i,w
  8072  086E  3E23               	addlw	(low ((_gLedPara| (0+256)+3)))& (0+255)
  8073  086F  0086               	movwf	6
  8074  0870  0861               	movf	??_initLedPara,w
  8075  0871  3FC0               	movwi [0]fsr1
  8076  0872  0862               	movf	??_initLedPara+1,w
  8077  0873  3FC1               	movwi [1]fsr1
  8078  0874                     l3611:	
  8079                           
  8080                           ;led.c: 189: }
  8081                           ;led.c: 191: for ( unsigned char j = 0; j < 4; j++ )
  8082  0874  01E3               	clrf	initLedPara@j
  8083  0875                     l3617:	
  8084                           
  8085                           ;led.c: 192: {
  8086                           ;led.c: 193: if ( gLedPara.mPara.manualPara.nCustomBrt[j][i] > 100 )
  8087  0875  3005               	movlw	5
  8088  0876  00A0               	movwf	___bmul@multiplicand
  8089  0877  0863               	movf	initLedPara@j,w
  8090  0878  2262  3188         	fcall	___bmul
  8091  087A  3E2D               	addlw	(low ((_gLedPara| (0+256)+13)))& (0+255)
  8092  087B  0764               	addwf	initLedPara@i,w
  8093  087C  00E1               	movwf	??_initLedPara
  8094  087D  23A4  3188         	fcall	PL56	;call to abstracted procedure
  8095  087F  1C03               	skipc
  8096  0880  288E               	goto	l3621
  8097                           
  8098                           ;led.c: 194: {
  8099                           ;led.c: 195: gLedPara.mPara.manualPara.nCustomBrt[j][i] = 100;
  8100  0881  3005               	movlw	5
  8101  0882  00A0               	movwf	___bmul@multiplicand
  8102  0883  0863               	movf	initLedPara@j,w
  8103  0884  2262  3188         	fcall	___bmul
  8104  0886  3E2D               	addlw	(low ((_gLedPara| (0+256)+13)))& (0+255)
  8105  0887  0764               	addwf	initLedPara@i,w
  8106  0888  00E1               	movwf	??_initLedPara
  8107  0889  0086               	movwf	6
  8108  088A  3001               	movlw	1	; select bank2/3
  8109  088B  0087               	movwf	7
  8110  088C  3064               	movlw	100
  8111  088D  0081               	movwf	1
  8112  088E                     l3621:	
  8113  088E  3004               	movlw	4
  8114  088F  0AE3               	incf	initLedPara@j,f
  8115  0890  0263               	subwf	initLedPara@j,w
  8116  0891  1C03               	skipc
  8117  0892  2875               	goto	l3617
  8118                           
  8119                           ;led.c: 196: }
  8120                           ;led.c: 197: }
  8121                           ;led.c: 199: if ( gLedPara.aPara.autoPara.daylight[i] > 100 )
  8122  0893  0864               	movf	initLedPara@i,w
  8123  0894  3E45               	addlw	(low ((_gLedPara| (0+256)+37)))& (0+255)
  8124  0895  23A4  3188         	fcall	PL56	;call to abstracted procedure
  8125                           
  8126                           ;led.c: 200: {
  8127                           ;led.c: 201: gLedPara.aPara.autoPara.daylight[i] = 100;
  8128  0897  0864               	movf	initLedPara@i,w
  8129  0898  1C03               	skipc
  8130  0899  289F               	goto	L1
  8131  089A  3E45               	addlw	(low ((_gLedPara| (0+256)+37)))& (0+255)
  8132  089B  0086               	movwf	6
  8133  089C  3064               	movlw	100
  8134  089D  0081               	movwf	1
  8135                           
  8136                           ;led.c: 202: }
  8137                           ;led.c: 204: if ( gLedPara.aPara.autoPara.moonlight[i] > 100 )
  8138  089E  0864               	movf	initLedPara@i,w
  8139  089F                     L1:	
  8140  089F  3E4E               	addlw	(low ((_gLedPara| (0+256)+46)))& (0+255)
  8141  08A0  23A4  3188         	fcall	PL56	;call to abstracted procedure
  8142  08A2  1C03               	skipc
  8143  08A3  28A9               	goto	l3631
  8144                           
  8145                           ;led.c: 205: {
  8146                           ;led.c: 206: gLedPara.aPara.autoPara.moonlight[i] = 100;
  8147  08A4  0864               	movf	initLedPara@i,w
  8148  08A5  3E4E               	addlw	(low ((_gLedPara| (0+256)+46)))& (0+255)
  8149  08A6  0086               	movwf	6
  8150  08A7  3064               	movlw	100
  8151  08A8  0081               	movwf	1
  8152  08A9                     l3631:	
  8153  08A9  3005               	movlw	5
  8154  08AA  0AE4               	incf	initLedPara@i,f
  8155  08AB  0264               	subwf	initLedPara@i,w
  8156  08AC  1C03               	skipc
  8157  08AD  2859               	goto	l3607
  8158                           
  8159                           ;led.c: 207: }
  8160                           ;led.c: 208: }
  8161                           ;led.c: 211: if ( gLedPara.aPara.autoPara.sunrise.start.hour > 23 )
  8162  08AE  3018               	movlw	24
  8163  08AF  0022               	movlb	2	; select bank2
  8164  08B0  0241               	subwf	(_gLedPara^(0+256)+33),w	;volatile
  8165  08B1  1803               	btfsc	3,0
  8166                           
  8167                           ;led.c: 212: {
  8168                           ;led.c: 213: gLedPara.aPara.autoPara.sunrise.start.hour = 0;
  8169  08B2  01C1               	clrf	(_gLedPara^(0+256)+33)	;volatile
  8170                           
  8171                           ;led.c: 214: }
  8172                           ;led.c: 215: if ( gLedPara.aPara.autoPara.sunrise.start.minute > 59 )
  8173  08B3  303C               	movlw	60
  8174  08B4  0242               	subwf	(_gLedPara^(0+256)+34),w	;volatile
  8175  08B5  1803               	btfsc	3,0
  8176                           
  8177                           ;led.c: 216: {
  8178                           ;led.c: 217: gLedPara.aPara.autoPara.sunrise.start.minute = 0;
  8179  08B6  01C2               	clrf	(_gLedPara^(0+256)+34)	;volatile
  8180                           
  8181                           ;led.c: 218: }
  8182                           ;led.c: 220: if ( gLedPara.aPara.autoPara.sunrise.end.hour > 23 )
  8183  08B7  3018               	movlw	24
  8184  08B8  0243               	subwf	(_gLedPara^(0+256)+35),w	;volatile
  8185  08B9  1803               	btfsc	3,0
  8186                           
  8187                           ;led.c: 221: {
  8188                           ;led.c: 222: gLedPara.aPara.autoPara.sunrise.end.hour = 0;
  8189  08BA  01C3               	clrf	(_gLedPara^(0+256)+35)	;volatile
  8190                           
  8191                           ;led.c: 223: }
  8192                           ;led.c: 224: if ( gLedPara.aPara.autoPara.sunrise.end.minute > 59 )
  8193  08BB  303C               	movlw	60
  8194  08BC  0244               	subwf	(_gLedPara^(0+256)+36),w	;volatile
  8195  08BD  1803               	btfsc	3,0
  8196                           
  8197                           ;led.c: 225: {
  8198                           ;led.c: 226: gLedPara.aPara.autoPara.sunrise.end.minute = 0;
  8199  08BE  01C4               	clrf	(_gLedPara^(0+256)+36)	;volatile
  8200                           
  8201                           ;led.c: 227: }
  8202                           ;led.c: 229: if ( gLedPara.aPara.autoPara.sunset.start.hour > 23 )
  8203  08BF  3018               	movlw	24
  8204  08C0  024A               	subwf	(_gLedPara^(0+256)+42),w	;volatile
  8205  08C1  1803               	btfsc	3,0
  8206                           
  8207                           ;led.c: 230: {
  8208                           ;led.c: 231: gLedPara.aPara.autoPara.sunset.start.hour = 0;
  8209  08C2  01CA               	clrf	(_gLedPara^(0+256)+42)	;volatile
  8210                           
  8211                           ;led.c: 232: }
  8212                           ;led.c: 233: if ( gLedPara.aPara.autoPara.sunset.start.minute > 59 )
  8213  08C3  303C               	movlw	60
  8214  08C4  024B               	subwf	(_gLedPara^(0+256)+43),w	;volatile
  8215  08C5  1803               	btfsc	3,0
  8216                           
  8217                           ;led.c: 234: {
  8218                           ;led.c: 235: gLedPara.aPara.autoPara.sunset.start.minute = 0;
  8219  08C6  01CB               	clrf	(_gLedPara^(0+256)+43)	;volatile
  8220                           
  8221                           ;led.c: 236: }
  8222                           ;led.c: 238: if ( gLedPara.aPara.autoPara.sunset.end.hour > 23 )
  8223  08C7  3018               	movlw	24
  8224  08C8  024C               	subwf	(_gLedPara^(0+256)+44),w	;volatile
  8225  08C9  1803               	btfsc	3,0
  8226                           
  8227                           ;led.c: 239: {
  8228                           ;led.c: 240: gLedPara.aPara.autoPara.sunset.end.hour = 0;
  8229  08CA  01CC               	clrf	(_gLedPara^(0+256)+44)	;volatile
  8230                           
  8231                           ;led.c: 241: }
  8232                           ;led.c: 242: if ( gLedPara.aPara.autoPara.sunset.end.minute > 59 )
  8233  08CB  303C               	movlw	60
  8234  08CC  024D               	subwf	(_gLedPara^(0+256)+45),w	;volatile
  8235  08CD  1803               	btfsc	3,0
  8236                           
  8237                           ;led.c: 243: {
  8238                           ;led.c: 244: gLedPara.aPara.autoPara.sunset.end.minute = 0;
  8239  08CE  01CD               	clrf	(_gLedPara^(0+256)+45)	;volatile
  8240                           
  8241                           ;led.c: 245: }
  8242                           ;led.c: 247: if ( gLedPara.tPara.nDayBrt > 1000 )
  8243  08CF  3003               	movlw	3
  8244  08D0  0254               	subwf	((_gLedPara+1)^(0+256)+51),w	;volatile
  8245  08D1  30E9               	movlw	233
  8246  08D2  1903               	skipnz
  8247  08D3  0253               	subwf	(_gLedPara^(0+256)+51),w	;volatile
  8248  08D4  1C03               	skipc
  8249  08D5  28DA               	goto	l3671
  8250                           
  8251                           ;led.c: 248: {
  8252                           ;led.c: 249: gLedPara.tPara.nDayBrt = 1000;
  8253  08D6  3187  274C  3188   	fcall	PL100	;call to abstracted procedure
  8254                           
  8255                           ;led.c: 250: }
  8256  08D9  28E4               	goto	l3675
  8257  08DA                     l3671:	
  8258                           
  8259                           ;led.c: 251: else if ( gLedPara.tPara.nDayBrt < 10 )
  8260  08DA  3000               	movlw	0
  8261  08DB  0254               	subwf	((_gLedPara+1)^(0+256)+51),w	;volatile
  8262  08DC  300A               	movlw	10
  8263  08DD  1903               	skipnz
  8264  08DE  0253               	subwf	(_gLedPara^(0+256)+51),w	;volatile
  8265  08DF  1803               	skipnc
  8266  08E0  28E4               	goto	l3675
  8267                           
  8268                           ;led.c: 252: {
  8269                           ;led.c: 253: gLedPara.tPara.nDayBrt = 10;
  8270  08E1  300A               	movlw	10
  8271  08E2  00D3               	movwf	(_gLedPara^(0+256)+51)	;volatile
  8272  08E3  01D4               	clrf	((_gLedPara+1)^(0+256)+51)	;volatile
  8273  08E4                     l3675:	
  8274                           
  8275                           ;led.c: 254: }
  8276                           ;led.c: 255: updateDayRiseStatus();
  8277  08E4  2308  3188         	fcall	_updateDayRiseStatus
  8278                           
  8279                           ;led.c: 256: if ( gLedPara.tPara.nNightBrt > 1000 )
  8280  08E6  3003               	movlw	3
  8281  08E7  0256               	subwf	((_gLedPara+1)^(0+256)+53),w	;volatile
  8282  08E8  30E9               	movlw	233
  8283  08E9  1903               	skipnz
  8284  08EA  0255               	subwf	(_gLedPara^(0+256)+53),w	;volatile
  8285  08EB  1C03               	skipc
  8286  08EC  28F1               	goto	l3681
  8287                           
  8288                           ;led.c: 257: {
  8289                           ;led.c: 258: gLedPara.tPara.nNightBrt = 1000;
  8290  08ED  3187  2751  3188   	fcall	PL102	;call to abstracted procedure
  8291                           
  8292                           ;led.c: 259: }
  8293  08F0  28FB               	goto	l3685
  8294  08F1                     l3681:	
  8295                           
  8296                           ;led.c: 260: else if ( gLedPara.tPara.nNightBrt < 10 )
  8297  08F1  3000               	movlw	0
  8298  08F2  0256               	subwf	((_gLedPara+1)^(0+256)+53),w	;volatile
  8299  08F3  300A               	movlw	10
  8300  08F4  1903               	skipnz
  8301  08F5  0255               	subwf	(_gLedPara^(0+256)+53),w	;volatile
  8302  08F6  1803               	skipnc
  8303  08F7  28FB               	goto	l3685
  8304                           
  8305                           ;led.c: 261: {
  8306                           ;led.c: 262: gLedPara.tPara.nNightBrt = 10;
  8307  08F8  300A               	movlw	10
  8308  08F9  00D5               	movwf	(_gLedPara^(0+256)+53)	;volatile
  8309  08FA  01D6               	clrf	((_gLedPara+1)^(0+256)+53)	;volatile
  8310  08FB                     l3685:	
  8311                           
  8312                           ;led.c: 263: }
  8313                           ;led.c: 264: updateNightRiseStatus();
  8314  08FB  2B21               	ljmp	l3155
  8315  08FC                     __end_of_initLedPara:	
  8316  08FC                     __ptext28:	
  8317 ;; *************** function _autoRun *****************
  8318 ;; Defined at:
  8319 ;;		line 61 in file "src/led.c"
  8320 ;; Parameters:    Size  Location     Type
  8321 ;;		None
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;  k               1   77[BANK0 ] unsigned char 
  8324 ;;  dt              4   65[BANK0 ] unsigned long 
  8325 ;;  st              2   75[BANK0 ] unsigned int 
  8326 ;;  et              2   71[BANK0 ] unsigned int 
  8327 ;;  duration        2   63[BANK0 ] unsigned int 
  8328 ;;  dbrt            1   62[BANK0 ] unsigned char 
  8329 ;;  val            20   34[BANK0 ] unsigned char [5][4]
  8330 ;;  tr              8   54[BANK0 ] unsigned int [4]
  8331 ;;  ct              2   73[BANK0 ] unsigned int 
  8332 ;;  i               1   78[BANK0 ] unsigned char 
  8333 ;;  j               1   70[BANK0 ] unsigned char 
  8334 ;;  sec             1   69[BANK0 ] unsigned char 
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  1    wreg      void 
  8337 ;; Registers used:
  8338 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8339 ;; Tracked objects:
  8340 ;;		On entry : 1F/2
  8341 ;;		On exit  : 1F/6
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Locals:         0      45       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8347 ;;      Totals:         0      54       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;Total ram usage:       54 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; Hardware stack levels required when called:    8
  8351 ;; This function calls:
  8352 ;;		___bmul
  8353 ;;		___lldiv
  8354 ;;		___lmul
  8355 ;;		___wmul
  8356 ;;		_updatePWM
  8357 ;; This function is called by:
  8358 ;;		_main
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           
  8363                           ;psect for function _autoRun
  8364  08FC                     _autoRun:	
  8365                           
  8366                           ;led.c: 63: unsigned char i, j;
  8367                           ;led.c: 64: unsigned int ct = gCurrentTime.datetime.hour * 60u + gCurrentTime.datetime.m
      +                          inute;
  8368                           
  8369                           ;incstack = 0
  8370                           ; Regs used in _autoRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8371  08FC  0021               	movlb	1	; select bank1
  8372  08FD  085C               	movf	(_gCurrentTime^(0+128)+4),w	;volatile
  8373  08FE  2348  3188         	fcall	PL12	;call to abstracted procedure
  8374  0900  224D  3188         	fcall	___wmul
  8375  0902  0824               	movf	?___wmul+1,w
  8376  0903  00EA               	movwf	autoRun@ct+1
  8377  0904  0823               	movf	?___wmul,w
  8378  0905  00E9               	movwf	autoRun@ct
  8379  0906  0021               	movlb	1	; select bank1
  8380  0907  085D               	movf	(_gCurrentTime^(0+128)+5),w	;volatile
  8381  0908  0020               	movlb	0	; select bank0
  8382  0909  07E9               	addwf	autoRun@ct,f
  8383  090A  1803               	skipnc
  8384  090B  0AEA               	incf	autoRun@ct+1,f
  8385                           
  8386                           ;led.c: 65: unsigned char sec = gCurrentTime.datetime.second;
  8387  090C  0021               	movlb	1	; select bank1
  8388  090D  085E               	movf	(_gCurrentTime^(0+128)+6),w	;volatile
  8389  090E  0020               	movlb	0	; select bank0
  8390  090F  00E5               	movwf	autoRun@sec
  8391                           
  8392                           ;led.c: 66: unsigned int tr[4];
  8393                           ;led.c: 67: tr[0] = gLedPara.aPara.autoPara.sunrise.start.hour * 60u + gLedPara.aPara.au
      +                          toPara.sunrise.start.minute;
  8394  0910  0022               	movlb	2	; select bank2
  8395  0911  0841               	movf	(_gLedPara^(0+256)+33),w	;volatile
  8396  0912  2348  3188         	fcall	PL12	;call to abstracted procedure
  8397  0914  224D  3188         	fcall	___wmul
  8398  0916  0824               	movf	?___wmul+1,w
  8399  0917  00D7               	movwf	autoRun@tr+1
  8400  0918  0823               	movf	?___wmul,w
  8401  0919  00D6               	movwf	autoRun@tr
  8402  091A  0022               	movlb	2	; select bank2
  8403  091B  0842               	movf	(_gLedPara^(0+256)+34),w	;volatile
  8404  091C  0020               	movlb	0	; select bank0
  8405  091D  07D6               	addwf	autoRun@tr,f
  8406  091E  1803               	skipnc
  8407  091F  0AD7               	incf	autoRun@tr+1,f
  8408                           
  8409                           ;led.c: 68: tr[1] = gLedPara.aPara.autoPara.sunrise.end.hour * 60u + gLedPara.aPara.auto
      +                          Para.sunrise.end.minute;
  8410  0920  0022               	movlb	2	; select bank2
  8411  0921  0844               	movf	(_gLedPara^(0+256)+36),w	;volatile
  8412  0922  0020               	movlb	0	; select bank0
  8413  0923  00B9               	movwf	??_autoRun
  8414  0924  01BA               	clrf	??_autoRun+1
  8415  0925  0022               	movlb	2	; select bank2
  8416  0926  0843               	movf	(_gLedPara^(0+256)+35),w	;volatile
  8417  0927  2348  3188         	fcall	PL12	;call to abstracted procedure
  8418  0929  224D  3188         	fcall	___wmul
  8419  092B  2367  3188         	fcall	PL20	;call to abstracted procedure
  8420  092D  00D8               	movwf	autoRun@tr+2
  8421  092E  083C               	movf	??_autoRun+3,w
  8422  092F  00D9               	movwf	autoRun@tr+3
  8423                           
  8424                           ;led.c: 69: tr[2] = gLedPara.aPara.autoPara.sunset.start.hour * 60u + gLedPara.aPara.aut
      +                          oPara.sunset.start.minute;
  8425  0930  0022               	movlb	2	; select bank2
  8426  0931  084B               	movf	(_gLedPara^(0+256)+43),w	;volatile
  8427  0932  0020               	movlb	0	; select bank0
  8428  0933  00B9               	movwf	??_autoRun
  8429  0934  01BA               	clrf	??_autoRun+1
  8430  0935  0022               	movlb	2	; select bank2
  8431  0936  084A               	movf	(_gLedPara^(0+256)+42),w	;volatile
  8432  0937  2348  3188         	fcall	PL12	;call to abstracted procedure
  8433  0939  224D  3188         	fcall	___wmul
  8434  093B  2367  3188         	fcall	PL20	;call to abstracted procedure
  8435  093D  00DA               	movwf	autoRun@tr+4
  8436  093E  083C               	movf	??_autoRun+3,w
  8437  093F  00DB               	movwf	autoRun@tr+5
  8438                           
  8439                           ;led.c: 70: tr[3] = gLedPara.aPara.autoPara.sunset.end.hour * 60u + gLedPara.aPara.autoP
      +                          ara.sunset.end.minute;
  8440  0940  0022               	movlb	2	; select bank2
  8441  0941  084D               	movf	(_gLedPara^(0+256)+45),w	;volatile
  8442  0942  0020               	movlb	0	; select bank0
  8443  0943  00B9               	movwf	??_autoRun
  8444  0944  01BA               	clrf	??_autoRun+1
  8445  0945  0022               	movlb	2	; select bank2
  8446  0946  084C               	movf	(_gLedPara^(0+256)+44),w	;volatile
  8447  0947  2348  3188         	fcall	PL12	;call to abstracted procedure
  8448  0949  224D  3188         	fcall	___wmul
  8449  094B  2367  3188         	fcall	PL20	;call to abstracted procedure
  8450  094D  00DC               	movwf	autoRun@tr+6
  8451  094E  083C               	movf	??_autoRun+3,w
  8452  094F  00DD               	movwf	autoRun@tr+7
  8453                           
  8454                           ;led.c: 71: unsigned char val[4][5];
  8455                           ;led.c: 72: for ( i = 0; i < 5; i++ )
  8456  0950  01EE               	clrf	autoRun@i
  8457  0951                     l4171:	
  8458                           
  8459                           ;led.c: 73: {
  8460                           ;led.c: 74: val[0][i] = gLedPara.aPara.autoPara.moonlight[i];
  8461  0951  086E               	movf	autoRun@i,w
  8462  0952  3E42               	addlw	(low (autoRun@val| 0))& (0+255)
  8463  0953  0086               	movwf	6
  8464  0954  0187               	clrf	7
  8465  0955  086E               	movf	autoRun@i,w
  8466  0956  3E4E               	addlw	(low ((_gLedPara| (0+256)+46)))& (0+255)
  8467  0957  23FD  3188         	fcall	PL66	;call to abstracted procedure
  8468                           
  8469                           ;led.c: 75: val[1][i] = gLedPara.aPara.autoPara.daylight[i];
  8470  0959  086E               	movf	autoRun@i,w
  8471  095A  3E05               	addlw	5
  8472                           
  8473                           ;led.c: 76: val[2][i] = gLedPara.aPara.autoPara.daylight[i];
  8474  095B  238A  3188         	fcall	PL44	;call to abstracted procedure
  8475  095D  3E0A               	addlw	10
  8476                           
  8477                           ;led.c: 77: val[3][i] = gLedPara.aPara.autoPara.moonlight[i];
  8478  095E  238A  3188         	fcall	PL44	;call to abstracted procedure
  8479  0960  3E0F               	addlw	15
  8480  0961  3E42               	addlw	(low (autoRun@val| 0))& (0+255)
  8481  0962  0086               	movwf	6
  8482  0963  086E               	movf	autoRun@i,w
  8483  0964  3E4E               	addlw	(low ((_gLedPara| (0+256)+46)))& (0+255)
  8484  0965  0084               	movwf	4
  8485  0966  0800               	movf	0,w
  8486  0967  0081               	movwf	1
  8487  0968  3005               	movlw	5
  8488  0969  0AEE               	incf	autoRun@i,f
  8489  096A  026E               	subwf	autoRun@i,w
  8490  096B  1C03               	skipc
  8491  096C  2951               	goto	l4171
  8492                           
  8493                           ;led.c: 78: }
  8494                           ;led.c: 79: for ( i = 0; i < 4; i++ )
  8495  096D  01EE               	clrf	autoRun@i
  8496  096E                     l4183:	
  8497                           
  8498                           ;led.c: 80: {
  8499                           ;led.c: 81: j = ( i + 1 ) % 4;
  8500  096E  086E               	movf	autoRun@i,w
  8501  096F  3E01               	addlw	1
  8502  0970  00E6               	movwf	autoRun@j
  8503  0971  3003               	movlw	3
  8504  0972  05E6               	andwf	autoRun@j,f
  8505                           
  8506                           ;led.c: 82: unsigned int st = tr[i];
  8507  0973  356E               	lslf	autoRun@i,w
  8508  0974  3E56               	addlw	(low (autoRun@tr| 0))& (0+255)
  8509  0975  0086               	movwf	6
  8510  0976  0187               	clrf	7
  8511  0977  3F40               	moviw [0]fsr1
  8512  0978  00EB               	movwf	autoRun@st
  8513  0979  3F41               	moviw [1]fsr1
  8514  097A  00EC               	movwf	autoRun@st+1
  8515                           
  8516                           ;led.c: 83: unsigned int et = tr[j];
  8517  097B  3566               	lslf	autoRun@j,w
  8518  097C  3E56               	addlw	(low (autoRun@tr| 0))& (0+255)
  8519  097D  0086               	movwf	6
  8520  097E  3F40               	moviw [0]fsr1
  8521  097F  00E7               	movwf	autoRun@et
  8522  0980  3F41               	moviw [1]fsr1
  8523  0981  00E8               	movwf	autoRun@et+1
  8524                           
  8525                           ;led.c: 84: unsigned int duration;
  8526                           ;led.c: 85: unsigned long dt;
  8527                           ;led.c: 86: unsigned char dbrt;
  8528                           ;led.c: 87: if ( et >= st )
  8529  0982  086C               	movf	autoRun@st+1,w
  8530  0983  0268               	subwf	autoRun@et+1,w
  8531  0984  1D03               	skipz
  8532  0985  2988               	goto	u4065
  8533  0986  086B               	movf	autoRun@st,w
  8534  0987  0267               	subwf	autoRun@et,w
  8535  0988                     u4065:	
  8536                           
  8537                           ;led.c: 88: {
  8538                           ;led.c: 89: if ( ct >= st && ct < et )
  8539  0988  086C               	movf	autoRun@st+1,w
  8540  0989  1C03               	skipc
  8541  098A  29A3               	goto	L4
  8542  098B  026A               	subwf	autoRun@ct+1,w
  8543  098C  1D03               	skipz
  8544  098D  2990               	goto	u4075
  8545  098E  086B               	movf	autoRun@st,w
  8546  098F  0269               	subwf	autoRun@ct,w
  8547  0990                     u4075:	
  8548  0990  1C03               	skipc
  8549  0991  2A46               	goto	l4235
  8550  0992  0868               	movf	autoRun@et+1,w
  8551  0993  026A               	subwf	autoRun@ct+1,w
  8552  0994  1D03               	skipz
  8553  0995  2998               	goto	u4085
  8554  0996  0867               	movf	autoRun@et,w
  8555  0997  0269               	subwf	autoRun@ct,w
  8556  0998                     u4085:	
  8557  0998  1803               	skipnc
  8558  0999  2A46               	goto	l4235
  8559                           
  8560                           ;led.c: 90: {
  8561                           ;led.c: 91: duration = et - st;
  8562  099A  0868               	movf	autoRun@et+1,w
  8563  099B  239C  3188         	fcall	PL54	;call to abstracted procedure
  8564                           
  8565                           ;led.c: 92: dt = ( ct - st ) * 60ul + sec;
  8566  099D  086B               	movf	autoRun@st,w
  8567  099E                     L6:	
  8568  099E  0269               	subwf	autoRun@ct,w
  8569  099F  00A0               	movwf	___lmul@multiplier
  8570  09A0  086C               	movf	autoRun@st+1,w
  8571  09A1  3B6A               	subwfb	autoRun@ct+1,w
  8572  09A2  29CC               	goto	L3
  8573  09A3                     L4:	
  8574                           ;led.c: 99: else
  8575                           ;led.c: 100: {
  8576                           ;led.c: 101: if ( ct >= st || ct < et )
  8577                           
  8578                           ;led.c: 93: }
  8579                           
  8580  09A3  026A               	subwf	autoRun@ct+1,w
  8581  09A4  1D03               	skipz
  8582  09A5  29A8               	goto	u4095
  8583  09A6  086B               	movf	autoRun@st,w
  8584  09A7  0269               	subwf	autoRun@ct,w
  8585  09A8                     u4095:	
  8586  09A8  0868               	movf	autoRun@et+1,w
  8587  09A9  1803               	skipnc
  8588  09AA  29B3               	goto	L5
  8589  09AB  026A               	subwf	autoRun@ct+1,w
  8590  09AC  1D03               	skipz
  8591  09AD  29B0               	goto	u4105
  8592  09AE  0867               	movf	autoRun@et,w
  8593  09AF  0269               	subwf	autoRun@ct,w
  8594  09B0                     u4105:	
  8595  09B0  1803               	skipnc
  8596  09B1  2A46               	goto	l4235
  8597                           
  8598                           ;led.c: 102: {
  8599                           ;led.c: 103: duration = 1440u - st + et;
  8600  09B2  0868               	movf	autoRun@et+1,w
  8601  09B3                     L5:	
  8602  09B3  239C  3188         	fcall	PL54	;call to abstracted procedure
  8603  09B5  30A0               	movlw	160
  8604  09B6  07DF               	addwf	autoRun@duration,f
  8605  09B7  3005               	movlw	5
  8606  09B8  3DE0               	addwfc	autoRun@duration+1,f
  8607                           
  8608                           ;led.c: 104: if ( ct >= st )
  8609  09B9  086C               	movf	autoRun@st+1,w
  8610  09BA  026A               	subwf	autoRun@ct+1,w
  8611  09BB  1D03               	skipz
  8612  09BC  29BF               	goto	u4115
  8613  09BD  086B               	movf	autoRun@st,w
  8614  09BE  0269               	subwf	autoRun@ct,w
  8615  09BF                     u4115:	
  8616                           
  8617                           ;led.c: 108: else
  8618                           ;led.c: 109: {
  8619                           ;led.c: 110: dt = ( 1440u - st + ct ) * 60ul + sec;
  8620  09BF  086B               	movf	autoRun@st,w
  8621  09C0  1803               	btfsc	3,0
  8622  09C1  299E               	goto	L6
  8623  09C2  0269               	subwf	autoRun@ct,w
  8624  09C3  00B9               	movwf	??_autoRun
  8625  09C4  086C               	movf	autoRun@st+1,w
  8626  09C5  3B6A               	subwfb	autoRun@ct+1,w
  8627  09C6  00BA               	movwf	??_autoRun+1
  8628  09C7  0839               	movf	??_autoRun,w
  8629  09C8  3EA0               	addlw	160
  8630  09C9  00A0               	movwf	___lmul@multiplier
  8631  09CA  3005               	movlw	5
  8632  09CB  3D3A               	addwfc	??_autoRun+1,w
  8633  09CC                     L3:	
  8634  09CC  00A1               	movwf	___lmul@multiplier+1
  8635  09CD  303C               	movlw	60
  8636  09CE  01A2               	clrf	___lmul@multiplier+2
  8637  09CF  01A3               	clrf	___lmul@multiplier+3
  8638  09D0  00A4               	movwf	___lmul@multiplicand
  8639  09D1  01A5               	clrf	___lmul@multiplicand+1
  8640  09D2  01A6               	clrf	___lmul@multiplicand+2
  8641  09D3  01A7               	clrf	___lmul@multiplicand+3
  8642  09D4  226E  3188         	fcall	___lmul
  8643  09D6  0823               	movf	?___lmul+3,w
  8644  09D7  00E4               	movwf	autoRun@dt+3
  8645  09D8  0822               	movf	?___lmul+2,w
  8646  09D9  00E3               	movwf	autoRun@dt+2
  8647  09DA  0821               	movf	?___lmul+1,w
  8648  09DB  00E2               	movwf	autoRun@dt+1
  8649  09DC  0820               	movf	?___lmul,w
  8650  09DD  00E1               	movwf	autoRun@dt
  8651  09DE  0865               	movf	autoRun@sec,w
  8652  09DF  07E1               	addwf	autoRun@dt,f
  8653  09E0  3001               	movlw	1
  8654  09E1  1803               	skipnc
  8655  09E2  07E2               	addwf	autoRun@dt+1,f
  8656  09E3  1803               	skipnc
  8657  09E4  07E3               	addwf	autoRun@dt+2,f
  8658  09E5  1803               	skipnc
  8659  09E6  07E4               	addwf	autoRun@dt+3,f
  8660                           
  8661                           ;led.c: 116: }
  8662                           ;led.c: 117: }
  8663                           ;led.c: 118: for ( unsigned char k = 0; k < 5; k++ )
  8664  09E7  01ED               	clrf	autoRun@k
  8665  09E8                     l4221:	
  8666                           
  8667                           ;led.c: 119: {
  8668                           ;led.c: 120: if ( val[j][k] >= val[i][k] )
  8669  09E8  3005               	movlw	5
  8670  09E9  00A0               	movwf	___bmul@multiplicand
  8671  09EA  0866               	movf	autoRun@j,w
  8672  09EB  2262  3188         	fcall	___bmul
  8673  09ED  236F  3188         	fcall	PL22	;call to abstracted procedure
  8674  09EF  086E               	movf	autoRun@i,w
  8675  09F0  2262  3188         	fcall	___bmul
  8676  09F2  2377  3188         	fcall	PL24	;call to abstracted procedure
  8677                           
  8678                           ;led.c: 121: {
  8679                           ;led.c: 122: dbrt = val[j][k] - val[i][k];
  8680  09F4  3005               	movlw	5
  8681  09F5  00A0               	movwf	___bmul@multiplicand
  8682  09F6  1C03               	skipc
  8683  09F7  2A1C               	goto	L7
  8684  09F8  0866               	movf	autoRun@j,w
  8685  09F9  2262  3188         	fcall	___bmul
  8686  09FB  236F  3188         	fcall	PL22	;call to abstracted procedure
  8687  09FD  086E               	movf	autoRun@i,w
  8688  09FE  2262  3188         	fcall	___bmul
  8689  0A00  2377  3188         	fcall	PL24	;call to abstracted procedure
  8690                           
  8691                           ;led.c: 123: gLedRunPara.nCurrentBrt[k] = val[i][k] * 10u + dbrt * dt / ( duration * 6u 
      +                          );
  8692  0A02  23AA  3188         	fcall	PL98	;call to abstracted procedure
  8693  0A04  2262  3188         	fcall	___bmul
  8694  0A06  235B  3188         	fcall	PL18	;call to abstracted procedure
  8695  0A08  224D  3188         	fcall	___wmul
  8696  0A0A  234F  3188         	fcall	PL16	;call to abstracted procedure
  8697  0A0C  224D  3188         	fcall	___wmul
  8698  0A0E  232C  3188         	fcall	PL2	;call to abstracted procedure
  8699  0A10  226E  3188         	fcall	___lmul
  8700  0A12  2393  3188         	fcall	PL52	;call to abstracted procedure
  8701  0A14  2293  3188         	fcall	___lldiv
  8702  0A16  082C               	movf	?___lldiv,w
  8703  0A17  073A               	addwf	??_autoRun+1,w
  8704  0A18  00C0               	movwf	??_autoRun+7
  8705  0A19  082D               	movf	?___lldiv+1,w
  8706  0A1A  3D3B               	addwfc	??_autoRun+2,w
  8707  0A1B  2A3F               	goto	L15
  8708  0A1C                     L7:	
  8709                           ;led.c: 125: else
  8710                           ;led.c: 126: {
  8711                           ;led.c: 127: dbrt = val[i][k] - val[j][k];
  8712                           
  8713                           ;led.c: 124: }
  8714                           
  8715  0A1C  086E               	movf	autoRun@i,w
  8716  0A1D  2262  3188         	fcall	___bmul
  8717  0A1F  236F  3188         	fcall	PL22	;call to abstracted procedure
  8718  0A21  0866               	movf	autoRun@j,w
  8719  0A22  2262  3188         	fcall	___bmul
  8720  0A24  2377  3188         	fcall	PL24	;call to abstracted procedure
  8721                           
  8722                           ;led.c: 128: gLedRunPara.nCurrentBrt[k] = val[i][k] * 10u - dbrt * dt / ( duration * 6u 
      +                          );
  8723  0A26  23AA  3188         	fcall	PL98	;call to abstracted procedure
  8724  0A28  2262  3188         	fcall	___bmul
  8725  0A2A  235B  3188         	fcall	PL18	;call to abstracted procedure
  8726  0A2C  224D  3188         	fcall	___wmul
  8727  0A2E  234F  3188         	fcall	PL16	;call to abstracted procedure
  8728  0A30  224D  3188         	fcall	___wmul
  8729  0A32  232C  3188         	fcall	PL2	;call to abstracted procedure
  8730  0A34  226E  3188         	fcall	___lmul
  8731  0A36  2393  3188         	fcall	PL52	;call to abstracted procedure
  8732  0A38  2293  3188         	fcall	___lldiv
  8733  0A3A  082C               	movf	?___lldiv,w
  8734  0A3B  023A               	subwf	??_autoRun+1,w
  8735  0A3C  00C0               	movwf	??_autoRun+7
  8736  0A3D  082D               	movf	?___lldiv+1,w
  8737  0A3E  3B3B               	subwfb	??_autoRun+2,w
  8738  0A3F                     L15:	
  8739  0A3F  237F  3188         	fcall	PL26	;call to abstracted procedure
  8740  0A41  3005               	movlw	5
  8741  0A42  0AED               	incf	autoRun@k,f
  8742  0A43  026D               	subwf	autoRun@k,w
  8743  0A44  1C03               	skipc
  8744  0A45  29E8               	goto	l4221
  8745  0A46                     l4235:	
  8746  0A46  3004               	movlw	4
  8747  0A47  0AEE               	incf	autoRun@i,f
  8748  0A48  026E               	subwf	autoRun@i,w
  8749  0A49  1C03               	skipc
  8750  0A4A  296E               	goto	l4183
  8751                           
  8752                           ;led.c: 129: }
  8753                           ;led.c: 130: }
  8754                           ;led.c: 131: }
  8755                           ;led.c: 132: updatePWM();
  8756  0A4B  3184  2CC6         	ljmp	l2991
  8757  0A4D                     __end_of_autoRun:	
  8758  0A4D                     __ptext29:	
  8759 ;; *************** function ___wmul *****************
  8760 ;; Defined at:
  8761 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
  8762 ;; Parameters:    Size  Location     Type
  8763 ;;  multiplier      2    3[BANK0 ] unsigned int 
  8764 ;;  multiplicand    2    5[BANK0 ] unsigned int 
  8765 ;; Auto vars:     Size  Location     Type
  8766 ;;  product         2    7[BANK0 ] unsigned int 
  8767 ;; Return value:  Size  Location     Type
  8768 ;;                  2    3[BANK0 ] unsigned int 
  8769 ;; Registers used:
  8770 ;;		wreg, status,2, status,0
  8771 ;; Tracked objects:
  8772 ;;		On entry : 1F/0
  8773 ;;		On exit  : 1F/0
  8774 ;;		Unchanged: 0/0
  8775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8776 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8777 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8780 ;;Total ram usage:        6 bytes
  8781 ;; Hardware stack levels used:    1
  8782 ;; Hardware stack levels required when called:    6
  8783 ;; This function calls:
  8784 ;;		Nothing
  8785 ;; This function is called by:
  8786 ;;		_autoRun
  8787 ;; This function uses a non-reentrant model
  8788 ;;
  8789                           
  8790                           
  8791                           ;psect for function ___wmul
  8792  0A4D                     ___wmul:	
  8793                           
  8794                           ;incstack = 0
  8795                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8796  0A4D  01A7               	clrf	___wmul@product
  8797  0A4E  01A8               	clrf	___wmul@product+1
  8798  0A4F                     l3739:	
  8799  0A4F  1C23               	btfss	___wmul@multiplier,0
  8800  0A50  2A55               	goto	l3743
  8801  0A51  0825               	movf	___wmul@multiplicand,w
  8802  0A52  07A7               	addwf	___wmul@product,f
  8803  0A53  0826               	movf	___wmul@multiplicand+1,w
  8804  0A54  3DA8               	addwfc	___wmul@product+1,f
  8805  0A55                     l3743:	
  8806  0A55  35A5               	lslf	___wmul@multiplicand,f
  8807  0A56  0DA6               	rlf	___wmul@multiplicand+1,f
  8808  0A57  36A4               	lsrf	___wmul@multiplier+1,f
  8809  0A58  0CA3               	rrf	___wmul@multiplier,f
  8810  0A59  0823               	movf	___wmul@multiplier,w
  8811  0A5A  0424               	iorwf	___wmul@multiplier+1,w
  8812  0A5B  1D03               	btfss	3,2
  8813  0A5C  2A4F               	goto	l3739
  8814  0A5D  0828               	movf	___wmul@product+1,w
  8815  0A5E  00A4               	movwf	?___wmul+1
  8816  0A5F  0827               	movf	___wmul@product,w
  8817  0A60  00A3               	movwf	?___wmul
  8818  0A61  0008               	return
  8819  0A62                     __end_of___wmul:	
  8820  0A62                     __ptext60:	
  8821 ;; *************** function ___bmul *****************
  8822 ;; Defined at:
  8823 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul8.c"
  8824 ;; Parameters:    Size  Location     Type
  8825 ;;  multiplier      1    wreg     unsigned char 
  8826 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  8827 ;; Auto vars:     Size  Location     Type
  8828 ;;  multiplier      1    2[BANK0 ] unsigned char 
  8829 ;;  product         1    1[BANK0 ] unsigned char 
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  1    wreg      unsigned char 
  8832 ;; Registers used:
  8833 ;;		wreg, status,2, status,0
  8834 ;; Tracked objects:
  8835 ;;		On entry : 1F/0
  8836 ;;		On exit  : 1F/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8839 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8840 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8842 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;Total ram usage:        3 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; Hardware stack levels required when called:    6
  8846 ;; This function calls:
  8847 ;;		Nothing
  8848 ;; This function is called by:
  8849 ;;		_DecodeDATA
  8850 ;;		_autoRun
  8851 ;;		_initLedPara
  8852 ;; This function uses a non-reentrant model
  8853 ;;
  8854                           
  8855                           
  8856                           ;psect for function ___bmul
  8857  0A62                     ___bmul:	
  8858                           
  8859                           ;incstack = 0
  8860                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8861                           ;___bmul@multiplier stored from wreg
  8862  0A62  00A2               	movwf	___bmul@multiplier
  8863  0A63  01A1               	clrf	___bmul@product
  8864  0A64                     l3165:	
  8865  0A64  0820               	movf	___bmul@multiplicand,w
  8866  0A65  1822               	btfsc	___bmul@multiplier,0
  8867  0A66  07A1               	addwf	___bmul@product,f
  8868  0A67  35A0               	lslf	___bmul@multiplicand,f
  8869  0A68  36A2               	lsrf	___bmul@multiplier,f
  8870  0A69  0822               	movf	___bmul@multiplier,w
  8871  0A6A  1D03               	btfss	3,2
  8872  0A6B  2A64               	goto	l3165
  8873  0A6C  0821               	movf	___bmul@product,w
  8874  0A6D  0008               	return
  8875  0A6E                     __end_of___bmul:	
  8876  0A6E                     __ptext30:	
  8877 ;; *************** function ___lmul *****************
  8878 ;; Defined at:
  8879 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul32.c"
  8880 ;; Parameters:    Size  Location     Type
  8881 ;;  multiplier      4    0[BANK0 ] unsigned long 
  8882 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;  product         4    8[BANK0 ] unsigned long 
  8885 ;; Return value:  Size  Location     Type
  8886 ;;                  4    0[BANK0 ] unsigned long 
  8887 ;; Registers used:
  8888 ;;		wreg, status,2, status,0
  8889 ;; Tracked objects:
  8890 ;;		On entry : 1F/0
  8891 ;;		On exit  : 1F/0
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8894 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;Total ram usage:       12 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    6
  8901 ;; This function calls:
  8902 ;;		Nothing
  8903 ;; This function is called by:
  8904 ;;		_autoRun
  8905 ;; This function uses a non-reentrant model
  8906 ;;
  8907                           
  8908                           
  8909                           ;psect for function ___lmul
  8910  0A6E                     ___lmul:	
  8911                           
  8912                           ;incstack = 0
  8913                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  8914  0A6E  01A8               	clrf	___lmul@product
  8915  0A6F  01A9               	clrf	___lmul@product+1
  8916  0A70  01AA               	clrf	___lmul@product+2
  8917  0A71  01AB               	clrf	___lmul@product+3
  8918  0A72                     l982:	
  8919  0A72  1C20               	btfss	___lmul@multiplier,0
  8920  0A73  2A7C               	goto	l3757
  8921  0A74  0824               	movf	___lmul@multiplicand,w
  8922  0A75  07A8               	addwf	___lmul@product,f
  8923  0A76  0825               	movf	___lmul@multiplicand+1,w
  8924  0A77  3DA9               	addwfc	___lmul@product+1,f
  8925  0A78  0826               	movf	___lmul@multiplicand+2,w
  8926  0A79  3DAA               	addwfc	___lmul@product+2,f
  8927  0A7A  0827               	movf	___lmul@multiplicand+3,w
  8928  0A7B  3DAB               	addwfc	___lmul@product+3,f
  8929  0A7C                     l3757:	
  8930  0A7C  35A4               	lslf	___lmul@multiplicand,f
  8931  0A7D  0DA5               	rlf	___lmul@multiplicand+1,f
  8932  0A7E  0DA6               	rlf	___lmul@multiplicand+2,f
  8933  0A7F  0DA7               	rlf	___lmul@multiplicand+3,f
  8934  0A80  36A3               	lsrf	___lmul@multiplier+3,f
  8935  0A81  0CA2               	rrf	___lmul@multiplier+2,f
  8936  0A82  0CA1               	rrf	___lmul@multiplier+1,f
  8937  0A83  0CA0               	rrf	___lmul@multiplier,f
  8938  0A84  0823               	movf	___lmul@multiplier+3,w
  8939  0A85  0422               	iorwf	___lmul@multiplier+2,w
  8940  0A86  0421               	iorwf	___lmul@multiplier+1,w
  8941  0A87  0420               	iorwf	___lmul@multiplier,w
  8942  0A88  1D03               	skipz
  8943  0A89  2A72               	goto	l982
  8944  0A8A  082B               	movf	___lmul@product+3,w
  8945  0A8B  00A3               	movwf	?___lmul+3
  8946  0A8C  082A               	movf	___lmul@product+2,w
  8947  0A8D  00A2               	movwf	?___lmul+2
  8948  0A8E  0829               	movf	___lmul@product+1,w
  8949  0A8F  00A1               	movwf	?___lmul+1
  8950  0A90  0828               	movf	___lmul@product,w
  8951  0A91  00A0               	movwf	?___lmul
  8952  0A92  0008               	return
  8953  0A93                     __end_of___lmul:	
  8954  0A93                     __ptext31:	
  8955 ;; *************** function ___lldiv *****************
  8956 ;; Defined at:
  8957 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\lldiv.c"
  8958 ;; Parameters:    Size  Location     Type
  8959 ;;  divisor         4   12[BANK0 ] unsigned long 
  8960 ;;  dividend        4   16[BANK0 ] unsigned long 
  8961 ;; Auto vars:     Size  Location     Type
  8962 ;;  quotient        4   20[BANK0 ] unsigned long 
  8963 ;;  counter         1   24[BANK0 ] unsigned char 
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  4   12[BANK0 ] unsigned long 
  8966 ;; Registers used:
  8967 ;;		wreg, status,2, status,0
  8968 ;; Tracked objects:
  8969 ;;		On entry : 1F/0
  8970 ;;		On exit  : 1F/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8973 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;Total ram usage:       13 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    6
  8980 ;; This function calls:
  8981 ;;		Nothing
  8982 ;; This function is called by:
  8983 ;;		_autoRun
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           
  8988                           ;psect for function ___lldiv
  8989  0A93                     ___lldiv:	
  8990                           
  8991                           ;incstack = 0
  8992                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8993  0A93  01B4               	clrf	___lldiv@quotient
  8994  0A94  01B5               	clrf	___lldiv@quotient+1
  8995  0A95  01B6               	clrf	___lldiv@quotient+2
  8996  0A96  01B7               	clrf	___lldiv@quotient+3
  8997  0A97  082F               	movf	___lldiv@divisor+3,w
  8998  0A98  042E               	iorwf	___lldiv@divisor+2,w
  8999  0A99  042D               	iorwf	___lldiv@divisor+1,w
  9000  0A9A  042C               	iorwf	___lldiv@divisor,w
  9001  0A9B  1903               	skipnz
  9002  0A9C  2AC9               	goto	l3787
  9003  0A9D  01B8               	clrf	___lldiv@counter
  9004  0A9E                     L8:	
  9005  0A9E  0AB8               	incf	___lldiv@counter,f
  9006  0A9F  1BAF               	btfsc	___lldiv@divisor+3,7
  9007  0AA0  2AA6               	goto	l3775
  9008  0AA1  35AC               	lslf	___lldiv@divisor,f
  9009  0AA2  0DAD               	rlf	___lldiv@divisor+1,f
  9010  0AA3  0DAE               	rlf	___lldiv@divisor+2,f
  9011  0AA4  0DAF               	rlf	___lldiv@divisor+3,f
  9012  0AA5  2A9E               	goto	L8
  9013  0AA6                     l3775:	
  9014  0AA6  35B4               	lslf	___lldiv@quotient,f
  9015  0AA7  0DB5               	rlf	___lldiv@quotient+1,f
  9016  0AA8  0DB6               	rlf	___lldiv@quotient+2,f
  9017  0AA9  0DB7               	rlf	___lldiv@quotient+3,f
  9018  0AAA  082F               	movf	___lldiv@divisor+3,w
  9019  0AAB  0233               	subwf	___lldiv@dividend+3,w
  9020  0AAC  1D03               	skipz
  9021  0AAD  2AB8               	goto	u3305
  9022  0AAE  082E               	movf	___lldiv@divisor+2,w
  9023  0AAF  0232               	subwf	___lldiv@dividend+2,w
  9024  0AB0  1D03               	skipz
  9025  0AB1  2AB8               	goto	u3305
  9026  0AB2  082D               	movf	___lldiv@divisor+1,w
  9027  0AB3  0231               	subwf	___lldiv@dividend+1,w
  9028  0AB4  1D03               	skipz
  9029  0AB5  2AB8               	goto	u3305
  9030  0AB6  082C               	movf	___lldiv@divisor,w
  9031  0AB7  0230               	subwf	___lldiv@dividend,w
  9032  0AB8                     u3305:	
  9033  0AB8  1C03               	skipc
  9034  0AB9  2AC3               	goto	l3783
  9035  0ABA  082C               	movf	___lldiv@divisor,w
  9036  0ABB  02B0               	subwf	___lldiv@dividend,f
  9037  0ABC  082D               	movf	___lldiv@divisor+1,w
  9038  0ABD  3BB1               	subwfb	___lldiv@dividend+1,f
  9039  0ABE  082E               	movf	___lldiv@divisor+2,w
  9040  0ABF  3BB2               	subwfb	___lldiv@dividend+2,f
  9041  0AC0  082F               	movf	___lldiv@divisor+3,w
  9042  0AC1  3BB3               	subwfb	___lldiv@dividend+3,f
  9043  0AC2  1434               	bsf	___lldiv@quotient,0
  9044  0AC3                     l3783:	
  9045  0AC3  36AF               	lsrf	___lldiv@divisor+3,f
  9046  0AC4  0CAE               	rrf	___lldiv@divisor+2,f
  9047  0AC5  0CAD               	rrf	___lldiv@divisor+1,f
  9048  0AC6  0CAC               	rrf	___lldiv@divisor,f
  9049  0AC7  0BB8               	decfsz	___lldiv@counter,f
  9050  0AC8  2AA6               	goto	l3775
  9051  0AC9                     l3787:	
  9052  0AC9  0837               	movf	___lldiv@quotient+3,w
  9053  0ACA  00AF               	movwf	?___lldiv+3
  9054  0ACB  0836               	movf	___lldiv@quotient+2,w
  9055  0ACC  00AE               	movwf	?___lldiv+2
  9056  0ACD  0835               	movf	___lldiv@quotient+1,w
  9057  0ACE  00AD               	movwf	?___lldiv+1
  9058  0ACF  0834               	movf	___lldiv@quotient,w
  9059  0AD0  00AC               	movwf	?___lldiv
  9060  0AD1  0008               	return
  9061  0AD2                     __end_of___lldiv:	
  9062  0AD2                     __ptext12:	
  9063 ;; *************** function _readLedPara *****************
  9064 ;; Defined at:
  9065 ;;		line 101 in file "src/eeprom.c"
  9066 ;; Parameters:    Size  Location     Type
  9067 ;;  addr            1    wreg     unsigned char 
  9068 ;; Auto vars:     Size  Location     Type
  9069 ;;  addr            1    0[BANK1 ] unsigned char 
  9070 ;;  para           55    1[BANK1 ] struct .
  9071 ;; Return value:  Size  Location     Type
  9072 ;;                  55    9[BANK0 ] struct .
  9073 ;; Registers used:
  9074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9075 ;; Tracked objects:
  9076 ;;		On entry : 1F/2
  9077 ;;		On exit  : 1F/0
  9078 ;;		Unchanged: 0/0
  9079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9080 ;;      Params:         0      55       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;      Locals:         0       0      56       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9083 ;;      Totals:         0      56      56       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;Total ram usage:      112 bytes
  9085 ;; Hardware stack levels used:    1
  9086 ;; Hardware stack levels required when called:    9
  9087 ;; This function calls:
  9088 ;;		_readBuffer
  9089 ;; This function is called by:
  9090 ;;		_initLedPara
  9091 ;; This function uses a non-reentrant model
  9092 ;;
  9093                           
  9094                           
  9095                           ;psect for function _readLedPara
  9096  0AD2                     _readLedPara:	
  9097                           
  9098                           ;incstack = 0
  9099                           ; Regs used in _readLedPara: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9100                           ;readLedPara@addr stored from wreg
  9101  0AD2  0021               	movlb	1	; select bank1
  9102  0AD3  00A0               	movwf	readLedPara@addr^(0+128)
  9103                           
  9104                           ;eeprom.c: 103: LedPara_t para;
  9105                           ;eeprom.c: 104: readBuffer(addr, (unsigned char*)&para, sizeof(para));
  9106  0AD4  30A1               	movlw	(low (readLedPara@para| 0))& (0+255)
  9107  0AD5  0020               	movlb	0	; select bank0
  9108  0AD6  00A4               	movwf	readBuffer@buf
  9109  0AD7  3037               	movlw	55
  9110  0AD8  00A5               	movwf	readBuffer@len
  9111  0AD9  0021               	movlb	1	; select bank1
  9112  0ADA  0820               	movf	readLedPara@addr^(0+128),w
  9113  0ADB  22EC  3188         	fcall	_readBuffer
  9114                           
  9115                           ;eeprom.c: 105: return para;
  9116  0ADD  30A1               	movlw	low readLedPara@para
  9117  0ADE  0086               	movwf	6
  9118  0ADF  3000               	movlw	high readLedPara@para
  9119  0AE0  0087               	movwf	7
  9120  0AE1  3029               	movlw	low ?_readLedPara
  9121  0AE2  0084               	movwf	4
  9122  0AE3  3000               	movlw	high ?_readLedPara
  9123  0AE4  0085               	movwf	5
  9124  0AE5  3037               	movlw	55
  9125  0AE6  00E0               	movwf	??_readLedPara
  9126  0AE7                     u2490:	
  9127  0AE7  0016               	moviw fsr1++
  9128  0AE8  001A               	movwi fsr0++
  9129  0AE9  0BE0               	decfsz	??_readLedPara,f
  9130  0AEA  2AE7               	goto	u2490
  9131  0AEB  0008               	return
  9132  0AEC                     __end_of_readLedPara:	
  9133  0AEC                     __ptext13:	
  9134 ;; *************** function _readBuffer *****************
  9135 ;; Defined at:
  9136 ;;		line 78 in file "src/eeprom.c"
  9137 ;; Parameters:    Size  Location     Type
  9138 ;;  addr            1    wreg     unsigned char 
  9139 ;;  buf             1    4[BANK0 ] PTR unsigned char 
  9140 ;;		 -> readLedPara@para(55), 
  9141 ;;  len             1    5[BANK0 ] unsigned char 
  9142 ;; Auto vars:     Size  Location     Type
  9143 ;;  addr            1    7[BANK0 ] unsigned char 
  9144 ;;  i               1    8[BANK0 ] unsigned char 
  9145 ;; Return value:  Size  Location     Type
  9146 ;;                  1    wreg      void 
  9147 ;; Registers used:
  9148 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9149 ;; Tracked objects:
  9150 ;;		On entry : 1F/1
  9151 ;;		On exit  : 1F/0
  9152 ;;		Unchanged: 0/0
  9153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9154 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9156 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9157 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9158 ;;Total ram usage:        5 bytes
  9159 ;; Hardware stack levels used:    1
  9160 ;; Hardware stack levels required when called:    8
  9161 ;; This function calls:
  9162 ;;		_readByte
  9163 ;; This function is called by:
  9164 ;;		_readLedPara
  9165 ;; This function uses a non-reentrant model
  9166 ;;
  9167                           
  9168                           
  9169                           ;psect for function _readBuffer
  9170  0AEC                     _readBuffer:	
  9171                           
  9172                           ;incstack = 0
  9173                           ; Regs used in _readBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9174                           ;readBuffer@addr stored from wreg
  9175  0AEC  0020               	movlb	0	; select bank0
  9176  0AED  00A7               	movwf	readBuffer@addr
  9177                           
  9178                           ;eeprom.c: 80: for (unsigned char i = 0; i < len; i++)
  9179  0AEE  01A8               	clrf	readBuffer@i
  9180  0AEF                     l3001:	
  9181  0AEF  0825               	movf	readBuffer@len,w
  9182  0AF0  0228               	subwf	readBuffer@i,w
  9183  0AF1  1803               	btfsc	3,0
  9184  0AF2  0008               	return
  9185                           
  9186                           ;eeprom.c: 81: {
  9187                           ;eeprom.c: 82: *(buf+i) = readByte(addr+i);
  9188  0AF3  0828               	movf	readBuffer@i,w
  9189  0AF4  0724               	addwf	readBuffer@buf,w
  9190  0AF5  00A6               	movwf	??_readBuffer
  9191  0AF6  0086               	movwf	6
  9192  0AF7  0187               	clrf	7
  9193  0AF8  0827               	movf	readBuffer@addr,w
  9194  0AF9  0728               	addwf	readBuffer@i,w
  9195  0AFA  22FF  3188         	fcall	_readByte
  9196  0AFC  0081               	movwf	1
  9197  0AFD  0AA8               	incf	readBuffer@i,f
  9198  0AFE  2AEF               	goto	l3001
  9199  0AFF                     __end_of_readBuffer:	
  9200  0AFF                     __ptext14:	
  9201 ;; *************** function _readByte *****************
  9202 ;; Defined at:
  9203 ;;		line 52 in file "src/eeprom.c"
  9204 ;; Parameters:    Size  Location     Type
  9205 ;;  addr            1    wreg     unsigned char 
  9206 ;; Auto vars:     Size  Location     Type
  9207 ;;  addr            1    2[BANK0 ] unsigned char 
  9208 ;;  result          1    3[BANK0 ] unsigned char 
  9209 ;; Return value:  Size  Location     Type
  9210 ;;                  1    wreg      unsigned char 
  9211 ;; Registers used:
  9212 ;;		wreg, pclath, cstack
  9213 ;; Tracked objects:
  9214 ;;		On entry : 1F/0
  9215 ;;		On exit  : 1F/0
  9216 ;;		Unchanged: 0/0
  9217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;Total ram usage:        2 bytes
  9223 ;; Hardware stack levels used:    1
  9224 ;; Hardware stack levels required when called:    7
  9225 ;; This function calls:
  9226 ;;		_DATAEE_ReadByte
  9227 ;; This function is called by:
  9228 ;;		_readBuffer
  9229 ;; This function uses a non-reentrant model
  9230 ;;
  9231                           
  9232                           
  9233                           ;psect for function _readByte
  9234  0AFF                     _readByte:	
  9235                           
  9236                           ;incstack = 0
  9237                           ; Regs used in _readByte: [wreg+pclath+cstack]
  9238                           ;readByte@addr stored from wreg
  9239  0AFF  00A2               	movwf	readByte@addr
  9240                           
  9241                           ;eeprom.c: 54: unsigned char result = DATAEE_ReadByte(0x7000 + addr);
  9242  0B00  00A0               	movwf	DATAEE_ReadByte@bAdd
  9243  0B01  3070               	movlw	112
  9244  0B02  01A1               	clrf	DATAEE_ReadByte@bAdd+1
  9245  0B03  07A1               	addwf	DATAEE_ReadByte@bAdd+1,f
  9246  0B04  2313               	fcall	_DATAEE_ReadByte
  9247  0B05  0020               	movlb	0	; select bank0
  9248  0B06  00A3               	movwf	readByte@result
  9249                           
  9250                           ;eeprom.c: 55: return result;
  9251  0B07  0008               	return
  9252  0B08                     __end_of_readByte:	
  9253  0B08                     __ptext11:	
  9254 ;; *************** function _updateDayRiseStatus *****************
  9255 ;; Defined at:
  9256 ;;		line 401 in file "src/led.c"
  9257 ;; Parameters:    Size  Location     Type
  9258 ;;		None
  9259 ;; Auto vars:     Size  Location     Type
  9260 ;;		None
  9261 ;; Return value:  Size  Location     Type
  9262 ;;                  1    wreg      void 
  9263 ;; Registers used:
  9264 ;;		wreg
  9265 ;; Tracked objects:
  9266 ;;		On entry : 1F/2
  9267 ;;		On exit  : 1F/2
  9268 ;;		Unchanged: 0/0
  9269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;Total ram usage:        0 bytes
  9275 ;; Hardware stack levels used:    1
  9276 ;; Hardware stack levels required when called:    6
  9277 ;; This function calls:
  9278 ;;		Nothing
  9279 ;; This function is called by:
  9280 ;;		_initLedPara
  9281 ;; This function uses a non-reentrant model
  9282 ;;
  9283                           
  9284                           
  9285                           ;psect for function _updateDayRiseStatus
  9286  0B08                     _updateDayRiseStatus:	
  9287                           
  9288                           ;led.c: 403: if ( gLedPara.tPara.nDayBrt > 1000 - 200 )
  9289                           
  9290                           ;incstack = 0
  9291                           ; Regs used in _updateDayRiseStatus: [wreg]
  9292  0B08  3003               	movlw	3
  9293  0B09  0254               	subwf	((_gLedPara+1)^(0+256)+51),w	;volatile
  9294  0B0A  3021               	movlw	33
  9295  0B0B  1903               	skipnz
  9296  0B0C  0253               	subwf	(_gLedPara^(0+256)+51),w	;volatile
  9297  0B0D  1C03               	skipc
  9298  0B0E  2B11               	goto	l3133
  9299                           
  9300                           ;led.c: 404: {
  9301                           ;led.c: 405: gLedRunPara.fDr = 0;
  9302  0B0F  1257               	bcf	_gLedRunPara^(0+256),4	;volatile
  9303                           
  9304                           ;led.c: 406: }
  9305  0B10  0008               	return
  9306  0B11                     l3133:	
  9307                           
  9308                           ;led.c: 407: else if ( gLedPara.tPara.nDayBrt < 200 )
  9309                           
  9310                           ;led.c: 408: {
  9311                           ;led.c: 409: gLedRunPara.fDr = 1;
  9312  0B11  3187  2F0E         	ljmp	PL48	;call to abstracted procedure
  9313  0B13                     __end_of_updateDayRiseStatus:	
  9314  0B13                     __ptext15:	
  9315 ;; *************** function _DATAEE_ReadByte *****************
  9316 ;; Defined at:
  9317 ;;		line 25 in file "src/eeprom.c"
  9318 ;; Parameters:    Size  Location     Type
  9319 ;;  bAdd            2    0[BANK0 ] unsigned int 
  9320 ;; Auto vars:     Size  Location     Type
  9321 ;;		None
  9322 ;; Return value:  Size  Location     Type
  9323 ;;                  1    wreg      unsigned char 
  9324 ;; Registers used:
  9325 ;;		wreg
  9326 ;; Tracked objects:
  9327 ;;		On entry : 1F/0
  9328 ;;		On exit  : 1F/11
  9329 ;;		Unchanged: 0/0
  9330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9331 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9334 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9335 ;;Total ram usage:        2 bytes
  9336 ;; Hardware stack levels used:    1
  9337 ;; Hardware stack levels required when called:    6
  9338 ;; This function calls:
  9339 ;;		Nothing
  9340 ;; This function is called by:
  9341 ;;		_readByte
  9342 ;; This function uses a non-reentrant model
  9343 ;;
  9344                           
  9345                           
  9346                           ;psect for function _DATAEE_ReadByte
  9347  0B13                     _DATAEE_ReadByte:	
  9348                           
  9349                           ;eeprom.c: 27: NVMADRH = ((bAdd >> 8) & 0xFF);
  9350                           
  9351                           ;incstack = 0
  9352                           ; Regs used in _DATAEE_ReadByte: [wreg]
  9353  0B13  0821               	movf	DATAEE_ReadByte@bAdd+1,w
  9354  0B14  0031               	movlb	17	; select bank17
  9355  0B15  0092               	movwf	18	;volatile
  9356                           
  9357                           ;eeprom.c: 28: NVMADRL = (bAdd & 0xFF);
  9358  0B16  0020               	movlb	0	; select bank0
  9359  0B17  0820               	movf	DATAEE_ReadByte@bAdd,w
  9360  0B18  0031               	movlb	17	; select bank17
  9361  0B19  0091               	movwf	17	;volatile
  9362                           
  9363                           ;eeprom.c: 29: NVMCON1bits.NVMREGS = 1;
  9364  0B1A  1715               	bsf	21,6	;volsfr
  9365                           
  9366                           ;eeprom.c: 30: NVMCON1bits.RD = 1;
  9367  0B1B  1415               	bsf	21,0	;volsfr
  9368                           
  9369                           ;eeprom.c: 31: __nop();
  9370  0B1C  0000               	nop
  9371                           
  9372                           ;eeprom.c: 32: __nop();
  9373  0B1D  0000               	nop
  9374                           
  9375                           ;eeprom.c: 34: return (NVMDATL);
  9376  0B1E  0031               	movlb	17	; select bank17
  9377  0B1F  0813               	movf	19,w	;volatile
  9378  0B20  0008               	return
  9379  0B21                     __end_of_DATAEE_ReadByte:	
  9380  0B21                     __ptext10:	
  9381 ;; *************** function _updateNightRiseStatus *****************
  9382 ;; Defined at:
  9383 ;;		line 432 in file "src/led.c"
  9384 ;; Parameters:    Size  Location     Type
  9385 ;;		None
  9386 ;; Auto vars:     Size  Location     Type
  9387 ;;		None
  9388 ;; Return value:  Size  Location     Type
  9389 ;;                  1    wreg      void 
  9390 ;; Registers used:
  9391 ;;		wreg
  9392 ;; Tracked objects:
  9393 ;;		On entry : 1F/2
  9394 ;;		On exit  : 1F/2
  9395 ;;		Unchanged: 0/0
  9396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9401 ;;Total ram usage:        0 bytes
  9402 ;; Hardware stack levels used:    1
  9403 ;; Hardware stack levels required when called:    6
  9404 ;; This function calls:
  9405 ;;		Nothing
  9406 ;; This function is called by:
  9407 ;;		_initLedPara
  9408 ;; This function uses a non-reentrant model
  9409 ;;
  9410                           
  9411                           
  9412                           ;psect for function _updateNightRiseStatus
  9413  0B21                     _updateNightRiseStatus:	
  9414  0B21                     l3155:	
  9415                           ;incstack = 0
  9416                           ; Regs used in _updateNightRiseStatus: [wreg]
  9417                           
  9418                           
  9419                           ;led.c: 434: if ( gLedPara.tPara.nNightBrt > 1000 - 200 )
  9420  0B21  3003               	movlw	3
  9421  0B22  0256               	subwf	((_gLedPara+1)^(0+256)+53),w	;volatile
  9422  0B23  3021               	movlw	33
  9423  0B24  1903               	skipnz
  9424  0B25  0255               	subwf	(_gLedPara^(0+256)+53),w	;volatile
  9425  0B26  1C03               	skipc
  9426  0B27  2B2A               	goto	l3159
  9427                           
  9428                           ;led.c: 435: {
  9429                           ;led.c: 436: gLedRunPara.fNr = 0;
  9430  0B28  12D7               	bcf	_gLedRunPara^(0+256),5	;volatile
  9431                           
  9432                           ;led.c: 437: }
  9433  0B29  0008               	return
  9434  0B2A                     l3159:	
  9435                           
  9436                           ;led.c: 438: else if ( gLedPara.tPara.nNightBrt < 200 )
  9437                           
  9438                           ;led.c: 439: {
  9439                           ;led.c: 440: gLedRunPara.fNr = 1;
  9440  0B2A  3187  2F16         	ljmp	PL50	;call to abstracted procedure
  9441  0B2C                     __end_of_updateNightRiseStatus:	
  9442  0B2C                     PL2:	
  9443  0B2C  0823               	movf	?___wmul,w
  9444  0B2D  00BC               	movwf	??_autoRun+3
  9445  0B2E  0824               	movf	?___wmul+1,w
  9446  0B2F  00BD               	movwf	??_autoRun+4
  9447  0B30  01BE               	clrf	??_autoRun+5
  9448  0B31  01BF               	clrf	??_autoRun+6
  9449  0B32  083F               	movf	??_autoRun+6,w
  9450  0B33  00AF               	movwf	___lldiv@divisor+3
  9451  0B34  083E               	movf	??_autoRun+5,w
  9452  0B35  00AE               	movwf	___lldiv@divisor+2
  9453  0B36  083D               	movf	??_autoRun+4,w
  9454  0B37  00AD               	movwf	___lldiv@divisor+1
  9455  0B38  083C               	movf	??_autoRun+3,w
  9456  0B39  00AC               	movwf	___lldiv@divisor
  9457  0B3A  085E               	movf	autoRun@dbrt,w
  9458  0B3B  00A0               	movwf	___lmul@multiplier
  9459  0B3C  01A1               	clrf	___lmul@multiplier+1
  9460  0B3D  01A2               	clrf	___lmul@multiplier+2
  9461  0B3E  01A3               	clrf	___lmul@multiplier+3
  9462  0B3F  0864               	movf	autoRun@dt+3,w
  9463  0B40  00A7               	movwf	___lmul@multiplicand+3
  9464  0B41  0863               	movf	autoRun@dt+2,w
  9465  0B42  00A6               	movwf	___lmul@multiplicand+2
  9466  0B43  0862               	movf	autoRun@dt+1,w
  9467  0B44  00A5               	movwf	___lmul@multiplicand+1
  9468  0B45  0861               	movf	autoRun@dt,w
  9469  0B46  00A4               	movwf	___lmul@multiplicand
  9470  0B47  0008               	return
  9471  0B48                     __end_ofPL2:	
  9472  0B48                     PL12:	
  9473  0B48  0020               	movlb	0	; select bank0
  9474  0B49  00A3               	movwf	___wmul@multiplier
  9475  0B4A  303C               	movlw	60
  9476  0B4B  01A4               	clrf	___wmul@multiplier+1
  9477  0B4C  00A5               	movwf	___wmul@multiplicand
  9478  0B4D  01A6               	clrf	___wmul@multiplicand+1
  9479  0B4E  0008               	return
  9480  0B4F                     __end_ofPL12:	
  9481  0B4F                     PL16:	
  9482  0B4F  0823               	movf	?___wmul,w
  9483  0B50  00BA               	movwf	??_autoRun+1
  9484  0B51  0824               	movf	?___wmul+1,w
  9485  0B52  00BB               	movwf	??_autoRun+2
  9486  0B53  3006               	movlw	6
  9487  0B54  00A5               	movwf	___wmul@multiplicand
  9488  0B55  01A6               	clrf	___wmul@multiplicand+1
  9489  0B56  0860               	movf	autoRun@duration+1,w
  9490  0B57  00A4               	movwf	___wmul@multiplier+1
  9491  0B58  085F               	movf	autoRun@duration,w
  9492  0B59  00A3               	movwf	___wmul@multiplier
  9493  0B5A  0008               	return
  9494  0B5B                     __end_ofPL16:	
  9495  0B5B                     PL18:	
  9496  0B5B  3E42               	addlw	(low (autoRun@val| 0))& (0+255)
  9497  0B5C  076D               	addwf	autoRun@k,w
  9498  0B5D  00B9               	movwf	??_autoRun
  9499  0B5E  0086               	movwf	6
  9500  0B5F  0187               	clrf	7
  9501  0B60  0801               	movf	1,w
  9502  0B61  00A3               	movwf	___wmul@multiplier
  9503  0B62  300A               	movlw	10
  9504  0B63  01A4               	clrf	___wmul@multiplier+1
  9505  0B64  00A5               	movwf	___wmul@multiplicand
  9506  0B65  01A6               	clrf	___wmul@multiplicand+1
  9507  0B66  0008               	return
  9508  0B67                     __end_ofPL18:	
  9509  0B67                     PL20:	
  9510  0B67  0839               	movf	??_autoRun,w
  9511  0B68  0723               	addwf	?___wmul,w
  9512  0B69  00BB               	movwf	??_autoRun+2
  9513  0B6A  083A               	movf	??_autoRun+1,w
  9514  0B6B  3D24               	addwfc	?___wmul+1,w
  9515  0B6C  00BC               	movwf	??_autoRun+3
  9516  0B6D  083B               	movf	??_autoRun+2,w
  9517  0B6E  0008               	return
  9518  0B6F                     __end_ofPL20:	
  9519  0B6F                     PL22:	
  9520  0B6F  3E42               	addlw	(low (autoRun@val| 0))& (0+255)
  9521  0B70  076D               	addwf	autoRun@k,w
  9522  0B71  00B9               	movwf	??_autoRun
  9523  0B72  0086               	movwf	6
  9524  0B73  3005               	movlw	5
  9525  0B74  0187               	clrf	7
  9526  0B75  00A0               	movwf	___bmul@multiplicand
  9527  0B76  0008               	return
  9528  0B77                     __end_ofPL22:	
  9529  0B77                     PL24:	
  9530  0B77  3E42               	addlw	(low (autoRun@val| 0))& (0+255)
  9531  0B78  076D               	addwf	autoRun@k,w
  9532  0B79  00BA               	movwf	??_autoRun+1
  9533  0B7A  0084               	movwf	4
  9534  0B7B  0185               	clrf	5
  9535  0B7C  0800               	movf	0,w
  9536  0B7D  0201               	subwf	1,w
  9537  0B7E  0008               	return
  9538  0B7F                     __end_ofPL24:	
  9539  0B7F                     PL26:	
  9540  0B7F  00C1               	movwf	??_autoRun+8
  9541  0B80  356D               	lslf	autoRun@k,w
  9542  0B81  3E65               	addlw	(low ((_gLedRunPara| (0+256)+14)))& (0+255)
  9543  0B82  0086               	movwf	6
  9544  0B83  3001               	movlw	1	; select bank2/3
  9545  0B84  0087               	movwf	7
  9546  0B85  0840               	movf	??_autoRun+7,w
  9547  0B86  3FC0               	movwi [0]fsr1
  9548  0B87  0841               	movf	??_autoRun+8,w
  9549  0B88  3FC1               	movwi [1]fsr1
  9550  0B89  0008               	return
  9551  0B8A                     __end_ofPL26:	
  9552  0B8A                     PL44:	
  9553  0B8A  3E42               	addlw	(low (autoRun@val| 0))& (0+255)
  9554  0B8B  0086               	movwf	6
  9555  0B8C  086E               	movf	autoRun@i,w
  9556  0B8D  3E45               	addlw	(low ((_gLedPara| (0+256)+37)))& (0+255)
  9557  0B8E  0084               	movwf	4
  9558  0B8F  0800               	movf	0,w
  9559  0B90  0081               	movwf	1
  9560  0B91  086E               	movf	autoRun@i,w
  9561  0B92  0008               	return
  9562  0B93                     __end_ofPL44:	
  9563  0B93                     PL52:	
  9564  0B93  0823               	movf	?___lmul+3,w
  9565  0B94  00B3               	movwf	___lldiv@dividend+3
  9566  0B95  0822               	movf	?___lmul+2,w
  9567  0B96  00B2               	movwf	___lldiv@dividend+2
  9568  0B97  0821               	movf	?___lmul+1,w
  9569  0B98  00B1               	movwf	___lldiv@dividend+1
  9570  0B99  0820               	movf	?___lmul,w
  9571  0B9A  00B0               	movwf	___lldiv@dividend
  9572  0B9B  0008               	return
  9573  0B9C                     __end_ofPL52:	
  9574  0B9C                     PL54:	
  9575  0B9C  00E0               	movwf	autoRun@duration+1
  9576  0B9D  0867               	movf	autoRun@et,w
  9577  0B9E  00DF               	movwf	autoRun@duration
  9578  0B9F  086B               	movf	autoRun@st,w
  9579  0BA0  02DF               	subwf	autoRun@duration,f
  9580  0BA1  086C               	movf	autoRun@st+1,w
  9581  0BA2  3BE0               	subwfb	autoRun@duration+1,f
  9582  0BA3  0008               	return
  9583  0BA4                     __end_ofPL54:	
  9584  0BA4                     PL56:	
  9585  0BA4  0086               	movwf	6
  9586  0BA5  3001               	movlw	1	; select bank2/3
  9587  0BA6  0087               	movwf	7
  9588  0BA7  3065               	movlw	101
  9589  0BA8  0201               	subwf	1,w
  9590  0BA9  0008               	return
  9591  0BAA                     __end_ofPL56:	
  9592  0BAA                     PL98:	
  9593  0BAA  00DE               	movwf	autoRun@dbrt
  9594  0BAB  3005               	movlw	5
  9595  0BAC  00A0               	movwf	___bmul@multiplicand
  9596  0BAD  086E               	movf	autoRun@i,w
  9597  0BAE  0008               	return
  9598  0BAF                     __end_ofPL98:	
  9599  0BAF                     __ptext55:	
  9600 ;; *************** function _bleSendDeviceData *****************
  9601 ;; Defined at:
  9602 ;;		line 127 in file "src/ble.c"
  9603 ;; Parameters:    Size  Location     Type
  9604 ;;		None
  9605 ;; Auto vars:     Size  Location     Type
  9606 ;;  i               1    9[BANK0 ] unsigned char 
  9607 ;;  len             1    8[BANK0 ] unsigned char 
  9608 ;; Return value:  Size  Location     Type
  9609 ;;                  1    wreg      void 
  9610 ;; Registers used:
  9611 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9612 ;; Tracked objects:
  9613 ;;		On entry : 1D/2
  9614 ;;		On exit  : 1F/2
  9615 ;;		Unchanged: 0/0
  9616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9618 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9619 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9620 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;Total ram usage:        3 bytes
  9622 ;; Hardware stack levels used:    1
  9623 ;; Hardware stack levels required when called:    8
  9624 ;; This function calls:
  9625 ;;		_bleSendData
  9626 ;;		_getCRC
  9627 ;; This function is called by:
  9628 ;;		_DecodeDATA
  9629 ;; This function uses a non-reentrant model
  9630 ;;
  9631                           
  9632                           
  9633                           ;psect for function _bleSendDeviceData
  9634  0BAF                     _bleSendDeviceData:	
  9635  0BAF                     l3283:	
  9636                           ;incstack = 0
  9637                           ; Regs used in _bleSendDeviceData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9638                           
  9639                           
  9640                           ;ble.c: 129: unsigned char i;
  9641                           ;ble.c: 130: unsigned char len;
  9642                           ;ble.c: 131: txBuf[0] = 0x68;
  9643  0BAF  3068               	movlw	104
  9644  0BB0  0024               	movlb	4	; select bank4
  9645  0BB1  00A0               	movwf	_txBuf^(0+512)
  9646                           
  9647                           ;ble.c: 132: txBuf[1] = 0x05;
  9648  0BB2  3005               	movlw	5
  9649  0BB3  00A1               	movwf	(_txBuf^(0+512)+1)
  9650                           
  9651                           ;ble.c: 133: txBuf[2] = gLedPara.fAuto;
  9652  0BB4  3000               	movlw	0
  9653  0BB5  0022               	movlb	2	; select bank2
  9654  0BB6  1820               	btfsc	_gLedPara^(0+256),0	;volatile
  9655  0BB7  3001               	movlw	1
  9656  0BB8  0024               	movlb	4	; select bank4
  9657  0BB9  00A2               	movwf	(_txBuf^(0+512)+2)
  9658                           
  9659                           ;ble.c: 134: if ( gLedPara.fAuto )
  9660  0BBA  0022               	movlb	2	; select bank2
  9661  0BBB  1C20               	btfss	_gLedPara^(0+256),0	;volatile
  9662  0BBC  2BD0               	goto	l3299
  9663                           
  9664                           ;ble.c: 135: {
  9665                           ;ble.c: 136: len = sizeof (gLedPara.aPara.array );
  9666  0BBD  3012               	movlw	18
  9667  0BBE  0020               	movlb	0	; select bank0
  9668  0BBF  00A8               	movwf	bleSendDeviceData@len
  9669                           
  9670                           ;ble.c: 137: for ( i = 0; i < len; i++ )
  9671  0BC0  01A9               	clrf	bleSendDeviceData@i
  9672  0BC1                     l3297:	
  9673  0BC1  0828               	movf	bleSendDeviceData@len,w
  9674  0BC2  0229               	subwf	bleSendDeviceData@i,w
  9675  0BC3  1803               	btfsc	3,0
  9676  0BC4  2BE3               	goto	l3309
  9677                           
  9678                           ;ble.c: 138: {
  9679                           ;ble.c: 139: txBuf[3 + i] = gLedPara.aPara.array[i];
  9680  0BC5  0829               	movf	bleSendDeviceData@i,w
  9681  0BC6  3E23               	addlw	(low ((_txBuf| (0+512)+3)))& (0+255)
  9682  0BC7  0086               	movwf	6
  9683  0BC8  3002               	movlw	2	; select bank4/5
  9684  0BC9  0087               	movwf	7
  9685  0BCA  0829               	movf	bleSendDeviceData@i,w
  9686  0BCB  3E41               	addlw	(low ((_gLedPara| (0+256)+33)))& (0+255)
  9687  0BCC  23FD  3188         	fcall	PL66	;call to abstracted procedure
  9688  0BCE  0AA9               	incf	bleSendDeviceData@i,f
  9689  0BCF  2BC1               	goto	l3297
  9690  0BD0                     l3299:	
  9691                           
  9692                           ;ble.c: 142: else
  9693                           ;ble.c: 143: {
  9694                           ;ble.c: 144: len = sizeof (gLedPara.mPara.array );
  9695  0BD0  3020               	movlw	32
  9696  0BD1  0020               	movlb	0	; select bank0
  9697  0BD2  00A8               	movwf	bleSendDeviceData@len
  9698                           
  9699                           ;ble.c: 145: for ( i = 0; i < len; i++ )
  9700  0BD3  01A9               	clrf	bleSendDeviceData@i
  9701  0BD4                     l3307:	
  9702  0BD4  0828               	movf	bleSendDeviceData@len,w
  9703  0BD5  0229               	subwf	bleSendDeviceData@i,w
  9704  0BD6  1803               	btfsc	3,0
  9705  0BD7  2BE3               	goto	l3309
  9706                           
  9707                           ;ble.c: 146: {
  9708                           ;ble.c: 147: txBuf[3 + i] = gLedPara.mPara.array[i];
  9709  0BD8  0829               	movf	bleSendDeviceData@i,w
  9710  0BD9  3E23               	addlw	(low ((_txBuf| (0+512)+3)))& (0+255)
  9711  0BDA  0086               	movwf	6
  9712  0BDB  3002               	movlw	2	; select bank4/5
  9713  0BDC  0087               	movwf	7
  9714  0BDD  0829               	movf	bleSendDeviceData@i,w
  9715  0BDE  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
  9716  0BDF  23FD  3188         	fcall	PL66	;call to abstracted procedure
  9717  0BE1  0AA9               	incf	bleSendDeviceData@i,f
  9718  0BE2  2BD4               	goto	l3307
  9719  0BE3                     l3309:	
  9720                           
  9721                           ;ble.c: 148: }
  9722                           ;ble.c: 149: }
  9723                           ;ble.c: 150: txBuf[len + 3] = getCRC(txBuf, len + 3);
  9724  0BE3  3020               	movlw	low _txBuf
  9725  0BE4  00A0               	movwf	getCRC@pbuf
  9726  0BE5  3002               	movlw	high _txBuf
  9727  0BE6  00A1               	movwf	getCRC@pbuf+1
  9728  0BE7  0828               	movf	bleSendDeviceData@len,w
  9729  0BE8  3E03               	addlw	3
  9730  0BE9  00A2               	movwf	getCRC@len
  9731  0BEA  318E  26B7         	fcall	_getCRC
  9732  0BEC  00A7               	movwf	??_bleSendDeviceData
  9733  0BED  0828               	movf	bleSendDeviceData@len,w
  9734  0BEE  3E23               	addlw	(low ((_txBuf| (0+512)+3)))& (0+255)
  9735  0BEF  0086               	movwf	6
  9736  0BF0  3002               	movlw	2	; select bank4/5
  9737  0BF1  0087               	movwf	7
  9738  0BF2  0827               	movf	??_bleSendDeviceData,w
  9739  0BF3  0081               	movwf	1
  9740                           
  9741                           ;ble.c: 151: bleSendData(txBuf, len + 4);
  9742  0BF4  3020               	movlw	low _txBuf
  9743  0BF5  00A1               	movwf	bleSendData@frame
  9744  0BF6  3002               	movlw	high _txBuf
  9745  0BF7  00A2               	movwf	bleSendData@frame+1
  9746  0BF8  0828               	movf	bleSendDeviceData@len,w
  9747  0BF9  3E04               	addlw	4
  9748  0BFA  00A3               	movwf	bleSendData@len
  9749  0BFB  318F  2F11         	ljmp	l3053
  9750  0BFD                     __end_of_bleSendDeviceData:	
  9751  0BFD                     PL66:	
  9752  0BFD  0084               	movwf	4
  9753  0BFE  3001               	movlw	1	; select bank2/3
  9754  0BFF  0085               	movwf	5
  9755  0C00  0800               	movf	0,w
  9756  0C01  0081               	movwf	1
  9757  0C02  0008               	return
  9758  0C03                     __end_ofPL66:	
  9759                           
  9760                           	psect	text16
  9761  1711                     __ptext16:	
  9762 ;; *************** function _initBLE *****************
  9763 ;; Defined at:
  9764 ;;		line 380 in file "src/ble.c"
  9765 ;; Parameters:    Size  Location     Type
  9766 ;;		None
  9767 ;; Auto vars:     Size  Location     Type
  9768 ;;		None
  9769 ;; Return value:  Size  Location     Type
  9770 ;;                  1    wreg      void 
  9771 ;; Registers used:
  9772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9773 ;; Tracked objects:
  9774 ;;		On entry : 1F/1
  9775 ;;		On exit  : 1F/2
  9776 ;;		Unchanged: 0/0
  9777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9780 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9782 ;;Total ram usage:        2 bytes
  9783 ;; Hardware stack levels used:    1
  9784 ;; Hardware stack levels required when called:    9
  9785 ;; This function calls:
  9786 ;;		_BLE_SendCMD
  9787 ;;		_checkDevID
  9788 ;; This function is called by:
  9789 ;;		_main
  9790 ;; This function uses a non-reentrant model
  9791 ;;
  9792                           
  9793                           
  9794                           ;psect for function _initBLE
  9795  1711                     _initBLE:	
  9796                           
  9797                           ;ble.c: 382: LATC1 = 0;
  9798                           
  9799                           ;incstack = 0
  9800                           ; Regs used in _initBLE: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9801  1711  0022               	movlb	2	; select bank2
  9802  1712  108E               	bcf	14,1	;volatile
  9803                           
  9804                           ;ble.c: 383: LATB5 = 0;
  9805  1713  128D               	bcf	13,5	;volatile
  9806                           
  9807                           ;ble.c: 384: _delay((unsigned long)((20)*(16000000/4000.0)));
  9808  1714  3068               	movlw	104
  9809  1715  0020               	movlb	0	; select bank0
  9810  1716  00C5               	movwf	??_initBLE
  9811  1717  30E4               	movlw	228
  9812  1718                     u4357:	
  9813  1718  0B89               	decfsz	9,f
  9814  1719  2F18               	goto	u4357
  9815  171A  0BC5               	decfsz	??_initBLE,f
  9816  171B  2F18               	goto	u4357
  9817  171C  0000               	nop
  9818                           
  9819                           ;ble.c: 385: LATB5 = 1;
  9820  171D  0022               	movlb	2	; select bank2
  9821  171E  168D               	bsf	13,5	;volatile
  9822                           
  9823                           ;ble.c: 386: _delay((unsigned long)((240)*(16000000/4000.0)));
  9824  171F  3005               	movlw	5
  9825  1720  0020               	movlb	0	; select bank0
  9826  1721  00C6               	movwf	??_initBLE+1
  9827  1722  30DF               	movlw	223
  9828  1723  00C5               	movwf	??_initBLE
  9829  1724  30BB               	movlw	187
  9830  1725                     u4367:	
  9831  1725  0B89               	decfsz	9,f
  9832  1726  2F25               	goto	u4367
  9833  1727  0BC5               	decfsz	??_initBLE,f
  9834  1728  2F25               	goto	u4367
  9835  1729  0BC6               	decfsz	??_initBLE+1,f
  9836  172A  2F25               	goto	u4367
  9837  172B  3200               	nop2
  9838                           
  9839                           ;ble.c: 389: if ( checkDevID() == 0 )
  9840  172C  27BE  3197         	fcall	_checkDevID
  9841  172E  3A00               	xorlw	0
  9842  172F  1D03               	skipz
  9843  1730  2F41               	goto	l4047
  9844                           
  9845                           ;ble.c: 390: {
  9846                           ;ble.c: 391: _delay((unsigned long)((40)*(16000000/4000.0)));
  9847  1731  30D0               	movlw	208
  9848  1732  0020               	movlb	0	; select bank0
  9849  1733  00C5               	movwf	??_initBLE
  9850  1734  30C9               	movlw	201
  9851  1735                     u4377:	
  9852  1735  0B89               	decfsz	9,f
  9853  1736  2F35               	goto	u4377
  9854  1737  0BC5               	decfsz	??_initBLE,f
  9855  1738  2F35               	goto	u4377
  9856  1739  3200               	nop2
  9857                           
  9858                           ;ble.c: 392: BLE_SendCMD("AT+ADV_MFR_SPC=3031353230313032\r\n");
  9859  173A  3000               	movlw	low (STR_2| (0+32768))
  9860  173B  0020               	movlb	0	; select bank0
  9861  173C  00A1               	movwf	BLE_SendCMD@pBuf
  9862  173D  3098               	movlw	high (STR_2| (0+32768))
  9863  173E  00A2               	movwf	BLE_SendCMD@pBuf+1
  9864  173F  276D  3197         	fcall	_BLE_SendCMD
  9865  1741                     l4047:	
  9866                           
  9867                           ;ble.c: 393: }
  9868                           ;ble.c: 394: _delay((unsigned long)((40)*(16000000/4000.0)));
  9869  1741  30D0               	movlw	208
  9870  1742  0020               	movlb	0	; select bank0
  9871  1743  00C5               	movwf	??_initBLE
  9872  1744  30C9               	movlw	201
  9873  1745                     u4387:	
  9874  1745  0B89               	decfsz	9,f
  9875  1746  2F45               	goto	u4387
  9876  1747  0BC5               	decfsz	??_initBLE,f
  9877  1748  2F45               	goto	u4387
  9878  1749  3200               	nop2
  9879                           
  9880                           ;ble.c: 396: BLE_SendCMD("AT+SET=1\r\n");
  9881  174A  3044               	movlw	low (STR_3| (0+32768))
  9882  174B  0020               	movlb	0	; select bank0
  9883  174C  00A1               	movwf	BLE_SendCMD@pBuf
  9884  174D  3098               	movlw	high (STR_3| (0+32768))
  9885  174E  00A2               	movwf	BLE_SendCMD@pBuf+1
  9886  174F  276D  3197         	fcall	_BLE_SendCMD
  9887                           
  9888                           ;ble.c: 397: _delay((unsigned long)((40)*(16000000/4000.0)));
  9889  1751  30D0               	movlw	208
  9890  1752  0020               	movlb	0	; select bank0
  9891  1753  00C5               	movwf	??_initBLE
  9892  1754  30C9               	movlw	201
  9893  1755                     u4397:	
  9894  1755  0B89               	decfsz	9,f
  9895  1756  2F55               	goto	u4397
  9896  1757  0BC5               	decfsz	??_initBLE,f
  9897  1758  2F55               	goto	u4397
  9898  1759  3200               	nop2
  9899                           
  9900                           ;ble.c: 399: BLE_SendCMD("AT+MODE=DATA\r\n");
  9901  175A  3035               	movlw	low (STR_4| (0+32768))
  9902  175B  0020               	movlb	0	; select bank0
  9903  175C  00A1               	movwf	BLE_SendCMD@pBuf
  9904  175D  3098               	movlw	high (STR_4| (0+32768))
  9905  175E  00A2               	movwf	BLE_SendCMD@pBuf+1
  9906  175F  276D  3197         	fcall	_BLE_SendCMD
  9907                           
  9908                           ;ble.c: 400: _delay((unsigned long)((20)*(16000000/4000.0)));
  9909  1761  3068               	movlw	104
  9910  1762  0020               	movlb	0	; select bank0
  9911  1763  00C5               	movwf	??_initBLE
  9912  1764  30E4               	movlw	228
  9913  1765                     u4407:	
  9914  1765  0B89               	decfsz	9,f
  9915  1766  2F65               	goto	u4407
  9916  1767  0BC5               	decfsz	??_initBLE,f
  9917  1768  2F65               	goto	u4407
  9918  1769  0000               	nop
  9919                           
  9920                           ;ble.c: 401: LATC1 = 1;
  9921  176A  0022               	movlb	2	; select bank2
  9922  176B  148E               	bsf	14,1	;volatile
  9923  176C  0008               	return
  9924  176D                     __end_of_initBLE:	
  9925  176D                     __ptext18:	
  9926 ;; *************** function _BLE_SendCMD *****************
  9927 ;; Defined at:
  9928 ;;		line 36 in file "src/ble.c"
  9929 ;; Parameters:    Size  Location     Type
  9930 ;;  pBuf            2    1[BANK0 ] PTR const unsigned char 
  9931 ;;		 -> STR_4(15), STR_3(11), STR_2(34), STR_1(19), 
  9932 ;; Auto vars:     Size  Location     Type
  9933 ;;  ack             7    4[BANK0 ] unsigned char [7]
  9934 ;;  cnt             2   11[BANK0 ] unsigned int 
  9935 ;;  index           1   14[BANK0 ] unsigned char 
  9936 ;;  rev             1   13[BANK0 ] unsigned char 
  9937 ;; Return value:  Size  Location     Type
  9938 ;;                  1    wreg      void 
  9939 ;; Registers used:
  9940 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9941 ;; Tracked objects:
  9942 ;;		On entry : 1F/0
  9943 ;;		On exit  : 1F/0
  9944 ;;		Unchanged: 0/0
  9945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9946 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9947 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9948 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9949 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9950 ;;Total ram usage:       14 bytes
  9951 ;; Hardware stack levels used:    1
  9952 ;; Hardware stack levels required when called:    7
  9953 ;; This function calls:
  9954 ;;		_eusartSendByte
  9955 ;; This function is called by:
  9956 ;;		_checkDevID
  9957 ;;		_initBLE
  9958 ;; This function uses a non-reentrant model
  9959 ;;
  9960                           
  9961                           
  9962                           ;psect for function _BLE_SendCMD
  9963  176D                     _BLE_SendCMD:	
  9964                           
  9965                           ;ble.c: 38: unsigned char ack[] = { 'A', 'T', '+', 'O', 'K', '\r', '\n' };
  9966                           
  9967                           ;incstack = 0
  9968                           ; Regs used in _BLE_SendCMD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9969  176D  30E4               	movlw	low BLE_SendCMD@F7924
  9970  176E  0086               	movwf	6
  9971  176F  3000               	movlw	high BLE_SendCMD@F7924
  9972  1770  0087               	movwf	7
  9973  1771  3024               	movlw	low BLE_SendCMD@ack
  9974  1772  0084               	movwf	4
  9975  1773  3000               	movlw	high BLE_SendCMD@ack
  9976  1774  0085               	movwf	5
  9977  1775  3007               	movlw	7
  9978  1776  00A3               	movwf	??_BLE_SendCMD
  9979  1777                     u2370:	
  9980  1777  0016               	moviw fsr1++
  9981  1778  001A               	movwi fsr0++
  9982  1779  0BA3               	decfsz	??_BLE_SendCMD,f
  9983  177A  2F77               	goto	u2370
  9984                           
  9985                           ;ble.c: 39: unsigned char index = 0;
  9986  177B  01AE               	clrf	BLE_SendCMD@index
  9987                           
  9988                           ;ble.c: 40: unsigned int cnt = 0;
  9989  177C  01AB               	clrf	BLE_SendCMD@cnt
  9990  177D  01AC               	clrf	BLE_SendCMD@cnt+1
  9991  177E  0023               	movlb	3	; select bank3
  9992  177F  0819               	movf	25,w	;volatile
  9993  1780                     l3029:	
  9994                           ;ble.c: 42: while ( *pBuf != '\0' )
  9995                           
  9996  1780  0020               	movlb	0	; select bank0
  9997  1781  0821               	movf	BLE_SendCMD@pBuf,w
  9998  1782  0084               	movwf	4
  9999  1783  0822               	movf	BLE_SendCMD@pBuf+1,w
 10000  1784  0085               	movwf	5
 10001  1785  0012               	moviw fsr0++
 10002  1786  1903               	btfsc	3,2
 10003  1787  2FB9               	goto	l3051
 10004                           
 10005                           ;ble.c: 43: {
 10006                           ;ble.c: 44: eusartSendByte(*pBuf++);
 10007  1788  0821               	movf	BLE_SendCMD@pBuf,w
 10008  1789  0084               	movwf	4
 10009  178A  0822               	movf	BLE_SendCMD@pBuf+1,w
 10010  178B  0085               	movwf	5
 10011  178C  0800               	movf	0,w	;code access
 10012  178D  318F  2733  3197   	fcall	_eusartSendByte
 10013  1790  0020               	movlb	0	; select bank0
 10014  1791  0AA1               	incf	BLE_SendCMD@pBuf,f
 10015  1792  1903               	skipnz
 10016  1793  0AA2               	incf	BLE_SendCMD@pBuf+1,f
 10017  1794  2F80               	goto	l3029
 10018  1795                     l59:	
 10019                           
 10020                           ;ble.c: 49: {
 10021                           ;ble.c: 51: if( PIR1bits.RCIF )
 10022  1795  1E91               	btfss	17,5	;volatile
 10023  1796  2FAA               	goto	l3043
 10024                           
 10025                           ;ble.c: 52: {
 10026                           ;ble.c: 53: if (RC1STAbits.OERR)
 10027  1797  0023               	movlb	3	; select bank3
 10028  1798  1C9D               	btfss	29,1	;volatile
 10029  1799  2F9C               	goto	l3035
 10030                           
 10031                           ;ble.c: 54: {
 10032                           ;ble.c: 55: RC1STAbits.CREN = 0;
 10033  179A  121D               	bcf	29,4	;volatile
 10034                           
 10035                           ;ble.c: 56: RC1STAbits.CREN = 1;
 10036  179B  161D               	bsf	29,4	;volatile
 10037  179C                     l3035:	
 10038                           
 10039                           ;ble.c: 57: }
 10040                           ;ble.c: 58: rev = RCREG;
 10041  179C  0819               	movf	25,w	;volatile
 10042  179D  0020               	movlb	0	; select bank0
 10043  179E  00AD               	movwf	BLE_SendCMD@rev
 10044                           
 10045                           ;ble.c: 59: if ( rev == ack[index] )
 10046  179F  082E               	movf	BLE_SendCMD@index,w
 10047  17A0  3E24               	addlw	(low (BLE_SendCMD@ack| 0))& (0+255)
 10048  17A1  0086               	movwf	6
 10049  17A2  0187               	clrf	7
 10050  17A3  0801               	movf	1,w
 10051  17A4  062D               	xorwf	BLE_SendCMD@rev,w
 10052  17A5  1D03               	skipz
 10053  17A6  2FA9               	goto	l3041
 10054                           
 10055                           ;ble.c: 60: {
 10056                           ;ble.c: 61: index++;
 10057  17A7  0AAE               	incf	BLE_SendCMD@index,f
 10058                           
 10059                           ;ble.c: 62: }
 10060  17A8  2FAA               	goto	l3043
 10061  17A9                     l3041:	
 10062                           
 10063                           ;ble.c: 63: else
 10064                           ;ble.c: 64: {
 10065                           ;ble.c: 65: index = 0;
 10066  17A9  01AE               	clrf	BLE_SendCMD@index
 10067  17AA                     l3043:	
 10068                           
 10069                           ;ble.c: 66: }
 10070                           ;ble.c: 67: }
 10071                           ;ble.c: 68: _delay((unsigned long)((100)*(16000000/4000000.0)));
 10072  17AA  3085               	movlw	133
 10073  17AB                     u4427:	
 10074  17AB  0B89               	decfsz	9,f
 10075  17AC  2FAB               	goto	u4427
 10076  17AD  0000               	nop
 10077                           
 10078                           ;ble.c: 69: cnt++;
 10079  17AE  0020               	movlb	0	; select bank0
 10080  17AF  0AAB               	incf	BLE_SendCMD@cnt,f
 10081  17B0  1903               	skipnz
 10082  17B1  0AAC               	incf	BLE_SendCMD@cnt+1,f
 10083                           
 10084                           ;ble.c: 70: if( cnt > 1000 )
 10085  17B2  3003               	movlw	3
 10086  17B3  022C               	subwf	BLE_SendCMD@cnt+1,w
 10087  17B4  30E9               	movlw	233
 10088  17B5  1903               	skipnz
 10089  17B6  022B               	subwf	BLE_SendCMD@cnt,w
 10090  17B7  1803               	btfsc	3,0
 10091  17B8  0008               	return
 10092  17B9                     l3051:	
 10093  17B9  3007               	movlw	7
 10094  17BA  022E               	subwf	BLE_SendCMD@index,w
 10095  17BB  1803               	btfsc	3,0
 10096  17BC  0008               	return
 10097  17BD  2F95               	goto	l59
 10098  17BE                     __end_of_BLE_SendCMD:	
 10099  17BE                     __ptext17:	
 10100 ;; *************** function _checkDevID *****************
 10101 ;; Defined at:
 10102 ;;		line 77 in file "src/ble.c"
 10103 ;; Parameters:    Size  Location     Type
 10104 ;;		None
 10105 ;; Auto vars:     Size  Location     Type
 10106 ;;  dev            17   16[BANK0 ] unsigned char [17]
 10107 ;;  cnt             2   33[BANK0 ] unsigned int 
 10108 ;;  index           1   36[BANK0 ] unsigned char 
 10109 ;;  rev             1   35[BANK0 ] unsigned char 
 10110 ;; Return value:  Size  Location     Type
 10111 ;;                  1    wreg      unsigned char 
 10112 ;; Registers used:
 10113 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10114 ;; Tracked objects:
 10115 ;;		On entry : 0/2
 10116 ;;		On exit  : 1F/0
 10117 ;;		Unchanged: 0/0
 10118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10123 ;;Total ram usage:       22 bytes
 10124 ;; Hardware stack levels used:    1
 10125 ;; Hardware stack levels required when called:    8
 10126 ;; This function calls:
 10127 ;;		_BLE_SendCMD
 10128 ;; This function is called by:
 10129 ;;		_initBLE
 10130 ;; This function uses a non-reentrant model
 10131 ;;
 10132                           
 10133                           
 10134                           ;psect for function _checkDevID
 10135  17BE                     _checkDevID:	
 10136                           
 10137                           ;ble.c: 79: unsigned char dev[] = "3031353230313032";
 10138                           
 10139                           ;incstack = 0
 10140                           ; Regs used in _checkDevID: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10141  17BE  30D0               	movlw	low checkDevID@F7931
 10142  17BF  0086               	movwf	6
 10143  17C0  3001               	movlw	high checkDevID@F7931
 10144  17C1  0087               	movwf	7
 10145  17C2  3030               	movlw	low checkDevID@dev
 10146  17C3  0084               	movwf	4
 10147  17C4  3000               	movlw	high checkDevID@dev
 10148  17C5  0085               	movwf	5
 10149  17C6  3011               	movlw	17
 10150  17C7  0020               	movlb	0	; select bank0
 10151  17C8  00AF               	movwf	??_checkDevID
 10152  17C9                     u2700:	
 10153  17C9  0016               	moviw fsr1++
 10154  17CA  001A               	movwi fsr0++
 10155  17CB  0BAF               	decfsz	??_checkDevID,f
 10156  17CC  2FC9               	goto	u2700
 10157  17CD  3022               	movlw	low (STR_1| (0+32768))
 10158                           
 10159                           ;ble.c: 80: unsigned char index = 0;
 10160  17CE  01C4               	clrf	checkDevID@index
 10161                           
 10162                           ;ble.c: 81: unsigned int cnt = 0;
 10163  17CF  01C1               	clrf	checkDevID@cnt
 10164  17D0  01C2               	clrf	checkDevID@cnt+1
 10165                           
 10166                           ;ble.c: 82: unsigned char rev;
 10167                           ;ble.c: 83: BLE_SendCMD("AT+ADV_MFR_SPC=?\r\n");
 10168  17D1  00A1               	movwf	BLE_SendCMD@pBuf
 10169  17D2  3098               	movlw	high (STR_1| (0+32768))
 10170  17D3  00A2               	movwf	BLE_SendCMD@pBuf+1
 10171  17D4  276D  3197         	fcall	_BLE_SendCMD
 10172  17D6                     l3277:	
 10173                           ;ble.c: 84: while ( *(dev+index) != '\0' )
 10174                           
 10175  17D6  27FA  3197         	fcall	PL74	;call to abstracted procedure
 10176  17D8  1903               	btfsc	3,2
 10177  17D9  3401               	retlw	1
 10178                           
 10179                           ;ble.c: 85: {
 10180                           ;ble.c: 87: if( PIR1bits.RCIF )
 10181  17DA  1E91               	btfss	17,5	;volatile
 10182  17DB  2FEA               	goto	l3267
 10183                           
 10184                           ;ble.c: 88: {
 10185                           ;ble.c: 89: if (RC1STAbits.OERR)
 10186  17DC  0023               	movlb	3	; select bank3
 10187  17DD  1C9D               	btfss	29,1	;volatile
 10188  17DE  2FE1               	goto	l3257
 10189                           
 10190                           ;ble.c: 90: {
 10191                           ;ble.c: 91: RC1STAbits.CREN = 0;
 10192  17DF  121D               	bcf	29,4	;volatile
 10193                           
 10194                           ;ble.c: 92: RC1STAbits.CREN = 1;
 10195  17E0  161D               	bsf	29,4	;volatile
 10196  17E1                     l3257:	
 10197                           
 10198                           ;ble.c: 93: }
 10199                           ;ble.c: 94: rev = RCREG;
 10200  17E1  0819               	movf	25,w	;volatile
 10201  17E2  0020               	movlb	0	; select bank0
 10202  17E3  00C3               	movwf	checkDevID@rev
 10203                           
 10204                           ;ble.c: 95: if ( rev == *(dev+index) )
 10205  17E4  27FA  3197         	fcall	PL74	;call to abstracted procedure
 10206  17E6  0643               	xorwf	checkDevID@rev,w
 10207  17E7  1D03               	skipz
 10208  17E8  3400               	retlw	0
 10209                           
 10210                           ;ble.c: 96: {
 10211                           ;ble.c: 97: index++;
 10212  17E9  0AC4               	incf	checkDevID@index,f
 10213  17EA                     l3267:	
 10214                           ;ble.c: 99: else
 10215                           ;ble.c: 100: {
 10216                           ;ble.c: 101: return 0;
 10217                           
 10218                           ;ble.c: 98: }
 10219                           
 10220                           
 10221                           ;ble.c: 102: }
 10222                           ;ble.c: 103: }
 10223                           ;ble.c: 104: _delay((unsigned long)((100)*(16000000/4000000.0)));
 10224  17EA  3085               	movlw	133
 10225  17EB                     u4417:	
 10226  17EB  0B89               	decfsz	9,f
 10227  17EC  2FEB               	goto	u4417
 10228  17ED  0000               	nop
 10229                           
 10230                           ;ble.c: 105: cnt++;
 10231  17EE  0020               	movlb	0	; select bank0
 10232  17EF  0AC1               	incf	checkDevID@cnt,f
 10233  17F0  1903               	skipnz
 10234  17F1  0AC2               	incf	checkDevID@cnt+1,f
 10235                           
 10236                           ;ble.c: 106: if( cnt > 1000 )
 10237  17F2  3003               	movlw	3
 10238  17F3  0242               	subwf	checkDevID@cnt+1,w
 10239  17F4  30E9               	movlw	233
 10240  17F5  1903               	skipnz
 10241  17F6  0241               	subwf	checkDevID@cnt,w
 10242  17F7  1803               	btfsc	3,0
 10243  17F8  3400               	retlw	0
 10244  17F9  2FD6               	goto	l3277
 10245  17FA                     __end_of_checkDevID:	
 10246                           ;ble.c: 109: }
 10247                           ;ble.c: 110: }
 10248                           ;ble.c: 111: return 1;
 10249                           
 10250  17FA                     PL74:	
 10251  17FA  0844               	movf	checkDevID@index,w
 10252  17FB  3E30               	addlw	(low (checkDevID@dev| 0))& (0+255)
 10253  17FC  0086               	movwf	6
 10254  17FD  0187               	clrf	7
 10255  17FE  0801               	movf	1,w
 10256  17FF  0008               	return
 10257  1800                     __end_ofPL74:	
 10258                           
 10259                           	psect	text19
 10260  041D                     __ptext19:	
 10261 ;; *************** function _findDeviceFlash *****************
 10262 ;; Defined at:
 10263 ;;		line 318 in file "src/led.c"
 10264 ;; Parameters:    Size  Location     Type
 10265 ;;		None
 10266 ;; Auto vars:     Size  Location     Type
 10267 ;;		None
 10268 ;; Return value:  Size  Location     Type
 10269 ;;                  1    wreg      void 
 10270 ;; Registers used:
 10271 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10272 ;; Tracked objects:
 10273 ;;		On entry : 1F/2
 10274 ;;		On exit  : 11/0
 10275 ;;		Unchanged: 0/0
 10276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10281 ;;Total ram usage:        0 bytes
 10282 ;; Hardware stack levels used:    1
 10283 ;; Hardware stack levels required when called:   10
 10284 ;; This function calls:
 10285 ;;		_initLedStatus
 10286 ;;		_turnMaxLed
 10287 ;;		_turnOffLed
 10288 ;; This function is called by:
 10289 ;;		_main
 10290 ;; This function uses a non-reentrant model
 10291 ;;
 10292                           
 10293                           
 10294                           ;psect for function _findDeviceFlash
 10295  041D                     _findDeviceFlash:	
 10296                           
 10297                           ;led.c: 320: static unsigned char tog = 0;
 10298                           ;led.c: 321: if ( tog )
 10299                           
 10300                           ;incstack = 0
 10301                           ; Regs used in _findDeviceFlash: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10302  041D  0021               	movlb	1	; select bank1
 10303  041E  0860               	movf	findDeviceFlash@tog^(0+128),w
 10304  041F  1903               	btfsc	3,2
 10305  0420  2C2D               	goto	l519
 10306                           
 10307                           ;led.c: 322: {
 10308                           ;led.c: 323: tog = 0;
 10309  0421  01E0               	clrf	findDeviceFlash@tog^(0+128)
 10310                           
 10311                           ;led.c: 324: turnOffLed();
 10312  0422  2430  3184         	fcall	_turnOffLed
 10313                           
 10314                           ;led.c: 325: if ( gLedRunPara.nFlashCount > 0 )
 10315  0424  0022               	movlb	2	; select bank2
 10316  0425  0858               	movf	(_gLedRunPara^(0+256)+1),w	;volatile
 10317  0426  1D03               	btfss	3,2
 10318                           
 10319                           ;led.c: 326: {
 10320                           ;led.c: 327: gLedRunPara.nFlashCount--;
 10321  0427  03D8               	decf	(_gLedRunPara^(0+256)+1),f	;volatile
 10322                           
 10323                           ;led.c: 328: }
 10324                           ;led.c: 329: if ( gLedRunPara.nFlashCount == 0 )
 10325  0428  0858               	movf	(_gLedRunPara^(0+256)+1),w	;volatile
 10326  0429  1D03               	btfss	3,2
 10327  042A  0008               	return
 10328                           
 10329                           ;led.c: 330: {
 10330                           ;led.c: 331: gLedRunPara.find = 0;
 10331  042B  1057               	bcf	_gLedRunPara^(0+256),0	;volatile
 10332                           
 10333                           ;led.c: 333: initLedStatus();
 10334  042C  2C6A               	ljmp	l3687
 10335  042D                     l519:	
 10336                           
 10337                           ;led.c: 336: else
 10338                           ;led.c: 337: {
 10339                           ;led.c: 338: tog = 1;
 10340  042D  01E0               	clrf	findDeviceFlash@tog^(0+128)
 10341  042E  0AE0               	incf	findDeviceFlash@tog^(0+128),f
 10342                           
 10343                           ;led.c: 339: turnMaxLed();
 10344  042F  2C48               	ljmp	l3591
 10345  0430                     __end_of_findDeviceFlash:	
 10346  0430                     __ptext20:	
 10347 ;; *************** function _turnOffLed *****************
 10348 ;; Defined at:
 10349 ;;		line 169 in file "src/led.c"
 10350 ;; Parameters:    Size  Location     Type
 10351 ;;		None
 10352 ;; Auto vars:     Size  Location     Type
 10353 ;;		None
 10354 ;; Return value:  Size  Location     Type
 10355 ;;                  1    wreg      void 
 10356 ;; Registers used:
 10357 ;;		wreg, status,2, status,0, pclath, cstack
 10358 ;; Tracked objects:
 10359 ;;		On entry : 1F/1
 10360 ;;		On exit  : 1F/C
 10361 ;;		Unchanged: 0/0
 10362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10367 ;;Total ram usage:        0 bytes
 10368 ;; Hardware stack levels used:    1
 10369 ;; Hardware stack levels required when called:    7
 10370 ;; This function calls:
 10371 ;;		_PWM1_LoadDutyValue
 10372 ;;		_PWM2_LoadDutyValue
 10373 ;;		_PWM3_LoadDutyValue
 10374 ;;		_PWM4_LoadDutyValue
 10375 ;;		_PWM5_LoadDutyValue
 10376 ;; This function is called by:
 10377 ;;		_findDeviceFlash
 10378 ;; This function uses a non-reentrant model
 10379 ;;
 10380                           
 10381                           
 10382                           ;psect for function _turnOffLed
 10383  0430                     _turnOffLed:	
 10384                           
 10385                           ;led.c: 171: PWM1_LoadDutyValue(0);
 10386                           
 10387                           ;incstack = 0
 10388                           ; Regs used in _turnOffLed: [wreg+status,2+status,0+pclath+cstack]
 10389  0430  0020               	movlb	0	; select bank0
 10390  0431  01A0               	clrf	PWM1_LoadDutyValue@dutyValue
 10391  0432  01A1               	clrf	PWM1_LoadDutyValue@dutyValue+1
 10392  0433  24F7  3184         	fcall	_PWM1_LoadDutyValue
 10393                           
 10394                           ;led.c: 172: PWM2_LoadDutyValue(0);
 10395  0435  0020               	movlb	0	; select bank0
 10396  0436  01A0               	clrf	PWM2_LoadDutyValue@dutyValue
 10397  0437  01A1               	clrf	PWM2_LoadDutyValue@dutyValue+1
 10398  0438  2507  3184         	fcall	_PWM2_LoadDutyValue
 10399                           
 10400                           ;led.c: 173: PWM3_LoadDutyValue(0);
 10401  043A  0020               	movlb	0	; select bank0
 10402  043B  01A0               	clrf	PWM3_LoadDutyValue@dutyValue
 10403  043C  01A1               	clrf	PWM3_LoadDutyValue@dutyValue+1
 10404  043D  2517  3184         	fcall	_PWM3_LoadDutyValue
 10405                           
 10406                           ;led.c: 174: PWM4_LoadDutyValue(0);
 10407  043F  0020               	movlb	0	; select bank0
 10408  0440  01A0               	clrf	PWM4_LoadDutyValue@dutyValue
 10409  0441  01A1               	clrf	PWM4_LoadDutyValue@dutyValue+1
 10410  0442  2527  3184         	fcall	_PWM4_LoadDutyValue
 10411                           
 10412                           ;led.c: 175: PWM5_LoadDutyValue(0);
 10413  0444  0020               	movlb	0	; select bank0
 10414  0445  01A0               	clrf	PWM5_LoadDutyValue@dutyValue
 10415  0446  01A1               	clrf	PWM5_LoadDutyValue@dutyValue+1
 10416  0447  2D37               	ljmp	l2935
 10417  0448                     __end_of_turnOffLed:	
 10418  0448                     __ptext21:	
 10419 ;; *************** function _turnMaxLed *****************
 10420 ;; Defined at:
 10421 ;;		line 157 in file "src/led.c"
 10422 ;; Parameters:    Size  Location     Type
 10423 ;;		None
 10424 ;; Auto vars:     Size  Location     Type
 10425 ;;		None
 10426 ;; Return value:  Size  Location     Type
 10427 ;;                  1    wreg      void 
 10428 ;; Registers used:
 10429 ;;		wreg, status,2, status,0, pclath, cstack
 10430 ;; Tracked objects:
 10431 ;;		On entry : 1F/1
 10432 ;;		On exit  : 1F/C
 10433 ;;		Unchanged: 0/0
 10434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;Total ram usage:        0 bytes
 10440 ;; Hardware stack levels used:    1
 10441 ;; Hardware stack levels required when called:    7
 10442 ;; This function calls:
 10443 ;;		_PWM1_LoadDutyValue
 10444 ;;		_PWM2_LoadDutyValue
 10445 ;;		_PWM3_LoadDutyValue
 10446 ;;		_PWM4_LoadDutyValue
 10447 ;;		_PWM5_LoadDutyValue
 10448 ;; This function is called by:
 10449 ;;		_findDeviceFlash
 10450 ;; This function uses a non-reentrant model
 10451 ;;
 10452                           
 10453                           
 10454                           ;psect for function _turnMaxLed
 10455  0448                     _turnMaxLed:	
 10456  0448                     l3591:	
 10457                           ;incstack = 0
 10458                           ; Regs used in _turnMaxLed: [wreg+status,2+status,0+pclath+cstack]
 10459                           
 10460                           
 10461                           ;led.c: 159: PWM1_LoadDutyValue(1000);
 10462  0448  30E8               	movlw	232
 10463  0449  0020               	movlb	0	; select bank0
 10464  044A  00A0               	movwf	PWM1_LoadDutyValue@dutyValue
 10465  044B  3003               	movlw	3
 10466  044C  00A1               	movwf	PWM1_LoadDutyValue@dutyValue+1
 10467  044D  24F7  3184         	fcall	_PWM1_LoadDutyValue
 10468                           
 10469                           ;led.c: 160: PWM2_LoadDutyValue(1000);
 10470  044F  30E8               	movlw	232
 10471  0450  0020               	movlb	0	; select bank0
 10472  0451  00A0               	movwf	PWM2_LoadDutyValue@dutyValue
 10473  0452  3003               	movlw	3
 10474  0453  00A1               	movwf	PWM2_LoadDutyValue@dutyValue+1
 10475  0454  2507  3184         	fcall	_PWM2_LoadDutyValue
 10476                           
 10477                           ;led.c: 161: PWM3_LoadDutyValue(1000);
 10478  0456  30E8               	movlw	232
 10479  0457  0020               	movlb	0	; select bank0
 10480  0458  00A0               	movwf	PWM3_LoadDutyValue@dutyValue
 10481  0459  3003               	movlw	3
 10482  045A  00A1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 10483  045B  2517  3184         	fcall	_PWM3_LoadDutyValue
 10484                           
 10485                           ;led.c: 162: PWM4_LoadDutyValue(1000);
 10486  045D  30E8               	movlw	232
 10487  045E  0020               	movlb	0	; select bank0
 10488  045F  00A0               	movwf	PWM4_LoadDutyValue@dutyValue
 10489  0460  3003               	movlw	3
 10490  0461  00A1               	movwf	PWM4_LoadDutyValue@dutyValue+1
 10491  0462  2527  3184         	fcall	_PWM4_LoadDutyValue
 10492                           
 10493                           ;led.c: 163: PWM5_LoadDutyValue(1000);
 10494  0464  30E8               	movlw	232
 10495  0465  0020               	movlb	0	; select bank0
 10496  0466  00A0               	movwf	PWM5_LoadDutyValue@dutyValue
 10497  0467  3003               	movlw	3
 10498  0468  00A1               	movwf	PWM5_LoadDutyValue@dutyValue+1
 10499  0469  2D37               	ljmp	l2935
 10500  046A                     __end_of_turnMaxLed:	
 10501  046A                     __ptext22:	
 10502 ;; *************** function _initLedStatus *****************
 10503 ;; Defined at:
 10504 ;;		line 267 in file "src/led.c"
 10505 ;; Parameters:    Size  Location     Type
 10506 ;;		None
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;  sta             1    5[BANK0 ] unsigned char 
 10509 ;; Return value:  Size  Location     Type
 10510 ;;                  1    wreg      void 
 10511 ;; Registers used:
 10512 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10513 ;; Tracked objects:
 10514 ;;		On entry : 1F/2
 10515 ;;		On exit  : 1D/0
 10516 ;;		Unchanged: 0/0
 10517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10519 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10521 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10522 ;;Total ram usage:        1 bytes
 10523 ;; Hardware stack levels used:    1
 10524 ;; Hardware stack levels required when called:    9
 10525 ;; This function calls:
 10526 ;;		_indicateLedBle
 10527 ;;		_indicateLedDay
 10528 ;;		_indicateLedNight
 10529 ;;		_indicateLedOff
 10530 ;;		_turnOffLedRamp
 10531 ;;		_turnOnLedRamp
 10532 ;;		_updateDayBright
 10533 ;;		_updateNightBright
 10534 ;; This function is called by:
 10535 ;;		_initLed
 10536 ;;		_findDeviceFlash
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           
 10541                           ;psect for function _initLedStatus
 10542  046A                     _initLedStatus:	
 10543  046A                     l3687:	
 10544                           ;incstack = 0
 10545                           ; Regs used in _initLedStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10546                           
 10547                           
 10548                           ;led.c: 269: unsigned char sta = gLedPara.fSta;
 10549  046A  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 10550  046B  3903               	andlw	3
 10551  046C  0020               	movlb	0	; select bank0
 10552  046D  00A5               	movwf	initLedStatus@sta
 10553                           
 10554                           ; Switch size 1, requested type "space"
 10555                           ; Number of cases is 4, Range of values is 0 to 3
 10556                           ; switch strategies available:
 10557                           ; Name         Instructions Cycles
 10558                           ; simple_byte           13     7 (average)
 10559                           ; direct_byte           14     6 (fixed)
 10560                           ; jumptable            260     6 (fixed)
 10561                           ;	Chosen strategy is simple_byte
 10562                           
 10563                           ;led.c: 270: switch ( sta )
 10564  046E  1903               	skipnz
 10565  046F  2C7A               	goto	l3689
 10566  0470  3A01               	xorlw	1	; case 1
 10567  0471  1903               	skipnz
 10568  0472  2C7E               	goto	l3693
 10569  0473  3A03               	xorlw	3	; case 2
 10570  0474  1903               	skipnz
 10571  0475  2C83               	goto	l3699
 10572  0476  3A01               	xorlw	1	; case 3
 10573  0477  1903               	skipnz
 10574  0478  2C88               	goto	l3705
 10575  0479  2C91               	goto	l511
 10576  047A                     l3689:	
 10577                           
 10578                           ;led.c: 273: turnOffLedRamp();
 10579  047A  318E  26CB  3184   	fcall	_turnOffLedRamp
 10580                           
 10581                           ;led.c: 274: indicateLedOff();
 10582  047D  2F2E               	ljmp	PL84
 10583  047E                     l3693:	
 10584                           ;led.c: 275: break;
 10585                           
 10586                           
 10587                           ;led.c: 278: updateDayBright();
 10588  047E  2494  3184         	fcall	_updateDayBright
 10589                           
 10590                           ;led.c: 279: indicateLedDay();
 10591  0480  2492               	fcall	_indicateLedDay
 10592  0481                     l3697:	
 10593                           
 10594                           ;led.c: 280: turnOnLedRamp();
 10595  0481  318E  2EDB         	ljmp	l3063
 10596  0483                     l3699:	
 10597                           ;led.c: 281: break;
 10598                           
 10599                           
 10600                           ;led.c: 284: updateNightBright();
 10601  0483  24AA  3184         	fcall	_updateNightBright
 10602                           
 10603                           ;led.c: 285: indicateLedNight();
 10604  0485  2493  3184         	fcall	_indicateLedNight
 10605  0487  2C81               	goto	l3697
 10606  0488                     l3705:	
 10607                           
 10608                           ;led.c: 290: indicateLedBle();
 10609  0488  318F  273A  3184   	fcall	_indicateLedBle
 10610                           
 10611                           ;led.c: 291: if ( !gLedPara.fAuto )
 10612  048B  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 10613  048C  0008               	return
 10614                           
 10615                           ;led.c: 292: {
 10616                           ;led.c: 293: if ( gLedPara.mPara.manualPara.fOn )
 10617  048D  1821               	btfsc	(_gLedPara^(0+256)+1),0	;volatile
 10618  048E  2C81               	goto	l3697
 10619                           
 10620                           ;led.c: 297: else
 10621                           ;led.c: 298: {
 10622                           ;led.c: 299: turnOffLedRamp();
 10623  048F  318E  2ECB         	ljmp	l3075
 10624  0491                     l511:	
 10625  0491  0008               	return
 10626  0492                     __end_of_initLedStatus:	
 10627  0492                     __ptext27:	
 10628 ;; *************** function _indicateLedDay *****************
 10629 ;; Defined at:
 10630 ;;		line 366 in file "src/led.c"
 10631 ;; Parameters:    Size  Location     Type
 10632 ;;		None
 10633 ;; Auto vars:     Size  Location     Type
 10634 ;;		None
 10635 ;; Return value:  Size  Location     Type
 10636 ;;                  1    wreg      void 
 10637 ;; Registers used:
 10638 ;;		None
 10639 ;; Tracked objects:
 10640 ;;		On entry : 1F/6
 10641 ;;		On exit  : 1F/2
 10642 ;;		Unchanged: 0/0
 10643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10648 ;;Total ram usage:        0 bytes
 10649 ;; Hardware stack levels used:    1
 10650 ;; Hardware stack levels required when called:    6
 10651 ;; This function calls:
 10652 ;;		Nothing
 10653 ;; This function is called by:
 10654 ;;		_initLedStatus
 10655 ;; This function uses a non-reentrant model
 10656 ;;
 10657                           
 10658                           
 10659                           ;psect for function _indicateLedDay
 10660  0492                     _indicateLedDay:	
 10661                           
 10662                           ;incstack = 0
 10663                           ; Regs used in _indicateLedDay: []
 10664                           ;led.c: 368: do { LATBbits.LATB6 = 0; } while(0);
 10665                           
 10666                           ;led.c: 369: do { LATAbits.LATA1 = 0; } while(0);
 10667                           
 10668                           ;led.c: 370: do { LATBbits.LATB7 = 0; } while(0);
 10669  0492  2F33               	ljmp	PL86	;call to abstracted procedure
 10670  0493                     __end_of_indicateLedDay:	
 10671  0493                     __ptext26:	
 10672 ;; *************** function _indicateLedNight *****************
 10673 ;; Defined at:
 10674 ;;		line 375 in file "src/led.c"
 10675 ;; Parameters:    Size  Location     Type
 10676 ;;		None
 10677 ;; Auto vars:     Size  Location     Type
 10678 ;;		None
 10679 ;; Return value:  Size  Location     Type
 10680 ;;                  1    wreg      void 
 10681 ;; Registers used:
 10682 ;;		None
 10683 ;; Tracked objects:
 10684 ;;		On entry : 1F/6
 10685 ;;		On exit  : 1F/2
 10686 ;;		Unchanged: 0/0
 10687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10692 ;;Total ram usage:        0 bytes
 10693 ;; Hardware stack levels used:    1
 10694 ;; Hardware stack levels required when called:    6
 10695 ;; This function calls:
 10696 ;;		Nothing
 10697 ;; This function is called by:
 10698 ;;		_initLedStatus
 10699 ;; This function uses a non-reentrant model
 10700 ;;
 10701                           
 10702                           
 10703                           ;psect for function _indicateLedNight
 10704  0493                     _indicateLedNight:	
 10705                           
 10706                           ;incstack = 0
 10707                           ; Regs used in _indicateLedNight: []
 10708                           ;led.c: 377: do { LATBbits.LATB6 = 1; } while(0);
 10709                           
 10710                           ;led.c: 378: do { LATAbits.LATA1 = 1; } while(0);
 10711                           
 10712                           ;led.c: 379: do { LATBbits.LATB7 = 0; } while(0);
 10713  0493  2F38               	ljmp	PL88	;call to abstracted procedure
 10714  0494                     __end_of_indicateLedNight:	
 10715  0494                     __ptext24:	
 10716 ;; *************** function _updateDayBright *****************
 10717 ;; Defined at:
 10718 ;;		line 391 in file "src/led.c"
 10719 ;; Parameters:    Size  Location     Type
 10720 ;;		None
 10721 ;; Auto vars:     Size  Location     Type
 10722 ;;  i               1    4[BANK0 ] unsigned char 
 10723 ;; Return value:  Size  Location     Type
 10724 ;;                  1    wreg      void 
 10725 ;; Registers used:
 10726 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10727 ;; Tracked objects:
 10728 ;;		On entry : 1D/0
 10729 ;;		On exit  : 1F/6
 10730 ;;		Unchanged: 0/0
 10731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10735 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10736 ;;Total ram usage:        1 bytes
 10737 ;; Hardware stack levels used:    1
 10738 ;; Hardware stack levels required when called:    8
 10739 ;; This function calls:
 10740 ;;		_updatePWM
 10741 ;; This function is called by:
 10742 ;;		_initLedStatus
 10743 ;; This function uses a non-reentrant model
 10744 ;;
 10745                           
 10746                           
 10747                           ;psect for function _updateDayBright
 10748  0494                     _updateDayBright:	
 10749                           
 10750                           ;led.c: 393: for ( unsigned char i = 0; i < 5; i++ )
 10751                           
 10752                           ;incstack = 0
 10753                           ; Regs used in _updateDayBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10754  0494  0020               	movlb	0	; select bank0
 10755  0495  01A4               	clrf	updateDayBright@i
 10756  0496                     l3121:	
 10757                           
 10758                           ;led.c: 394: {
 10759                           ;led.c: 395: gLedPara.mPara.manualPara.nBrt[i] = gLedPara.tPara.nDayBrt;
 10760  0496  3524               	lslf	updateDayBright@i,w
 10761  0497  3E23               	addlw	(low ((_gLedPara| (0+256)+3)))& (0+255)
 10762  0498  2705  3184         	fcall	PL38	;call to abstracted procedure
 10763                           
 10764                           ;led.c: 396: gLedRunPara.nCurrentBrt[i] = gLedPara.tPara.nDayBrt;
 10765  049A  0020               	movlb	0	; select bank0
 10766  049B  3524               	lslf	updateDayBright@i,w
 10767  049C  3E65               	addlw	(low ((_gLedRunPara| (0+256)+14)))& (0+255)
 10768  049D  0086               	movwf	6
 10769  049E  0022               	movlb	2	; select bank2
 10770  049F  0853               	movf	(_gLedPara^(0+256)+51),w	;volatile
 10771  04A0  3FC0               	movwi [0]fsr1
 10772  04A1  0854               	movf	((_gLedPara+1)^(0+256)+51),w	;volatile
 10773  04A2  3FC1               	movwi [1]fsr1
 10774  04A3  0020               	movlb	0	; select bank0
 10775  04A4  3005               	movlw	5
 10776  04A5  0AA4               	incf	updateDayBright@i,f
 10777  04A6  0224               	subwf	updateDayBright@i,w
 10778  04A7  1C03               	skipc
 10779  04A8  2C96               	goto	l3121
 10780                           
 10781                           ;led.c: 397: }
 10782                           ;led.c: 398: updatePWM();
 10783  04A9  2CC6               	ljmp	l2991
 10784  04AA                     __end_of_updateDayBright:	
 10785  04AA                     __ptext23:	
 10786 ;; *************** function _updateNightBright *****************
 10787 ;; Defined at:
 10788 ;;		line 413 in file "src/led.c"
 10789 ;; Parameters:    Size  Location     Type
 10790 ;;		None
 10791 ;; Auto vars:     Size  Location     Type
 10792 ;;  i               1    4[BANK0 ] unsigned char 
 10793 ;; Return value:  Size  Location     Type
 10794 ;;                  1    wreg      void 
 10795 ;; Registers used:
 10796 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10797 ;; Tracked objects:
 10798 ;;		On entry : 1D/0
 10799 ;;		On exit  : 1F/6
 10800 ;;		Unchanged: 0/0
 10801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10803 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10805 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10806 ;;Total ram usage:        1 bytes
 10807 ;; Hardware stack levels used:    1
 10808 ;; Hardware stack levels required when called:    8
 10809 ;; This function calls:
 10810 ;;		_updatePWM
 10811 ;; This function is called by:
 10812 ;;		_initLedStatus
 10813 ;; This function uses a non-reentrant model
 10814 ;;
 10815                           
 10816                           
 10817                           ;psect for function _updateNightBright
 10818  04AA                     _updateNightBright:	
 10819                           
 10820                           ;led.c: 416: for ( unsigned char i = 0; i < 5; i++ )
 10821                           
 10822                           ;incstack = 0
 10823                           ; Regs used in _updateNightBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10824  04AA  0020               	movlb	0	; select bank0
 10825  04AB  01A4               	clrf	updateNightBright@i
 10826  04AC                     l3143:	
 10827                           
 10828                           ;led.c: 417: {
 10829                           ;led.c: 418: if ( i == 1 )
 10830  04AC  0B24               	decfsz	updateNightBright@i,w
 10831  04AD  2CB9               	goto	l3147
 10832                           
 10833                           ;led.c: 419: {
 10834                           ;led.c: 420: gLedPara.mPara.manualPara.nBrt[i] = gLedPara.tPara.nNightBrt;
 10835  04AE  3524               	lslf	updateNightBright@i,w
 10836  04AF  26FB  3184         	fcall	PL32	;call to abstracted procedure
 10837                           
 10838                           ;led.c: 421: gLedRunPara.nCurrentBrt[i] = gLedPara.tPara.nNightBrt;
 10839  04B1  0020               	movlb	0	; select bank0
 10840  04B2  3524               	lslf	updateNightBright@i,w
 10841  04B3  3E65               	addlw	(low ((_gLedRunPara| (0+256)+14)))& (0+255)
 10842  04B4  0086               	movwf	6
 10843  04B5  0022               	movlb	2	; select bank2
 10844  04B6  2747  3184         	fcall	PL94	;call to abstracted procedure
 10845                           
 10846                           ;led.c: 422: }
 10847  04B8  2CBF               	goto	l3149
 10848  04B9                     l3147:	
 10849                           
 10850                           ;led.c: 423: else
 10851                           ;led.c: 424: {
 10852                           ;led.c: 425: gLedPara.mPara.manualPara.nBrt[i] = 0;
 10853  04B9  3524               	lslf	updateNightBright@i,w
 10854  04BA  26E8  3184         	fcall	PL10	;call to abstracted procedure
 10855                           
 10856                           ;led.c: 426: gLedRunPara.nCurrentBrt[i] = 0;
 10857  04BC  3524               	lslf	updateNightBright@i,w
 10858  04BD  271E  3184         	fcall	PL58	;call to abstracted procedure
 10859  04BF                     l3149:	
 10860  04BF  0020               	movlb	0	; select bank0
 10861  04C0  3005               	movlw	5
 10862  04C1  0AA4               	incf	updateNightBright@i,f
 10863  04C2  0224               	subwf	updateNightBright@i,w
 10864  04C3  1C03               	skipc
 10865  04C4  2CAC               	goto	l3143
 10866                           
 10867                           ;led.c: 427: }
 10868                           ;led.c: 428: }
 10869                           ;led.c: 429: updatePWM();
 10870  04C5  2CC6               	ljmp	l2991
 10871  04C6                     __end_of_updateNightBright:	
 10872  04C6                     __ptext46:	
 10873 ;; *************** function _updatePWM *****************
 10874 ;; Defined at:
 10875 ;;		line 7 in file "src/led.c"
 10876 ;; Parameters:    Size  Location     Type
 10877 ;;		None
 10878 ;; Auto vars:     Size  Location     Type
 10879 ;;		None
 10880 ;; Return value:  Size  Location     Type
 10881 ;;                  1    wreg      void 
 10882 ;; Registers used:
 10883 ;;		wreg, status,2, status,0, pclath, cstack
 10884 ;; Tracked objects:
 10885 ;;		On entry : 1F/0
 10886 ;;		On exit  : 1F/6
 10887 ;;		Unchanged: 0/0
 10888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10893 ;;Total ram usage:        0 bytes
 10894 ;; Hardware stack levels used:    1
 10895 ;; Hardware stack levels required when called:    7
 10896 ;; This function calls:
 10897 ;;		_PWM1_LoadDutyValue
 10898 ;;		_PWM2_LoadDutyValue
 10899 ;;		_PWM3_LoadDutyValue
 10900 ;;		_PWM4_LoadDutyValue
 10901 ;;		_PWM5_LoadDutyValue
 10902 ;; This function is called by:
 10903 ;;		_DecodeDATA
 10904 ;;		_autoRun
 10905 ;;		_updateDayBright
 10906 ;;		_updateNightBright
 10907 ;; This function uses a non-reentrant model
 10908 ;;
 10909                           
 10910                           
 10911                           ;psect for function _updatePWM
 10912  04C6                     _updatePWM:	
 10913  04C6                     l2991:	
 10914                           ;incstack = 0
 10915                           ; Regs used in _updatePWM: [wreg+status,2+status,0+pclath+cstack]
 10916                           
 10917                           
 10918                           ;led.c: 28: PWM3_LoadDutyValue( gLedRunPara.nCurrentBrt[0] );
 10919  04C6  0022               	movlb	2	; select bank2
 10920  04C7  0866               	movf	((_gLedRunPara+1)^(0+256)+14),w	;volatile
 10921  04C8  0020               	movlb	0	; select bank0
 10922  04C9  00A1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 10923  04CA  0022               	movlb	2	; select bank2
 10924  04CB  0865               	movf	(_gLedRunPara^(0+256)+14),w	;volatile
 10925  04CC  0020               	movlb	0	; select bank0
 10926  04CD  00A0               	movwf	PWM3_LoadDutyValue@dutyValue
 10927  04CE  2517  3184         	fcall	_PWM3_LoadDutyValue
 10928                           
 10929                           ;led.c: 29: PWM2_LoadDutyValue( gLedRunPara.nCurrentBrt[1] );
 10930  04D0  0022               	movlb	2	; select bank2
 10931  04D1  0868               	movf	((_gLedRunPara+1)^(0+256)+16),w	;volatile
 10932  04D2  0020               	movlb	0	; select bank0
 10933  04D3  00A1               	movwf	PWM2_LoadDutyValue@dutyValue+1
 10934  04D4  0022               	movlb	2	; select bank2
 10935  04D5  0867               	movf	(_gLedRunPara^(0+256)+16),w	;volatile
 10936  04D6  0020               	movlb	0	; select bank0
 10937  04D7  00A0               	movwf	PWM2_LoadDutyValue@dutyValue
 10938  04D8  2507  3184         	fcall	_PWM2_LoadDutyValue
 10939                           
 10940                           ;led.c: 30: PWM1_LoadDutyValue( gLedRunPara.nCurrentBrt[2] );
 10941  04DA  0022               	movlb	2	; select bank2
 10942  04DB  086A               	movf	((_gLedRunPara+1)^(0+256)+18),w	;volatile
 10943  04DC  0020               	movlb	0	; select bank0
 10944  04DD  00A1               	movwf	PWM1_LoadDutyValue@dutyValue+1
 10945  04DE  0022               	movlb	2	; select bank2
 10946  04DF  0869               	movf	(_gLedRunPara^(0+256)+18),w	;volatile
 10947  04E0  0020               	movlb	0	; select bank0
 10948  04E1  00A0               	movwf	PWM1_LoadDutyValue@dutyValue
 10949  04E2  24F7  3184         	fcall	_PWM1_LoadDutyValue
 10950                           
 10951                           ;led.c: 31: PWM5_LoadDutyValue( gLedRunPara.nCurrentBrt[3] );
 10952  04E4  0022               	movlb	2	; select bank2
 10953  04E5  086C               	movf	((_gLedRunPara+1)^(0+256)+20),w	;volatile
 10954  04E6  0020               	movlb	0	; select bank0
 10955  04E7  00A1               	movwf	PWM5_LoadDutyValue@dutyValue+1
 10956  04E8  0022               	movlb	2	; select bank2
 10957  04E9  086B               	movf	(_gLedRunPara^(0+256)+20),w	;volatile
 10958  04EA  0020               	movlb	0	; select bank0
 10959  04EB  00A0               	movwf	PWM5_LoadDutyValue@dutyValue
 10960  04EC  2537  3184         	fcall	_PWM5_LoadDutyValue
 10961                           
 10962                           ;led.c: 32: PWM4_LoadDutyValue( gLedRunPara.nCurrentBrt[4] );
 10963  04EE  0022               	movlb	2	; select bank2
 10964  04EF  086E               	movf	((_gLedRunPara+1)^(0+256)+22),w	;volatile
 10965  04F0  0020               	movlb	0	; select bank0
 10966  04F1  00A1               	movwf	PWM4_LoadDutyValue@dutyValue+1
 10967  04F2  0022               	movlb	2	; select bank2
 10968  04F3  086D               	movf	(_gLedRunPara^(0+256)+22),w	;volatile
 10969  04F4  0020               	movlb	0	; select bank0
 10970  04F5  00A0               	movwf	PWM4_LoadDutyValue@dutyValue
 10971  04F6  2D27               	ljmp	l2941
 10972  04F7                     __end_of_updatePWM:	
 10973  04F7                     __ptext51:	
 10974 ;; *************** function _PWM1_LoadDutyValue *****************
 10975 ;; Defined at:
 10976 ;;		line 21 in file "src/pwm.c"
 10977 ;; Parameters:    Size  Location     Type
 10978 ;;  dutyValue       2    0[BANK0 ] unsigned int 
 10979 ;; Auto vars:     Size  Location     Type
 10980 ;;		None
 10981 ;; Return value:  Size  Location     Type
 10982 ;;                  1    wreg      void 
 10983 ;; Registers used:
 10984 ;;		wreg
 10985 ;; Tracked objects:
 10986 ;;		On entry : 1F/0
 10987 ;;		On exit  : 1F/5
 10988 ;;		Unchanged: 0/0
 10989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10990 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10993 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10994 ;;Total ram usage:        2 bytes
 10995 ;; Hardware stack levels used:    1
 10996 ;; Hardware stack levels required when called:    6
 10997 ;; This function calls:
 10998 ;;		Nothing
 10999 ;; This function is called by:
 11000 ;;		_updatePWM
 11001 ;;		_turnMaxLed
 11002 ;;		_turnOffLed
 11003 ;; This function uses a non-reentrant model
 11004 ;;
 11005                           
 11006                           
 11007                           ;psect for function _PWM1_LoadDutyValue
 11008  04F7                     _PWM1_LoadDutyValue:	
 11009                           
 11010                           ;pwm.c: 23: dutyValue &= 0x03FF;
 11011                           
 11012                           ;incstack = 0
 11013                           ; Regs used in _PWM1_LoadDutyValue: [wreg]
 11014  04F7  30FF               	movlw	255
 11015  04F8  05A0               	andwf	PWM1_LoadDutyValue@dutyValue,f
 11016  04F9  3003               	movlw	3
 11017  04FA  05A1               	andwf	PWM1_LoadDutyValue@dutyValue+1,f
 11018                           
 11019                           ;pwm.c: 26: if( CCP1CONbits.CCP1FMT )
 11020  04FB  0025               	movlb	5	; select bank5
 11021  04FC  1E13               	btfss	19,4	;volatile
 11022  04FD  2D05               	goto	l2933
 11023                           
 11024                           ;pwm.c: 27: {
 11025                           ;pwm.c: 28: dutyValue <<= 6;
 11026  04FE  3006               	movlw	6
 11027  04FF  0020               	movlb	0	; select bank0
 11028  0500                     u2235:	
 11029  0500  35A0               	lslf	PWM1_LoadDutyValue@dutyValue,f
 11030  0501  0DA1               	rlf	PWM1_LoadDutyValue@dutyValue+1,f
 11031  0502  0B89               	decfsz	9,f
 11032  0503  2D00               	goto	u2235
 11033                           
 11034                           ;pwm.c: 29: CCPR1H = dutyValue >> 8;
 11035                           
 11036                           ;pwm.c: 30: CCPR1L = dutyValue;
 11037                           
 11038                           ;pwm.c: 31: }
 11039  0504  2D59               	ljmp	PL40	;call to abstracted procedure
 11040  0505                     l2933:	
 11041                           
 11042                           ;pwm.c: 32: else
 11043                           ;pwm.c: 33: {
 11044                           ;pwm.c: 34: CCPR1H = dutyValue >> 8;
 11045  0505  0020               	movlb	0	; select bank0
 11046                           
 11047                           ;pwm.c: 35: CCPR1L = dutyValue;
 11048  0506  2D59               	ljmp	PL40	;call to abstracted procedure
 11049  0507                     __end_of_PWM1_LoadDutyValue:	
 11050  0507                     __ptext50:	
 11051 ;; *************** function _PWM2_LoadDutyValue *****************
 11052 ;; Defined at:
 11053 ;;		line 56 in file "src/pwm.c"
 11054 ;; Parameters:    Size  Location     Type
 11055 ;;  dutyValue       2    0[BANK0 ] unsigned int 
 11056 ;; Auto vars:     Size  Location     Type
 11057 ;;		None
 11058 ;; Return value:  Size  Location     Type
 11059 ;;                  1    wreg      void 
 11060 ;; Registers used:
 11061 ;;		wreg
 11062 ;; Tracked objects:
 11063 ;;		On entry : 1F/0
 11064 ;;		On exit  : 1F/5
 11065 ;;		Unchanged: 0/0
 11066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11067 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11070 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11071 ;;Total ram usage:        2 bytes
 11072 ;; Hardware stack levels used:    1
 11073 ;; Hardware stack levels required when called:    6
 11074 ;; This function calls:
 11075 ;;		Nothing
 11076 ;; This function is called by:
 11077 ;;		_updatePWM
 11078 ;;		_turnMaxLed
 11079 ;;		_turnOffLed
 11080 ;; This function uses a non-reentrant model
 11081 ;;
 11082                           
 11083                           
 11084                           ;psect for function _PWM2_LoadDutyValue
 11085  0507                     _PWM2_LoadDutyValue:	
 11086                           
 11087                           ;pwm.c: 58: dutyValue &= 0x03FF;
 11088                           
 11089                           ;incstack = 0
 11090                           ; Regs used in _PWM2_LoadDutyValue: [wreg]
 11091  0507  30FF               	movlw	255
 11092  0508  05A0               	andwf	PWM2_LoadDutyValue@dutyValue,f
 11093  0509  3003               	movlw	3
 11094  050A  05A1               	andwf	PWM2_LoadDutyValue@dutyValue+1,f
 11095                           
 11096                           ;pwm.c: 61: if( CCP2CONbits.CCP2FMT )
 11097  050B  0025               	movlb	5	; select bank5
 11098  050C  1E17               	btfss	23,4	;volatile
 11099  050D  2D15               	goto	l2925
 11100                           
 11101                           ;pwm.c: 62: {
 11102                           ;pwm.c: 63: dutyValue <<= 6;
 11103  050E  3006               	movlw	6
 11104  050F  0020               	movlb	0	; select bank0
 11105  0510                     u2215:	
 11106  0510  35A0               	lslf	PWM2_LoadDutyValue@dutyValue,f
 11107  0511  0DA1               	rlf	PWM2_LoadDutyValue@dutyValue+1,f
 11108  0512  0B89               	decfsz	9,f
 11109  0513  2D10               	goto	u2215
 11110                           
 11111                           ;pwm.c: 64: CCPR2H = dutyValue >> 8;
 11112                           
 11113                           ;pwm.c: 65: CCPR2L = dutyValue;
 11114                           
 11115                           ;pwm.c: 66: }
 11116  0514  2D61               	ljmp	PL42	;call to abstracted procedure
 11117  0515                     l2925:	
 11118                           
 11119                           ;pwm.c: 67: else
 11120                           ;pwm.c: 68: {
 11121                           ;pwm.c: 69: CCPR2H = dutyValue >> 8;
 11122  0515  0020               	movlb	0	; select bank0
 11123                           
 11124                           ;pwm.c: 70: CCPR2L = dutyValue;
 11125  0516  2D61               	ljmp	PL42	;call to abstracted procedure
 11126  0517                     __end_of_PWM2_LoadDutyValue:	
 11127  0517                     __ptext49:	
 11128 ;; *************** function _PWM3_LoadDutyValue *****************
 11129 ;; Defined at:
 11130 ;;		line 91 in file "src/pwm.c"
 11131 ;; Parameters:    Size  Location     Type
 11132 ;;  dutyValue       2    0[BANK0 ] unsigned int 
 11133 ;; Auto vars:     Size  Location     Type
 11134 ;;		None
 11135 ;; Return value:  Size  Location     Type
 11136 ;;                  1    wreg      void 
 11137 ;; Registers used:
 11138 ;;		wreg
 11139 ;; Tracked objects:
 11140 ;;		On entry : 1F/0
 11141 ;;		On exit  : 1F/6
 11142 ;;		Unchanged: 0/0
 11143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11144 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;Total ram usage:        2 bytes
 11149 ;; Hardware stack levels used:    1
 11150 ;; Hardware stack levels required when called:    6
 11151 ;; This function calls:
 11152 ;;		Nothing
 11153 ;; This function is called by:
 11154 ;;		_updatePWM
 11155 ;;		_turnMaxLed
 11156 ;;		_turnOffLed
 11157 ;; This function uses a non-reentrant model
 11158 ;;
 11159                           
 11160                           
 11161                           ;psect for function _PWM3_LoadDutyValue
 11162  0517                     _PWM3_LoadDutyValue:	
 11163                           
 11164                           ;pwm.c: 93: dutyValue &= 0x03FF;
 11165                           
 11166                           ;incstack = 0
 11167                           ; Regs used in _PWM3_LoadDutyValue: [wreg]
 11168  0517  30FF               	movlw	255
 11169  0518  05A0               	andwf	PWM3_LoadDutyValue@dutyValue,f
 11170  0519  3003               	movlw	3
 11171  051A  05A1               	andwf	PWM3_LoadDutyValue@dutyValue+1,f
 11172                           
 11173                           ;pwm.c: 96: if( CCP3CONbits.CCP3FMT )
 11174  051B  0026               	movlb	6	; select bank6
 11175  051C  1E13               	btfss	19,4	;volatile
 11176  051D  2D25               	goto	l2917
 11177                           
 11178                           ;pwm.c: 97: {
 11179                           ;pwm.c: 98: dutyValue <<= 6;
 11180  051E  3006               	movlw	6
 11181  051F  0020               	movlb	0	; select bank0
 11182  0520                     u2195:	
 11183  0520  35A0               	lslf	PWM3_LoadDutyValue@dutyValue,f
 11184  0521  0DA1               	rlf	PWM3_LoadDutyValue@dutyValue+1,f
 11185  0522  0B89               	decfsz	9,f
 11186  0523  2D20               	goto	u2195
 11187                           
 11188                           ;pwm.c: 99: CCPR3H = dutyValue >> 8;
 11189                           
 11190                           ;pwm.c: 100: CCPR3L = dutyValue;
 11191                           
 11192                           ;pwm.c: 101: }
 11193  0524  2D69               	ljmp	PL46	;call to abstracted procedure
 11194  0525                     l2917:	
 11195                           
 11196                           ;pwm.c: 102: else
 11197                           ;pwm.c: 103: {
 11198                           ;pwm.c: 104: CCPR3H = dutyValue >> 8;
 11199  0525  0020               	movlb	0	; select bank0
 11200                           
 11201                           ;pwm.c: 105: CCPR3L = dutyValue;
 11202  0526  2D69               	ljmp	PL46	;call to abstracted procedure
 11203  0527                     __end_of_PWM3_LoadDutyValue:	
 11204  0527                     __ptext48:	
 11205 ;; *************** function _PWM4_LoadDutyValue *****************
 11206 ;; Defined at:
 11207 ;;		line 126 in file "src/pwm.c"
 11208 ;; Parameters:    Size  Location     Type
 11209 ;;  dutyValue       2    0[BANK0 ] unsigned int 
 11210 ;; Auto vars:     Size  Location     Type
 11211 ;;		None
 11212 ;; Return value:  Size  Location     Type
 11213 ;;                  1    wreg      void 
 11214 ;; Registers used:
 11215 ;;		wreg
 11216 ;; Tracked objects:
 11217 ;;		On entry : 1F/0
 11218 ;;		On exit  : 1F/6
 11219 ;;		Unchanged: 0/0
 11220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11221 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;Total ram usage:        2 bytes
 11226 ;; Hardware stack levels used:    1
 11227 ;; Hardware stack levels required when called:    6
 11228 ;; This function calls:
 11229 ;;		Nothing
 11230 ;; This function is called by:
 11231 ;;		_updatePWM
 11232 ;;		_turnMaxLed
 11233 ;;		_turnOffLed
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           
 11238                           ;psect for function _PWM4_LoadDutyValue
 11239  0527                     _PWM4_LoadDutyValue:	
 11240  0527                     l2941:	
 11241                           ;incstack = 0
 11242                           ; Regs used in _PWM4_LoadDutyValue: [wreg]
 11243                           
 11244                           
 11245                           ;pwm.c: 128: dutyValue &= 0x03FF;
 11246  0527  30FF               	movlw	255
 11247  0528  05A0               	andwf	PWM4_LoadDutyValue@dutyValue,f
 11248  0529  3003               	movlw	3
 11249  052A  05A1               	andwf	PWM4_LoadDutyValue@dutyValue+1,f
 11250                           
 11251                           ;pwm.c: 131: if( CCP4CONbits.CCP4FMT )
 11252  052B  0026               	movlb	6	; select bank6
 11253  052C  1E17               	btfss	23,4	;volatile
 11254  052D  2D35               	goto	l2947
 11255                           
 11256                           ;pwm.c: 132: {
 11257                           ;pwm.c: 133: dutyValue <<= 6;
 11258  052E  3006               	movlw	6
 11259  052F  0020               	movlb	0	; select bank0
 11260  0530                     u2255:	
 11261  0530  35A0               	lslf	PWM4_LoadDutyValue@dutyValue,f
 11262  0531  0DA1               	rlf	PWM4_LoadDutyValue@dutyValue+1,f
 11263  0532  0B89               	decfsz	9,f
 11264  0533  2D30               	goto	u2255
 11265                           
 11266                           ;pwm.c: 134: CCPR4H = dutyValue >> 8;
 11267                           
 11268                           ;pwm.c: 135: CCPR4L = dutyValue;
 11269                           
 11270                           ;pwm.c: 136: }
 11271  0534  2D51               	ljmp	PL34	;call to abstracted procedure
 11272  0535                     l2947:	
 11273                           
 11274                           ;pwm.c: 137: else
 11275                           ;pwm.c: 138: {
 11276                           ;pwm.c: 139: CCPR4H = dutyValue >> 8;
 11277  0535  0020               	movlb	0	; select bank0
 11278                           
 11279                           ;pwm.c: 140: CCPR4L = dutyValue;
 11280  0536  2D51               	ljmp	PL34	;call to abstracted procedure
 11281  0537                     __end_of_PWM4_LoadDutyValue:	
 11282  0537                     __ptext47:	
 11283 ;; *************** function _PWM5_LoadDutyValue *****************
 11284 ;; Defined at:
 11285 ;;		line 152 in file "src/pwm.c"
 11286 ;; Parameters:    Size  Location     Type
 11287 ;;  dutyValue       2    0[BANK0 ] unsigned int 
 11288 ;; Auto vars:     Size  Location     Type
 11289 ;;		None
 11290 ;; Return value:  Size  Location     Type
 11291 ;;                  1    wreg      void 
 11292 ;; Registers used:
 11293 ;;		wreg, status,2, status,0
 11294 ;; Tracked objects:
 11295 ;;		On entry : 1F/0
 11296 ;;		On exit  : 1F/C
 11297 ;;		Unchanged: 0/0
 11298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11299 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11301 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11302 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11303 ;;Total ram usage:        4 bytes
 11304 ;; Hardware stack levels used:    1
 11305 ;; Hardware stack levels required when called:    6
 11306 ;; This function calls:
 11307 ;;		Nothing
 11308 ;; This function is called by:
 11309 ;;		_updatePWM
 11310 ;;		_turnMaxLed
 11311 ;;		_turnOffLed
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           
 11316                           ;psect for function _PWM5_LoadDutyValue
 11317  0537                     _PWM5_LoadDutyValue:	
 11318  0537                     l2935:	
 11319                           ;incstack = 0
 11320                           ; Regs used in _PWM5_LoadDutyValue: [wreg+status,2+status,0]
 11321                           
 11322                           
 11323                           ;pwm.c: 154: dutyValue &= 0x03FF;
 11324  0537  30FF               	movlw	255
 11325  0538  05A0               	andwf	PWM5_LoadDutyValue@dutyValue,f
 11326  0539  3003               	movlw	3
 11327  053A  05A1               	andwf	PWM5_LoadDutyValue@dutyValue+1,f
 11328                           
 11329                           ;pwm.c: 155: PWM5DCH = dutyValue >> 2;
 11330  053B  0821               	movf	PWM5_LoadDutyValue@dutyValue+1,w
 11331  053C  00A3               	movwf	??_PWM5_LoadDutyValue+1
 11332  053D  0820               	movf	PWM5_LoadDutyValue@dutyValue,w
 11333  053E  00A2               	movwf	??_PWM5_LoadDutyValue
 11334  053F  36A3               	lsrf	??_PWM5_LoadDutyValue+1,f
 11335  0540  0CA2               	rrf	??_PWM5_LoadDutyValue,f
 11336  0541  36A3               	lsrf	??_PWM5_LoadDutyValue+1,f
 11337  0542  0CA2               	rrf	??_PWM5_LoadDutyValue,f
 11338  0543  0822               	movf	??_PWM5_LoadDutyValue,w
 11339  0544  002C               	movlb	12	; select bank12
 11340  0545  0098               	movwf	24	;volatile
 11341                           
 11342                           ;pwm.c: 156: PWM5DCL = dutyValue << 6;
 11343  0546  0020               	movlb	0	; select bank0
 11344  0547  0820               	movf	PWM5_LoadDutyValue@dutyValue,w
 11345  0548  00A2               	movwf	??_PWM5_LoadDutyValue
 11346  0549  0CA2               	rrf	??_PWM5_LoadDutyValue,f
 11347  054A  0CA2               	rrf	??_PWM5_LoadDutyValue,f
 11348  054B  0C22               	rrf	??_PWM5_LoadDutyValue,w
 11349  054C  39C0               	andlw	192
 11350  054D  002C               	movlb	12	; select bank12
 11351  054E  0097               	movwf	23	;volatile
 11352  054F  0008               	return
 11353  0550                     __end_of_PWM5_LoadDutyValue:	
 11354  0550                     __ptext25:	
 11355 ;; *************** function _indicateLedOff *****************
 11356 ;; Defined at:
 11357 ;;		line 357 in file "src/led.c"
 11358 ;; Parameters:    Size  Location     Type
 11359 ;;		None
 11360 ;; Auto vars:     Size  Location     Type
 11361 ;;		None
 11362 ;; Return value:  Size  Location     Type
 11363 ;;                  1    wreg      void 
 11364 ;; Registers used:
 11365 ;;		None
 11366 ;; Tracked objects:
 11367 ;;		On entry : 1F/0
 11368 ;;		On exit  : 1F/2
 11369 ;;		Unchanged: 0/0
 11370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;Total ram usage:        0 bytes
 11376 ;; Hardware stack levels used:    1
 11377 ;; Hardware stack levels required when called:    6
 11378 ;; This function calls:
 11379 ;;		Nothing
 11380 ;; This function is called by:
 11381 ;;		_initLedStatus
 11382 ;; This function uses a non-reentrant model
 11383 ;;
 11384                           
 11385                           
 11386                           ;psect for function _indicateLedOff
 11387  0550                     _indicateLedOff:	
 11388                           
 11389                           ;led.c: 360: do { LATAbits.LATA1 = 1; } while(0);
 11390                           
 11391                           ;led.c: 361: do { LATBbits.LATB7 = 1; } while(0);
 11392                           
 11393                           ;incstack = 0
 11394                           ; Regs used in _indicateLedOff: []
 11395                           ;led.c: 359: do { LATBbits.LATB6 = 0; } while(0);
 11396  0550  2F2E               	ljmp	PL84	;call to abstracted procedure
 11397  0551                     __end_of_indicateLedOff:	
 11398  0551                     PL34:	
 11399  0551  0821               	movf	PWM4_LoadDutyValue@dutyValue+1,w
 11400  0552  0026               	movlb	6	; select bank6
 11401  0553  0096               	movwf	22	;volatile
 11402  0554  0020               	movlb	0	; select bank0
 11403  0555  0820               	movf	PWM4_LoadDutyValue@dutyValue,w
 11404  0556  0026               	movlb	6	; select bank6
 11405  0557  0095               	movwf	21	;volatile
 11406  0558  0008               	return
 11407  0559                     __end_ofPL34:	
 11408  0559                     PL40:	
 11409  0559  0821               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 11410  055A  0025               	movlb	5	; select bank5
 11411  055B  0092               	movwf	18	;volatile
 11412  055C  0020               	movlb	0	; select bank0
 11413  055D  0820               	movf	PWM1_LoadDutyValue@dutyValue,w
 11414  055E  0025               	movlb	5	; select bank5
 11415  055F  0091               	movwf	17	;volatile
 11416  0560  0008               	return
 11417  0561                     __end_ofPL40:	
 11418  0561                     PL42:	
 11419  0561  0821               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 11420  0562  0025               	movlb	5	; select bank5
 11421  0563  0096               	movwf	22	;volatile
 11422  0564  0020               	movlb	0	; select bank0
 11423  0565  0820               	movf	PWM2_LoadDutyValue@dutyValue,w
 11424  0566  0025               	movlb	5	; select bank5
 11425  0567  0095               	movwf	21	;volatile
 11426  0568  0008               	return
 11427  0569                     __end_ofPL42:	
 11428  0569                     PL46:	
 11429  0569  0821               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 11430  056A  0026               	movlb	6	; select bank6
 11431  056B  0092               	movwf	18	;volatile
 11432  056C  0020               	movlb	0	; select bank0
 11433  056D  0820               	movf	PWM3_LoadDutyValue@dutyValue,w
 11434  056E  0026               	movlb	6	; select bank6
 11435  056F  0091               	movwf	17	;volatile
 11436  0570  0008               	return
 11437  0571                     __end_ofPL46:	
 11438  0571                     __ptext65:	
 11439 ;; *************** function _TMR2_UserInterruptHandler *****************
 11440 ;; Defined at:
 11441 ;;		line 72 in file "src/comman.c"
 11442 ;; Parameters:    Size  Location     Type
 11443 ;;		None
 11444 ;; Auto vars:     Size  Location     Type
 11445 ;;		None
 11446 ;; Return value:  Size  Location     Type
 11447 ;;                  1    wreg      void 
 11448 ;; Registers used:
 11449 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11450 ;; Tracked objects:
 11451 ;;		On entry : 1F/0
 11452 ;;		On exit  : 18/0
 11453 ;;		Unchanged: 0/0
 11454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11459 ;;Total ram usage:        0 bytes
 11460 ;; Hardware stack levels used:    1
 11461 ;; Hardware stack levels required when called:    4
 11462 ;; This function calls:
 11463 ;;		_keyAction
 11464 ;;		_keyScan
 11465 ;;		_updateLed
 11466 ;; This function is called by:
 11467 ;;		_INTERRUPT_InterruptManager
 11468 ;; This function uses a non-reentrant model
 11469 ;;
 11470                           
 11471                           
 11472                           ;psect for function _TMR2_UserInterruptHandler
 11473  0571                     _TMR2_UserInterruptHandler:	
 11474                           
 11475                           ;comman.c: 74: static unsigned char cnt = 0;
 11476                           ;comman.c: 76: cnt++;
 11477                           
 11478                           ;incstack = 0
 11479                           ; Regs used in _TMR2_UserInterruptHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11480  0571  0021               	movlb	1	; select bank1
 11481  0572  0AE3               	incf	TMR2_UserInterruptHandler@cnt^(0+128),f
 11482                           
 11483                           ;comman.c: 77: if( ( cnt & 0x03 ) == 0x00 )
 11484  0573  0863               	movf	TMR2_UserInterruptHandler@cnt^(0+128),w
 11485  0574  3903               	andlw	3
 11486  0575  1D03               	btfss	3,2
 11487  0576  0008               	return
 11488                           
 11489                           ;comman.c: 78: {
 11490                           ;comman.c: 79: if( ( cnt & 0x0F ) == 0x00 )
 11491  0577  0863               	movf	TMR2_UserInterruptHandler@cnt^(0+128),w
 11492  0578  390F               	andlw	15
 11493  0579  1D03               	btfss	3,2
 11494  057A  2D83               	goto	i1l4071
 11495                           
 11496                           ;comman.c: 80: {
 11497                           ;comman.c: 81: keyScan( );
 11498  057B  275F  3184         	fcall	_keyScan
 11499                           
 11500                           ;comman.c: 82: if( keyValue != 0x00 )
 11501  057D  087C               	movf	_keyValue,w	;volatile
 11502  057E  1903               	btfsc	3,2
 11503  057F  2D83               	goto	i1l4071
 11504                           
 11505                           ;comman.c: 83: {
 11506                           ;comman.c: 84: keyAction( );
 11507  0580  258F  3184         	fcall	_keyAction
 11508                           
 11509                           ;comman.c: 85: keyValue = 0x00;
 11510  0582  01FC               	clrf	_keyValue	;volatile
 11511  0583                     i1l4071:	
 11512                           
 11513                           ;comman.c: 86: }
 11514                           ;comman.c: 87: }
 11515                           ;comman.c: 88: if( gLedRunPara.find || gLedRunPara.fPrev || gLedPara.fAuto )
 11516  0583  0022               	movlb	2	; select bank2
 11517  0584  1C57               	btfss	_gLedRunPara^(0+256),0	;volatile
 11518  0585  19D7               	btfsc	_gLedRunPara^(0+256),3	;volatile
 11519  0586  0008               	return
 11520  0587  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 11521  0588  0008               	return
 11522                           
 11523                           ;comman.c: 91: }
 11524                           ;comman.c: 92: if( gLedPara.fSta == 3 )
 11525  0589  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 11526  058A  3903               	andlw	3
 11527  058B  3A03               	xorlw	3
 11528  058C  1D03               	skipz
 11529  058D  0008               	return
 11530                           
 11531                           ;comman.c: 93: {
 11532                           ;comman.c: 94: updateLed( );
 11533  058E  2FA8               	ljmp	i1l3567
 11534  058F                     __end_of_TMR2_UserInterruptHandler:	
 11535  058F                     __ptext69:	
 11536 ;; *************** function _keyAction *****************
 11537 ;; Defined at:
 11538 ;;		line 61 in file "src/key.c"
 11539 ;; Parameters:    Size  Location     Type
 11540 ;;		None
 11541 ;; Auto vars:     Size  Location     Type
 11542 ;;  i               1    8[COMMON] unsigned char 
 11543 ;;  sta             1    7[COMMON] unsigned char 
 11544 ;; Return value:  Size  Location     Type
 11545 ;;                  1    wreg      void 
 11546 ;; Registers used:
 11547 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11548 ;; Tracked objects:
 11549 ;;		On entry : 1F/1
 11550 ;;		On exit  : 1F/2
 11551 ;;		Unchanged: 0/0
 11552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11555 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11556 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11557 ;;Total ram usage:        4 bytes
 11558 ;; Hardware stack levels used:    1
 11559 ;; Hardware stack levels required when called:    3
 11560 ;; This function calls:
 11561 ;;		i1_indicateLedBle
 11562 ;;		i1_indicateLedDay
 11563 ;;		i1_indicateLedNight
 11564 ;;		i1_indicateLedOff
 11565 ;;		i1_updateDayBright
 11566 ;;		i1_updateDayRiseStatus
 11567 ;;		i1_updateNightBright
 11568 ;;		i1_updateNightRiseStatus
 11569 ;;		i1_updatePWM
 11570 ;; This function is called by:
 11571 ;;		_TMR2_UserInterruptHandler
 11572 ;; This function uses a non-reentrant model
 11573 ;;
 11574                           
 11575                           
 11576                           ;psect for function _keyAction
 11577  058F                     _keyAction:	
 11578                           
 11579                           ;key.c: 63: unsigned char sta;
 11580                           ;key.c: 64: if (keyValue == 0x01)
 11581                           
 11582                           ;incstack = 0
 11583                           ; Regs used in _keyAction: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11584  058F  0B7C               	decfsz	_keyValue,w	;volatile
 11585  0590  2DC9               	goto	i1l3511
 11586                           
 11587                           ;key.c: 65: {
 11588                           ;key.c: 66: gLedPara.fSta++;
 11589  0591  0022               	movlb	2	; select bank2
 11590  0592  26F0  3184         	fcall	PL28	;call to abstracted procedure
 11591                           
 11592                           ;key.c: 67: sta = gLedPara.fSta;
 11593  0594  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 11594  0595  3903               	andlw	3
 11595  0596  00F7               	movwf	keyAction@sta
 11596                           
 11597                           ;key.c: 68: switch(sta)
 11598  0597  2DBB               	goto	i1l3509
 11599  0598                     i1l3475:	
 11600                           
 11601                           ;key.c: 71: for (unsigned char i = 0; i < 5; i++)
 11602  0598  01F8               	clrf	keyAction@i
 11603  0599                     i1l3481:	
 11604                           
 11605                           ;key.c: 72: {
 11606                           ;key.c: 73: gLedPara.mPara.manualPara.nBrt[i] = 0;
 11607  0599  3578               	lslf	keyAction@i,w
 11608  059A  26E8  3184         	fcall	PL10	;call to abstracted procedure
 11609                           
 11610                           ;key.c: 74: gLedRunPara.nCurrentBrt[i] = 0;
 11611  059C  3578               	lslf	keyAction@i,w
 11612  059D  271E  3184         	fcall	PL58	;call to abstracted procedure
 11613  059F  3005               	movlw	5
 11614  05A0  0AF8               	incf	keyAction@i,f
 11615  05A1  0278               	subwf	keyAction@i,w
 11616  05A2  1C03               	skipc
 11617  05A3  2D99               	goto	i1l3481
 11618                           
 11619                           ;key.c: 75: }
 11620                           ;key.c: 76: updatePWM();
 11621  05A4  266E  3184         	fcall	i1_updatePWM
 11622                           
 11623                           ;key.c: 77: indicateLedOff();
 11624  05A6  2693  3184         	fcall	i1_indicateLedOff
 11625                           
 11626                           ;key.c: 78: break;
 11627  05A8  2E3F               	goto	i1l359
 11628  05A9                     i1l3491:	
 11629                           
 11630                           ;key.c: 81: updateDayBright();
 11631  05A9  2641  3184         	fcall	i1_updateDayBright
 11632                           
 11633                           ;key.c: 82: indicateLedDay();
 11634  05AB  2654  3184         	fcall	i1_indicateLedDay
 11635  05AD                     i1l3495:	
 11636                           
 11637                           ;key.c: 83: updateDayRiseStatus();
 11638  05AD  26D2  3184         	fcall	i1_updateDayRiseStatus
 11639                           
 11640                           ;key.c: 84: break;
 11641  05AF  2E3F               	goto	i1l359
 11642  05B0                     i1l3497:	
 11643                           
 11644                           ;key.c: 87: updateNightBright();
 11645  05B0  2655  3184         	fcall	i1_updateNightBright
 11646                           
 11647                           ;key.c: 88: indicateLedNight();
 11648  05B2  2692  3184         	fcall	i1_indicateLedNight
 11649  05B4                     i1l3501:	
 11650                           
 11651                           ;key.c: 89: updateNightRiseStatus();
 11652  05B4  26DD  3184         	fcall	i1_updateNightRiseStatus
 11653                           
 11654                           ;key.c: 90: break;
 11655  05B6  2E3F               	goto	i1l359
 11656  05B7                     i1l3503:	
 11657                           
 11658                           ;key.c: 93: indicateLedBle();
 11659  05B7  2691  3184         	fcall	i1_indicateLedBle
 11660                           
 11661                           ;key.c: 94: gLedPara.fAuto = 1;
 11662  05B9  1420               	bsf	_gLedPara^(0+256),0	;volatile
 11663                           
 11664                           ;key.c: 95: break;
 11665  05BA  2E3F               	goto	i1l359
 11666  05BB                     i1l3509:	
 11667  05BB  0877               	movf	keyAction@sta,w
 11668                           
 11669                           ; Switch size 1, requested type "space"
 11670                           ; Number of cases is 4, Range of values is 0 to 3
 11671                           ; switch strategies available:
 11672                           ; Name         Instructions Cycles
 11673                           ; simple_byte           13     7 (average)
 11674                           ; direct_byte           14     6 (fixed)
 11675                           ; jumptable            260     6 (fixed)
 11676                           ;	Chosen strategy is simple_byte
 11677  05BC  3A00               	xorlw	0	; case 0
 11678  05BD  1903               	skipnz
 11679  05BE  2D98               	goto	i1l3475
 11680  05BF  3A01               	xorlw	1	; case 1
 11681  05C0  1903               	skipnz
 11682  05C1  2DA9               	goto	i1l3491
 11683  05C2  3A03               	xorlw	3	; case 2
 11684  05C3  1903               	skipnz
 11685  05C4  2DB0               	goto	i1l3497
 11686  05C5  3A01               	xorlw	1	; case 3
 11687  05C6  1903               	skipnz
 11688  05C7  2DB7               	goto	i1l3503
 11689  05C8  2E3F               	goto	i1l359
 11690  05C9                     i1l3511:	
 11691                           
 11692                           ;key.c: 101: else if (keyValue == (0x20 | 0x01))
 11693  05C9  3021               	movlw	33
 11694  05CA  067C               	xorwf	_keyValue,w	;volatile
 11695  05CB  1D03               	btfss	3,2
 11696  05CC  2DD6               	goto	i1l3523
 11697                           
 11698                           ;key.c: 102: {
 11699                           ;key.c: 103: sta = gLedPara.fSta;
 11700  05CD  275A  3184         	fcall	PL106	;call to abstracted procedure
 11701                           
 11702                           ; Switch size 1, requested type "space"
 11703                           ; Number of cases is 2, Range of values is 1 to 2
 11704                           ; switch strategies available:
 11705                           ; Name         Instructions Cycles
 11706                           ; simple_byte            7     4 (average)
 11707                           ; direct_byte           13     9 (fixed)
 11708                           ; jumptable            263     9 (fixed)
 11709                           ;	Chosen strategy is simple_byte
 11710                           
 11711                           ;key.c: 104: switch(sta)
 11712  05CF  3A01               	xorlw	1	; case 1
 11713  05D0  1903               	skipnz
 11714  05D1  2DAD               	goto	i1l3495
 11715  05D2  3A03               	xorlw	3	; case 2
 11716  05D3  1903               	skipnz
 11717  05D4  2DB4               	goto	i1l3501
 11718  05D5  2E3F               	goto	i1l359
 11719  05D6                     i1l3523:	
 11720                           
 11721                           ;key.c: 118: else if ( keyValue == (0x40 | 0x01) )
 11722  05D6  3041               	movlw	65
 11723  05D7  067C               	xorwf	_keyValue,w	;volatile
 11724  05D8  1D03               	btfss	3,2
 11725  05D9  2E3F               	goto	i1l359
 11726                           
 11727                           ;key.c: 119: {
 11728                           ;key.c: 120: sta = gLedPara.fSta;
 11729  05DA  275A  3184         	fcall	PL106	;call to abstracted procedure
 11730                           
 11731                           ;key.c: 121: switch(sta)
 11732  05DC  2E34               	goto	i1l3563
 11733  05DD                     i1l3527:	
 11734                           
 11735                           ;key.c: 124: gLedPara.tPara.nDayBrt = 10;
 11736  05DD  300A               	movlw	10
 11737  05DE  00D3               	movwf	(_gLedPara^(0+256)+51)	;volatile
 11738  05DF  01D4               	clrf	((_gLedPara+1)^(0+256)+51)	;volatile
 11739                           
 11740                           ;key.c: 125: gLedPara.fSta++;
 11741  05E0  26F0  3184         	fcall	PL28	;call to abstracted procedure
 11742                           
 11743                           ;key.c: 126: gLedRunPara.fDr = 1;
 11744  05E2  1657               	bsf	_gLedRunPara^(0+256),4	;volatile
 11745                           
 11746                           ;key.c: 127: updateDayBright();
 11747  05E3  2641  3184         	fcall	i1_updateDayBright
 11748                           
 11749                           ;key.c: 128: indicateLedDay();
 11750  05E5  2654  3184         	fcall	i1_indicateLedDay
 11751                           
 11752                           ;key.c: 129: break;
 11753  05E7  2E3F               	goto	i1l359
 11754  05E8                     i1l371:	
 11755                           ;key.c: 131: case 1:
 11756                           
 11757                           
 11758                           ;key.c: 132: if (gLedRunPara.fDr)
 11759  05E8  1E57               	btfss	_gLedRunPara^(0+256),4	;volatile
 11760  05E9  2DFD               	goto	i1l3541
 11761                           
 11762                           ;key.c: 133: {
 11763                           ;key.c: 134: if (gLedPara.tPara.nDayBrt + 10 < 1000)
 11764  05EA  0853               	movf	(_gLedPara^(0+256)+51),w	;volatile
 11765  05EB  3E0A               	addlw	10
 11766  05EC  00F5               	movwf	??_keyAction
 11767  05ED  3000               	movlw	0
 11768  05EE  3D54               	addwfc	((_gLedPara+1)^(0+256)+51),w	;volatile
 11769  05EF  2756  3184         	fcall	PL104	;call to abstracted procedure
 11770  05F1  1903               	skipnz
 11771  05F2  0275               	subwf	??_keyAction,w
 11772  05F3  1803               	skipnc
 11773  05F4  2DFA               	goto	i1l373
 11774                           
 11775                           ;key.c: 135: {
 11776                           ;key.c: 136: gLedPara.tPara.nDayBrt += 10;
 11777  05F5  300A               	movlw	10
 11778  05F6  07D3               	addwf	(_gLedPara^(0+256)+51),f	;volatile
 11779  05F7  1803               	skipnc
 11780  05F8  0AD4               	incf	((_gLedPara+1)^(0+256)+51),f	;volatile
 11781                           
 11782                           ;key.c: 137: }
 11783  05F9  2E0B               	goto	i1l3547
 11784  05FA                     i1l373:	
 11785                           
 11786                           ;key.c: 138: else
 11787                           ;key.c: 139: {
 11788                           ;key.c: 140: gLedPara.tPara.nDayBrt = 1000;
 11789  05FA  274C  3184         	fcall	PL100	;call to abstracted procedure
 11790  05FC  2E0B               	goto	i1l3547
 11791  05FD                     i1l3541:	
 11792                           
 11793                           ;key.c: 143: else
 11794                           ;key.c: 144: {
 11795                           ;key.c: 145: if (gLedPara.tPara.nDayBrt > 10 + 10)
 11796  05FD  3000               	movlw	0
 11797  05FE  0254               	subwf	((_gLedPara+1)^(0+256)+51),w	;volatile
 11798  05FF  3015               	movlw	21
 11799  0600  1903               	skipnz
 11800  0601  0253               	subwf	(_gLedPara^(0+256)+51),w	;volatile
 11801                           
 11802                           ;key.c: 146: {
 11803                           ;key.c: 147: gLedPara.tPara.nDayBrt -= 10;
 11804  0602  300A               	movlw	10
 11805  0603  1C03               	skipc
 11806  0604  2E09               	goto	L13
 11807  0605  02D3               	subwf	(_gLedPara^(0+256)+51),f	;volatile
 11808  0606  3000               	movlw	0
 11809  0607  3BD4               	subwfb	((_gLedPara+1)^(0+256)+51),f	;volatile
 11810                           
 11811                           ;key.c: 148: }
 11812  0608  2E0B               	goto	i1l3547
 11813  0609                     L13:	
 11814                           ;key.c: 149: else
 11815                           ;key.c: 150: {
 11816                           ;key.c: 151: gLedPara.tPara.nDayBrt = 10;
 11817                           
 11818  0609  00D3               	movwf	(_gLedPara^(0+256)+51)	;volatile
 11819  060A  01D4               	clrf	((_gLedPara+1)^(0+256)+51)	;volatile
 11820  060B                     i1l3547:	
 11821                           
 11822                           ;key.c: 152: }
 11823                           ;key.c: 153: }
 11824                           ;key.c: 154: updateDayBright();
 11825  060B  2641  3184         	fcall	i1_updateDayBright
 11826                           
 11827                           ;key.c: 155: break;
 11828  060D  2E3F               	goto	i1l359
 11829  060E                     i1l378:	
 11830                           ;key.c: 157: case 2:
 11831                           
 11832                           
 11833                           ;key.c: 158: if (gLedRunPara.fNr)
 11834  060E  1ED7               	btfss	_gLedRunPara^(0+256),5	;volatile
 11835  060F  2E23               	goto	i1l3553
 11836                           
 11837                           ;key.c: 159: {
 11838                           ;key.c: 160: if (gLedPara.tPara.nNightBrt + 10 < 1000)
 11839  0610  0855               	movf	(_gLedPara^(0+256)+53),w	;volatile
 11840  0611  3E0A               	addlw	10
 11841  0612  00F5               	movwf	??_keyAction
 11842  0613  3000               	movlw	0
 11843  0614  3D56               	addwfc	((_gLedPara+1)^(0+256)+53),w	;volatile
 11844  0615  2756  3184         	fcall	PL104	;call to abstracted procedure
 11845  0617  1903               	skipnz
 11846  0618  0275               	subwf	??_keyAction,w
 11847  0619  1803               	skipnc
 11848  061A  2E20               	goto	i1l380
 11849                           
 11850                           ;key.c: 161: {
 11851                           ;key.c: 162: gLedPara.tPara.nNightBrt += 10;
 11852  061B  300A               	movlw	10
 11853  061C  07D5               	addwf	(_gLedPara^(0+256)+53),f	;volatile
 11854  061D  1803               	skipnc
 11855  061E  0AD6               	incf	((_gLedPara+1)^(0+256)+53),f	;volatile
 11856                           
 11857                           ;key.c: 163: }
 11858  061F  2E31               	goto	i1l3559
 11859  0620                     i1l380:	
 11860                           
 11861                           ;key.c: 164: else
 11862                           ;key.c: 165: {
 11863                           ;key.c: 166: gLedPara.tPara.nNightBrt = 1000;
 11864  0620  2751  3184         	fcall	PL102	;call to abstracted procedure
 11865  0622  2E31               	goto	i1l3559
 11866  0623                     i1l3553:	
 11867                           
 11868                           ;key.c: 169: else
 11869                           ;key.c: 170: {
 11870                           ;key.c: 171: if (gLedPara.tPara.nNightBrt > 10 + 10)
 11871  0623  3000               	movlw	0
 11872  0624  0256               	subwf	((_gLedPara+1)^(0+256)+53),w	;volatile
 11873  0625  3015               	movlw	21
 11874  0626  1903               	skipnz
 11875  0627  0255               	subwf	(_gLedPara^(0+256)+53),w	;volatile
 11876                           
 11877                           ;key.c: 172: {
 11878                           ;key.c: 173: gLedPara.tPara.nNightBrt -= 10;
 11879  0628  300A               	movlw	10
 11880  0629  1C03               	skipc
 11881  062A  2E2F               	goto	L14
 11882  062B  02D5               	subwf	(_gLedPara^(0+256)+53),f	;volatile
 11883  062C  3000               	movlw	0
 11884  062D  3BD6               	subwfb	((_gLedPara+1)^(0+256)+53),f	;volatile
 11885                           
 11886                           ;key.c: 174: }
 11887  062E  2E31               	goto	i1l3559
 11888  062F                     L14:	
 11889                           ;key.c: 175: else
 11890                           ;key.c: 176: {
 11891                           ;key.c: 177: gLedPara.tPara.nNightBrt = 10;
 11892                           
 11893  062F  00D5               	movwf	(_gLedPara^(0+256)+53)	;volatile
 11894  0630  01D6               	clrf	((_gLedPara+1)^(0+256)+53)	;volatile
 11895  0631                     i1l3559:	
 11896                           
 11897                           ;key.c: 178: }
 11898                           ;key.c: 179: }
 11899                           ;key.c: 180: updateNightBright();
 11900  0631  2655  3184         	fcall	i1_updateNightBright
 11901                           
 11902                           ;key.c: 181: break;
 11903  0633  2E3F               	goto	i1l359
 11904  0634                     i1l3563:	
 11905  0634  0877               	movf	keyAction@sta,w
 11906                           
 11907                           ; Switch size 1, requested type "space"
 11908                           ; Number of cases is 3, Range of values is 0 to 2
 11909                           ; switch strategies available:
 11910                           ; Name         Instructions Cycles
 11911                           ; simple_byte           10     6 (average)
 11912                           ; direct_byte           12     6 (fixed)
 11913                           ; jumptable            260     6 (fixed)
 11914                           ;	Chosen strategy is simple_byte
 11915  0635  3A00               	xorlw	0	; case 0
 11916  0636  1903               	skipnz
 11917  0637  2DDD               	goto	i1l3527
 11918  0638  3A01               	xorlw	1	; case 1
 11919  0639  1903               	skipnz
 11920  063A  2DE8               	goto	i1l371
 11921  063B  3A03               	xorlw	3	; case 2
 11922  063C  1903               	skipnz
 11923  063D  2E0E               	goto	i1l378
 11924  063E  2E3F               	goto	i1l359
 11925  063F                     i1l359:	
 11926                           
 11927                           ;key.c: 183: }
 11928                           ;key.c: 184: gLedRunPara.fSave = 1;
 11929                           
 11930                           ;key.c: 185: gLedRunPara.nSaveDelayCount = 3;
 11931  063F  318F  2FC6         	ljmp	PL78	;call to abstracted procedure
 11932  0641                     __end_of_keyAction:	
 11933  0641                     __ptext73:	
 11934 ;; *************** function i1_updateDayBright *****************
 11935 ;; Defined at:
 11936 ;;		line 391 in file "src/led.c"
 11937 ;; Parameters:    Size  Location     Type
 11938 ;;		None
 11939 ;; Auto vars:     Size  Location     Type
 11940 ;;  updateDayBri    1    4[COMMON] unsigned char 
 11941 ;; Return value:  Size  Location     Type
 11942 ;;                  1    wreg      void 
 11943 ;; Registers used:
 11944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11945 ;; Tracked objects:
 11946 ;;		On entry : 1C/2
 11947 ;;		On exit  : 1F/6
 11948 ;;		Unchanged: 0/0
 11949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11951 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11953 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11954 ;;Total ram usage:        1 bytes
 11955 ;; Hardware stack levels used:    1
 11956 ;; Hardware stack levels required when called:    2
 11957 ;; This function calls:
 11958 ;;		i1_updatePWM
 11959 ;; This function is called by:
 11960 ;;		_keyAction
 11961 ;; This function uses a non-reentrant model
 11962 ;;
 11963                           
 11964                           
 11965                           ;psect for function i1_updateDayBright
 11966  0641                     i1_updateDayBright:	
 11967                           
 11968                           ;led.c: 393: for ( unsigned char i = 0; i < 5; i++ )
 11969                           
 11970                           ;incstack = 0
 11971                           ; Regs used in i1_updateDayBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11972  0641  01F4               	clrf	i1updateDayBright@i
 11973  0642                     i1l3203:	
 11974                           
 11975                           ;led.c: 394: {
 11976                           ;led.c: 395: gLedPara.mPara.manualPara.nBrt[i] = gLedPara.tPara.nDayBrt;
 11977  0642  3574               	lslf	i1updateDayBright@i,w
 11978  0643  3E23               	addlw	(low ((_gLedPara| (0+256)+3)))& (0+255)
 11979  0644  2705  3184         	fcall	PL38	;call to abstracted procedure
 11980                           
 11981                           ;led.c: 396: gLedRunPara.nCurrentBrt[i] = gLedPara.tPara.nDayBrt;
 11982  0646  3574               	lslf	i1updateDayBright@i,w
 11983  0647  3E65               	addlw	(low ((_gLedRunPara| (0+256)+14)))& (0+255)
 11984  0648  0086               	movwf	6
 11985  0649  0853               	movf	(_gLedPara^(0+256)+51),w	;volatile
 11986  064A  3FC0               	movwi [0]fsr1
 11987  064B  0854               	movf	((_gLedPara+1)^(0+256)+51),w	;volatile
 11988  064C  3FC1               	movwi [1]fsr1
 11989  064D  3005               	movlw	5
 11990  064E  0AF4               	incf	i1updateDayBright@i,f
 11991  064F  0274               	subwf	i1updateDayBright@i,w
 11992  0650  1C03               	skipc
 11993  0651  2E42               	goto	i1l3203
 11994                           
 11995                           ;led.c: 397: }
 11996                           ;led.c: 398: updatePWM();
 11997  0652  266E               	fcall	i1_updatePWM
 11998  0653  0008               	return
 11999  0654                     __end_ofi1_updateDayBright:	
 12000  0654                     __ptext82:	
 12001 ;; *************** function i1_indicateLedDay *****************
 12002 ;; Defined at:
 12003 ;;		line 366 in file "src/led.c"
 12004 ;; Parameters:    Size  Location     Type
 12005 ;;		None
 12006 ;; Auto vars:     Size  Location     Type
 12007 ;;		None
 12008 ;; Return value:  Size  Location     Type
 12009 ;;                  1    wreg      void 
 12010 ;; Registers used:
 12011 ;;		None
 12012 ;; Tracked objects:
 12013 ;;		On entry : 1F/6
 12014 ;;		On exit  : 1F/2
 12015 ;;		Unchanged: 0/0
 12016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;Total ram usage:        0 bytes
 12022 ;; Hardware stack levels used:    1
 12023 ;; This function calls:
 12024 ;;		Nothing
 12025 ;; This function is called by:
 12026 ;;		_keyAction
 12027 ;; This function uses a non-reentrant model
 12028 ;;
 12029                           
 12030                           
 12031                           ;psect for function i1_indicateLedDay
 12032  0654                     i1_indicateLedDay:	
 12033                           
 12034                           ;incstack = 0
 12035                           ; Regs used in i1_indicateLedDay: []
 12036                           ;led.c: 368: do { LATBbits.LATB6 = 0; } while(0);
 12037                           
 12038                           ;led.c: 369: do { LATAbits.LATA1 = 0; } while(0);
 12039                           
 12040                           ;led.c: 370: do { LATBbits.LATB7 = 0; } while(0);
 12041  0654  2F33               	ljmp	PL86	;call to abstracted procedure
 12042  0655                     __end_ofi1_indicateLedDay:	
 12043  0655                     __ptext71:	
 12044 ;; *************** function i1_updateNightBright *****************
 12045 ;; Defined at:
 12046 ;;		line 413 in file "src/led.c"
 12047 ;; Parameters:    Size  Location     Type
 12048 ;;		None
 12049 ;; Auto vars:     Size  Location     Type
 12050 ;;  updateNightB    1    4[COMMON] unsigned char 
 12051 ;; Return value:  Size  Location     Type
 12052 ;;                  1    wreg      void 
 12053 ;; Registers used:
 12054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12055 ;; Tracked objects:
 12056 ;;		On entry : 1C/2
 12057 ;;		On exit  : 1F/6
 12058 ;;		Unchanged: 0/0
 12059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12061 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12063 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12064 ;;Total ram usage:        1 bytes
 12065 ;; Hardware stack levels used:    1
 12066 ;; Hardware stack levels required when called:    2
 12067 ;; This function calls:
 12068 ;;		i1_updatePWM
 12069 ;; This function is called by:
 12070 ;;		_keyAction
 12071 ;; This function uses a non-reentrant model
 12072 ;;
 12073                           
 12074                           
 12075                           ;psect for function i1_updateNightBright
 12076  0655                     i1_updateNightBright:	
 12077                           
 12078                           ;led.c: 416: for ( unsigned char i = 0; i < 5; i++ )
 12079                           
 12080                           ;incstack = 0
 12081                           ; Regs used in i1_updateNightBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12082  0655  01F4               	clrf	i1updateNightBright@i
 12083  0656                     i1l3225:	
 12084                           
 12085                           ;led.c: 417: {
 12086                           ;led.c: 418: if ( i == 1 )
 12087  0656  0B74               	decfsz	i1updateNightBright@i,w
 12088  0657  2E61               	goto	i1l3229
 12089                           
 12090                           ;led.c: 419: {
 12091                           ;led.c: 420: gLedPara.mPara.manualPara.nBrt[i] = gLedPara.tPara.nNightBrt;
 12092  0658  3574               	lslf	i1updateNightBright@i,w
 12093  0659  26FB  3184         	fcall	PL32	;call to abstracted procedure
 12094                           
 12095                           ;led.c: 421: gLedRunPara.nCurrentBrt[i] = gLedPara.tPara.nNightBrt;
 12096  065B  3574               	lslf	i1updateNightBright@i,w
 12097  065C  3E65               	addlw	(low ((_gLedRunPara| (0+256)+14)))& (0+255)
 12098  065D  0086               	movwf	6
 12099  065E  2747  3184         	fcall	PL94	;call to abstracted procedure
 12100                           
 12101                           ;led.c: 422: }
 12102  0660  2E67               	goto	i1l3231
 12103  0661                     i1l3229:	
 12104                           
 12105                           ;led.c: 423: else
 12106                           ;led.c: 424: {
 12107                           ;led.c: 425: gLedPara.mPara.manualPara.nBrt[i] = 0;
 12108  0661  3574               	lslf	i1updateNightBright@i,w
 12109  0662  26E8  3184         	fcall	PL10	;call to abstracted procedure
 12110                           
 12111                           ;led.c: 426: gLedRunPara.nCurrentBrt[i] = 0;
 12112  0664  3574               	lslf	i1updateNightBright@i,w
 12113  0665  271E  3184         	fcall	PL58	;call to abstracted procedure
 12114  0667                     i1l3231:	
 12115  0667  3005               	movlw	5
 12116  0668  0AF4               	incf	i1updateNightBright@i,f
 12117  0669  0274               	subwf	i1updateNightBright@i,w
 12118  066A  1C03               	skipc
 12119  066B  2E56               	goto	i1l3225
 12120                           
 12121                           ;led.c: 427: }
 12122                           ;led.c: 428: }
 12123                           ;led.c: 429: updatePWM();
 12124  066C  266E               	fcall	i1_updatePWM
 12125  066D  0008               	return
 12126  066E                     __end_ofi1_updateNightBright:	
 12127  066E                     __ptext74:	
 12128 ;; *************** function i1_updatePWM *****************
 12129 ;; Defined at:
 12130 ;;		line 7 in file "src/led.c"
 12131 ;; Parameters:    Size  Location     Type
 12132 ;;		None
 12133 ;; Auto vars:     Size  Location     Type
 12134 ;;		None
 12135 ;; Return value:  Size  Location     Type
 12136 ;;                  1    wreg      void 
 12137 ;; Registers used:
 12138 ;;		wreg, status,2, status,0, pclath, cstack
 12139 ;; Tracked objects:
 12140 ;;		On entry : 1C/2
 12141 ;;		On exit  : 1F/6
 12142 ;;		Unchanged: 0/0
 12143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;Total ram usage:        0 bytes
 12149 ;; Hardware stack levels used:    1
 12150 ;; Hardware stack levels required when called:    1
 12151 ;; This function calls:
 12152 ;;		i1_PWM1_LoadDutyValue
 12153 ;;		i1_PWM2_LoadDutyValue
 12154 ;;		i1_PWM3_LoadDutyValue
 12155 ;;		i1_PWM4_LoadDutyValue
 12156 ;;		i1_PWM5_LoadDutyValue
 12157 ;; This function is called by:
 12158 ;;		_keyAction
 12159 ;;		_updateLed
 12160 ;;		i1_updateDayBright
 12161 ;;		i1_updateNightBright
 12162 ;; This function uses a non-reentrant model
 12163 ;;
 12164                           
 12165                           
 12166                           ;psect for function i1_updatePWM
 12167  066E                     i1_updatePWM:	
 12168                           
 12169                           ;led.c: 28: PWM3_LoadDutyValue( gLedRunPara.nCurrentBrt[0] );
 12170                           
 12171                           ;incstack = 0
 12172                           ; Regs used in i1_updatePWM: [wreg+status,2+status,0+pclath+cstack]
 12173  066E  0022               	movlb	2	; select bank2
 12174  066F  0866               	movf	((_gLedRunPara+1)^(0+256)+14),w	;volatile
 12175  0670  00F1               	movwf	i1PWM3_LoadDutyValue@dutyValue+1
 12176  0671  0865               	movf	(_gLedRunPara^(0+256)+14),w	;volatile
 12177  0672  00F0               	movwf	i1PWM3_LoadDutyValue@dutyValue
 12178  0673  26AE  3184         	fcall	i1_PWM3_LoadDutyValue
 12179                           
 12180                           ;led.c: 29: PWM2_LoadDutyValue( gLedRunPara.nCurrentBrt[1] );
 12181  0675  0022               	movlb	2	; select bank2
 12182  0676  0868               	movf	((_gLedRunPara+1)^(0+256)+16),w	;volatile
 12183  0677  00F1               	movwf	i1PWM2_LoadDutyValue@dutyValue+1
 12184  0678  0867               	movf	(_gLedRunPara^(0+256)+16),w	;volatile
 12185  0679  00F0               	movwf	i1PWM2_LoadDutyValue@dutyValue
 12186  067A  26A1  3184         	fcall	i1_PWM2_LoadDutyValue
 12187                           
 12188                           ;led.c: 30: PWM1_LoadDutyValue( gLedRunPara.nCurrentBrt[2] );
 12189  067C  0022               	movlb	2	; select bank2
 12190  067D  086A               	movf	((_gLedRunPara+1)^(0+256)+18),w	;volatile
 12191  067E  00F1               	movwf	i1PWM1_LoadDutyValue@dutyValue+1
 12192  067F  0869               	movf	(_gLedRunPara^(0+256)+18),w	;volatile
 12193  0680  00F0               	movwf	i1PWM1_LoadDutyValue@dutyValue
 12194  0681  2694  3184         	fcall	i1_PWM1_LoadDutyValue
 12195                           
 12196                           ;led.c: 31: PWM5_LoadDutyValue( gLedRunPara.nCurrentBrt[3] );
 12197  0683  0022               	movlb	2	; select bank2
 12198  0684  086C               	movf	((_gLedRunPara+1)^(0+256)+20),w	;volatile
 12199  0685  00F1               	movwf	i1PWM5_LoadDutyValue@dutyValue+1
 12200  0686  086B               	movf	(_gLedRunPara^(0+256)+20),w	;volatile
 12201  0687  00F0               	movwf	i1PWM5_LoadDutyValue@dutyValue
 12202  0688  26BB  3184         	fcall	i1_PWM5_LoadDutyValue
 12203                           
 12204                           ;led.c: 32: PWM4_LoadDutyValue( gLedRunPara.nCurrentBrt[4] );
 12205  068A  0022               	movlb	2	; select bank2
 12206  068B  086E               	movf	((_gLedRunPara+1)^(0+256)+22),w	;volatile
 12207  068C  00F1               	movwf	i1PWM4_LoadDutyValue@dutyValue+1
 12208  068D  086D               	movf	(_gLedRunPara^(0+256)+22),w	;volatile
 12209  068E  00F0               	movwf	i1PWM4_LoadDutyValue@dutyValue
 12210  068F  2796               	fcall	i1_PWM4_LoadDutyValue
 12211  0690  0008               	return
 12212  0691                     __end_ofi1_updatePWM:	
 12213  0691                     __ptext83:	
 12214 ;; *************** function i1_indicateLedBle *****************
 12215 ;; Defined at:
 12216 ;;		line 384 in file "src/led.c"
 12217 ;; Parameters:    Size  Location     Type
 12218 ;;		None
 12219 ;; Auto vars:     Size  Location     Type
 12220 ;;		None
 12221 ;; Return value:  Size  Location     Type
 12222 ;;                  1    wreg      void 
 12223 ;; Registers used:
 12224 ;;		None
 12225 ;; Tracked objects:
 12226 ;;		On entry : 1C/2
 12227 ;;		On exit  : 1F/2
 12228 ;;		Unchanged: 0/0
 12229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12234 ;;Total ram usage:        0 bytes
 12235 ;; Hardware stack levels used:    1
 12236 ;; This function calls:
 12237 ;;		Nothing
 12238 ;; This function is called by:
 12239 ;;		_keyAction
 12240 ;; This function uses a non-reentrant model
 12241 ;;
 12242                           
 12243                           
 12244                           ;psect for function i1_indicateLedBle
 12245  0691                     i1_indicateLedBle:	
 12246                           
 12247                           ;incstack = 0
 12248                           ; Regs used in i1_indicateLedBle: []
 12249                           ;led.c: 386: do { LATBbits.LATB6 = 1; } while(0);
 12250                           
 12251                           ;led.c: 387: do { LATAbits.LATA1 = 0; } while(0);
 12252                           
 12253                           ;led.c: 388: do { LATBbits.LATB7 = 1; } while(0);
 12254  0691  2F42               	ljmp	PL92	;call to abstracted procedure
 12255  0692                     __end_ofi1_indicateLedBle:	
 12256  0692                     __ptext81:	
 12257 ;; *************** function i1_indicateLedNight *****************
 12258 ;; Defined at:
 12259 ;;		line 375 in file "src/led.c"
 12260 ;; Parameters:    Size  Location     Type
 12261 ;;		None
 12262 ;; Auto vars:     Size  Location     Type
 12263 ;;		None
 12264 ;; Return value:  Size  Location     Type
 12265 ;;                  1    wreg      void 
 12266 ;; Registers used:
 12267 ;;		None
 12268 ;; Tracked objects:
 12269 ;;		On entry : 1F/6
 12270 ;;		On exit  : 1F/2
 12271 ;;		Unchanged: 0/0
 12272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12277 ;;Total ram usage:        0 bytes
 12278 ;; Hardware stack levels used:    1
 12279 ;; This function calls:
 12280 ;;		Nothing
 12281 ;; This function is called by:
 12282 ;;		_keyAction
 12283 ;; This function uses a non-reentrant model
 12284 ;;
 12285                           
 12286                           
 12287                           ;psect for function i1_indicateLedNight
 12288  0692                     i1_indicateLedNight:	
 12289                           
 12290                           ;incstack = 0
 12291                           ; Regs used in i1_indicateLedNight: []
 12292                           ;led.c: 377: do { LATBbits.LATB6 = 1; } while(0);
 12293                           
 12294                           ;led.c: 378: do { LATAbits.LATA1 = 1; } while(0);
 12295                           
 12296                           ;led.c: 379: do { LATBbits.LATB7 = 0; } while(0);
 12297  0692  2F38               	ljmp	PL88	;call to abstracted procedure
 12298  0693                     __end_ofi1_indicateLedNight:	
 12299  0693                     __ptext80:	
 12300 ;; *************** function i1_indicateLedOff *****************
 12301 ;; Defined at:
 12302 ;;		line 357 in file "src/led.c"
 12303 ;; Parameters:    Size  Location     Type
 12304 ;;		None
 12305 ;; Auto vars:     Size  Location     Type
 12306 ;;		None
 12307 ;; Return value:  Size  Location     Type
 12308 ;;                  1    wreg      void 
 12309 ;; Registers used:
 12310 ;;		None
 12311 ;; Tracked objects:
 12312 ;;		On entry : 1F/6
 12313 ;;		On exit  : 1F/2
 12314 ;;		Unchanged: 0/0
 12315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;Total ram usage:        0 bytes
 12321 ;; Hardware stack levels used:    1
 12322 ;; This function calls:
 12323 ;;		Nothing
 12324 ;; This function is called by:
 12325 ;;		_keyAction
 12326 ;; This function uses a non-reentrant model
 12327 ;;
 12328                           
 12329                           
 12330                           ;psect for function i1_indicateLedOff
 12331  0693                     i1_indicateLedOff:	
 12332                           
 12333                           ;incstack = 0
 12334                           ; Regs used in i1_indicateLedOff: []
 12335                           ;led.c: 359: do { LATBbits.LATB6 = 0; } while(0);
 12336                           
 12337                           ;led.c: 360: do { LATAbits.LATA1 = 1; } while(0);
 12338                           
 12339                           ;led.c: 361: do { LATBbits.LATB7 = 1; } while(0);
 12340  0693  2F2E               	ljmp	PL84	;call to abstracted procedure
 12341  0694                     __end_ofi1_indicateLedOff:	
 12342  0694                     __ptext79:	
 12343 ;; *************** function i1_PWM1_LoadDutyValue *****************
 12344 ;; Defined at:
 12345 ;;		line 21 in file "src/pwm.c"
 12346 ;; Parameters:    Size  Location     Type
 12347 ;;  dutyValue       2    0[COMMON] unsigned int 
 12348 ;; Auto vars:     Size  Location     Type
 12349 ;;		None
 12350 ;; Return value:  Size  Location     Type
 12351 ;;                  1    wreg      void 
 12352 ;; Registers used:
 12353 ;;		wreg
 12354 ;; Tracked objects:
 12355 ;;		On entry : 1F/2
 12356 ;;		On exit  : 1F/5
 12357 ;;		Unchanged: 0/0
 12358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12359 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12362 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12363 ;;Total ram usage:        2 bytes
 12364 ;; Hardware stack levels used:    1
 12365 ;; This function calls:
 12366 ;;		Nothing
 12367 ;; This function is called by:
 12368 ;;		i1_updatePWM
 12369 ;; This function uses a non-reentrant model
 12370 ;;
 12371                           
 12372                           
 12373                           ;psect for function i1_PWM1_LoadDutyValue
 12374  0694                     i1_PWM1_LoadDutyValue:	
 12375                           
 12376                           ;pwm.c: 23: dutyValue &= 0x03FF;
 12377                           
 12378                           ;incstack = 0
 12379                           ; Regs used in i1_PWM1_LoadDutyValue: [wreg]
 12380  0694  30FF               	movlw	255
 12381  0695  05F0               	andwf	i1PWM1_LoadDutyValue@dutyValue,f
 12382  0696  3003               	movlw	3
 12383  0697  05F1               	andwf	i1PWM1_LoadDutyValue@dutyValue+1,f
 12384                           
 12385                           ;pwm.c: 26: if( CCP1CONbits.CCP1FMT )
 12386  0698  0025               	movlb	5	; select bank5
 12387  0699  1E13               	btfss	19,4	;volatile
 12388  069A  2EA0               	goto	i1l2955
 12389                           
 12390                           ;pwm.c: 27: {
 12391                           ;pwm.c: 28: dutyValue <<= 6;
 12392  069B  3006               	movlw	6
 12393  069C                     u227_25:	
 12394  069C  35F0               	lslf	i1PWM1_LoadDutyValue@dutyValue,f
 12395  069D  0DF1               	rlf	i1PWM1_LoadDutyValue@dutyValue+1,f
 12396  069E  0B89               	decfsz	9,f
 12397  069F  2E9C               	goto	u227_25
 12398  06A0                     i1l2955:	
 12399                           ;pwm.c: 29: CCPR1H = dutyValue >> 8;
 12400                           
 12401                           ;pwm.c: 30: CCPR1L = dutyValue;
 12402                           
 12403                           ;pwm.c: 31: }
 12404                           
 12405                           
 12406                           ;pwm.c: 32: else
 12407                           ;pwm.c: 33: {
 12408                           ;pwm.c: 34: CCPR1H = dutyValue >> 8;
 12409                           
 12410                           ;pwm.c: 35: CCPR1L = dutyValue;
 12411  06A0  2F24               	ljmp	PL80	;call to abstracted procedure
 12412  06A1                     __end_ofi1_PWM1_LoadDutyValue:	
 12413  06A1                     __ptext78:	
 12414 ;; *************** function i1_PWM2_LoadDutyValue *****************
 12415 ;; Defined at:
 12416 ;;		line 56 in file "src/pwm.c"
 12417 ;; Parameters:    Size  Location     Type
 12418 ;;  dutyValue       2    0[COMMON] unsigned int 
 12419 ;; Auto vars:     Size  Location     Type
 12420 ;;		None
 12421 ;; Return value:  Size  Location     Type
 12422 ;;                  1    wreg      void 
 12423 ;; Registers used:
 12424 ;;		wreg
 12425 ;; Tracked objects:
 12426 ;;		On entry : 1F/2
 12427 ;;		On exit  : 1F/5
 12428 ;;		Unchanged: 0/0
 12429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12430 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12433 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12434 ;;Total ram usage:        2 bytes
 12435 ;; Hardware stack levels used:    1
 12436 ;; This function calls:
 12437 ;;		Nothing
 12438 ;; This function is called by:
 12439 ;;		i1_updatePWM
 12440 ;; This function uses a non-reentrant model
 12441 ;;
 12442                           
 12443                           
 12444                           ;psect for function i1_PWM2_LoadDutyValue
 12445  06A1                     i1_PWM2_LoadDutyValue:	
 12446                           
 12447                           ;pwm.c: 58: dutyValue &= 0x03FF;
 12448                           
 12449                           ;incstack = 0
 12450                           ; Regs used in i1_PWM2_LoadDutyValue: [wreg]
 12451  06A1  30FF               	movlw	255
 12452  06A2  05F0               	andwf	i1PWM2_LoadDutyValue@dutyValue,f
 12453  06A3  3003               	movlw	3
 12454  06A4  05F1               	andwf	i1PWM2_LoadDutyValue@dutyValue+1,f
 12455                           
 12456                           ;pwm.c: 61: if( CCP2CONbits.CCP2FMT )
 12457  06A5  0025               	movlb	5	; select bank5
 12458  06A6  1E17               	btfss	23,4	;volatile
 12459  06A7  2EAD               	goto	i1l2963
 12460                           
 12461                           ;pwm.c: 62: {
 12462                           ;pwm.c: 63: dutyValue <<= 6;
 12463  06A8  3006               	movlw	6
 12464  06A9                     u229_25:	
 12465  06A9  35F0               	lslf	i1PWM2_LoadDutyValue@dutyValue,f
 12466  06AA  0DF1               	rlf	i1PWM2_LoadDutyValue@dutyValue+1,f
 12467  06AB  0B89               	decfsz	9,f
 12468  06AC  2EA9               	goto	u229_25
 12469  06AD                     i1l2963:	
 12470                           ;pwm.c: 64: CCPR2H = dutyValue >> 8;
 12471                           
 12472                           ;pwm.c: 65: CCPR2L = dutyValue;
 12473                           
 12474                           ;pwm.c: 66: }
 12475                           
 12476                           
 12477                           ;pwm.c: 67: else
 12478                           ;pwm.c: 68: {
 12479                           ;pwm.c: 69: CCPR2H = dutyValue >> 8;
 12480                           
 12481                           ;pwm.c: 70: CCPR2L = dutyValue;
 12482  06AD  2F3D               	ljmp	PL90	;call to abstracted procedure
 12483  06AE                     __end_ofi1_PWM2_LoadDutyValue:	
 12484  06AE                     __ptext77:	
 12485 ;; *************** function i1_PWM3_LoadDutyValue *****************
 12486 ;; Defined at:
 12487 ;;		line 91 in file "src/pwm.c"
 12488 ;; Parameters:    Size  Location     Type
 12489 ;;  dutyValue       2    0[COMMON] unsigned int 
 12490 ;; Auto vars:     Size  Location     Type
 12491 ;;		None
 12492 ;; Return value:  Size  Location     Type
 12493 ;;                  1    wreg      void 
 12494 ;; Registers used:
 12495 ;;		wreg
 12496 ;; Tracked objects:
 12497 ;;		On entry : 1F/2
 12498 ;;		On exit  : 1F/6
 12499 ;;		Unchanged: 0/0
 12500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12501 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12504 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12505 ;;Total ram usage:        2 bytes
 12506 ;; Hardware stack levels used:    1
 12507 ;; This function calls:
 12508 ;;		Nothing
 12509 ;; This function is called by:
 12510 ;;		i1_updatePWM
 12511 ;; This function uses a non-reentrant model
 12512 ;;
 12513                           
 12514                           
 12515                           ;psect for function i1_PWM3_LoadDutyValue
 12516  06AE                     i1_PWM3_LoadDutyValue:	
 12517                           
 12518                           ;pwm.c: 93: dutyValue &= 0x03FF;
 12519                           
 12520                           ;incstack = 0
 12521                           ; Regs used in i1_PWM3_LoadDutyValue: [wreg]
 12522  06AE  30FF               	movlw	255
 12523  06AF  05F0               	andwf	i1PWM3_LoadDutyValue@dutyValue,f
 12524  06B0  3003               	movlw	3
 12525  06B1  05F1               	andwf	i1PWM3_LoadDutyValue@dutyValue+1,f
 12526                           
 12527                           ;pwm.c: 96: if( CCP3CONbits.CCP3FMT )
 12528  06B2  0026               	movlb	6	; select bank6
 12529  06B3  1E13               	btfss	19,4	;volatile
 12530  06B4  2EBA               	goto	i1l2971
 12531                           
 12532                           ;pwm.c: 97: {
 12533                           ;pwm.c: 98: dutyValue <<= 6;
 12534  06B5  3006               	movlw	6
 12535  06B6                     u231_25:	
 12536  06B6  35F0               	lslf	i1PWM3_LoadDutyValue@dutyValue,f
 12537  06B7  0DF1               	rlf	i1PWM3_LoadDutyValue@dutyValue+1,f
 12538  06B8  0B89               	decfsz	9,f
 12539  06B9  2EB6               	goto	u231_25
 12540  06BA                     i1l2971:	
 12541                           ;pwm.c: 99: CCPR3H = dutyValue >> 8;
 12542                           
 12543                           ;pwm.c: 100: CCPR3L = dutyValue;
 12544                           
 12545                           ;pwm.c: 101: }
 12546                           
 12547                           
 12548                           ;pwm.c: 102: else
 12549                           ;pwm.c: 103: {
 12550                           ;pwm.c: 104: CCPR3H = dutyValue >> 8;
 12551                           
 12552                           ;pwm.c: 105: CCPR3L = dutyValue;
 12553  06BA  2F29               	ljmp	PL82	;call to abstracted procedure
 12554  06BB                     __end_ofi1_PWM3_LoadDutyValue:	
 12555  06BB                     __ptext75:	
 12556 ;; *************** function i1_PWM5_LoadDutyValue *****************
 12557 ;; Defined at:
 12558 ;;		line 152 in file "src/pwm.c"
 12559 ;; Parameters:    Size  Location     Type
 12560 ;;  dutyValue       2    0[COMMON] unsigned int 
 12561 ;; Auto vars:     Size  Location     Type
 12562 ;;		None
 12563 ;; Return value:  Size  Location     Type
 12564 ;;                  1    wreg      void 
 12565 ;; Registers used:
 12566 ;;		wreg, status,2, status,0
 12567 ;; Tracked objects:
 12568 ;;		On entry : 1F/2
 12569 ;;		On exit  : 1F/C
 12570 ;;		Unchanged: 0/0
 12571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12572 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12574 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12575 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12576 ;;Total ram usage:        4 bytes
 12577 ;; Hardware stack levels used:    1
 12578 ;; This function calls:
 12579 ;;		Nothing
 12580 ;; This function is called by:
 12581 ;;		i1_updatePWM
 12582 ;; This function uses a non-reentrant model
 12583 ;;
 12584                           
 12585                           
 12586                           ;psect for function i1_PWM5_LoadDutyValue
 12587  06BB                     i1_PWM5_LoadDutyValue:	
 12588                           
 12589                           ;pwm.c: 154: dutyValue &= 0x03FF;
 12590                           
 12591                           ;incstack = 0
 12592                           ; Regs used in i1_PWM5_LoadDutyValue: [wreg+status,2+status,0]
 12593  06BB  30FF               	movlw	255
 12594  06BC  05F0               	andwf	i1PWM5_LoadDutyValue@dutyValue,f
 12595  06BD  3003               	movlw	3
 12596  06BE  05F1               	andwf	i1PWM5_LoadDutyValue@dutyValue+1,f
 12597                           
 12598                           ;pwm.c: 155: PWM5DCH = dutyValue >> 2;
 12599  06BF  0871               	movf	i1PWM5_LoadDutyValue@dutyValue+1,w
 12600  06C0  00F3               	movwf	??i1_PWM5_LoadDutyValue+1
 12601  06C1  0870               	movf	i1PWM5_LoadDutyValue@dutyValue,w
 12602  06C2  00F2               	movwf	??i1_PWM5_LoadDutyValue
 12603  06C3  36F3               	lsrf	??i1_PWM5_LoadDutyValue+1,f
 12604  06C4  0CF2               	rrf	??i1_PWM5_LoadDutyValue,f
 12605  06C5  36F3               	lsrf	??i1_PWM5_LoadDutyValue+1,f
 12606  06C6  0CF2               	rrf	??i1_PWM5_LoadDutyValue,f
 12607  06C7  0872               	movf	??i1_PWM5_LoadDutyValue,w
 12608  06C8  002C               	movlb	12	; select bank12
 12609  06C9  0098               	movwf	24	;volatile
 12610                           
 12611                           ;pwm.c: 156: PWM5DCL = dutyValue << 6;
 12612  06CA  0870               	movf	i1PWM5_LoadDutyValue@dutyValue,w
 12613  06CB  00F2               	movwf	??i1_PWM5_LoadDutyValue
 12614  06CC  0CF2               	rrf	??i1_PWM5_LoadDutyValue,f
 12615  06CD  0CF2               	rrf	??i1_PWM5_LoadDutyValue,f
 12616  06CE  0C72               	rrf	??i1_PWM5_LoadDutyValue,w
 12617  06CF  39C0               	andlw	192
 12618  06D0  0097               	movwf	23	;volatile
 12619  06D1  0008               	return
 12620  06D2                     __end_ofi1_PWM5_LoadDutyValue:	
 12621  06D2                     __ptext72:	
 12622 ;; *************** function i1_updateDayRiseStatus *****************
 12623 ;; Defined at:
 12624 ;;		line 401 in file "src/led.c"
 12625 ;; Parameters:    Size  Location     Type
 12626 ;;		None
 12627 ;; Auto vars:     Size  Location     Type
 12628 ;;		None
 12629 ;; Return value:  Size  Location     Type
 12630 ;;                  1    wreg      void 
 12631 ;; Registers used:
 12632 ;;		wreg
 12633 ;; Tracked objects:
 12634 ;;		On entry : 1C/2
 12635 ;;		On exit  : 1F/2
 12636 ;;		Unchanged: 0/0
 12637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12642 ;;Total ram usage:        0 bytes
 12643 ;; Hardware stack levels used:    1
 12644 ;; This function calls:
 12645 ;;		Nothing
 12646 ;; This function is called by:
 12647 ;;		_keyAction
 12648 ;; This function uses a non-reentrant model
 12649 ;;
 12650                           
 12651                           
 12652                           ;psect for function i1_updateDayRiseStatus
 12653  06D2                     i1_updateDayRiseStatus:	
 12654                           
 12655                           ;led.c: 403: if ( gLedPara.tPara.nDayBrt > 1000 - 200 )
 12656                           
 12657                           ;incstack = 0
 12658                           ; Regs used in i1_updateDayRiseStatus: [wreg]
 12659  06D2  3003               	movlw	3
 12660  06D3  0022               	movlb	2	; select bank2
 12661  06D4  0254               	subwf	((_gLedPara+1)^(0+256)+51),w	;volatile
 12662  06D5  3021               	movlw	33
 12663  06D6  1903               	skipnz
 12664  06D7  0253               	subwf	(_gLedPara^(0+256)+51),w	;volatile
 12665  06D8  1C03               	skipc
 12666  06D9  2EDC               	goto	i1l3215
 12667                           
 12668                           ;led.c: 404: {
 12669                           ;led.c: 405: gLedRunPara.fDr = 0;
 12670  06DA  1257               	bcf	_gLedRunPara^(0+256),4	;volatile
 12671                           
 12672                           ;led.c: 406: }
 12673  06DB  0008               	return
 12674  06DC                     i1l3215:	
 12675                           
 12676                           ;led.c: 407: else if ( gLedPara.tPara.nDayBrt < 200 )
 12677                           
 12678                           ;led.c: 408: {
 12679                           ;led.c: 409: gLedRunPara.fDr = 1;
 12680  06DC  2F0E               	ljmp	PL48	;call to abstracted procedure
 12681  06DD                     __end_ofi1_updateDayRiseStatus:	
 12682  06DD                     __ptext70:	
 12683 ;; *************** function i1_updateNightRiseStatus *****************
 12684 ;; Defined at:
 12685 ;;		line 432 in file "src/led.c"
 12686 ;; Parameters:    Size  Location     Type
 12687 ;;		None
 12688 ;; Auto vars:     Size  Location     Type
 12689 ;;		None
 12690 ;; Return value:  Size  Location     Type
 12691 ;;                  1    wreg      void 
 12692 ;; Registers used:
 12693 ;;		wreg
 12694 ;; Tracked objects:
 12695 ;;		On entry : 1C/2
 12696 ;;		On exit  : 1F/2
 12697 ;;		Unchanged: 0/0
 12698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12703 ;;Total ram usage:        0 bytes
 12704 ;; Hardware stack levels used:    1
 12705 ;; This function calls:
 12706 ;;		Nothing
 12707 ;; This function is called by:
 12708 ;;		_keyAction
 12709 ;; This function uses a non-reentrant model
 12710 ;;
 12711                           
 12712                           
 12713                           ;psect for function i1_updateNightRiseStatus
 12714  06DD                     i1_updateNightRiseStatus:	
 12715                           
 12716                           ;led.c: 434: if ( gLedPara.tPara.nNightBrt > 1000 - 200 )
 12717                           
 12718                           ;incstack = 0
 12719                           ; Regs used in i1_updateNightRiseStatus: [wreg]
 12720  06DD  3003               	movlw	3
 12721  06DE  0022               	movlb	2	; select bank2
 12722  06DF  0256               	subwf	((_gLedPara+1)^(0+256)+53),w	;volatile
 12723  06E0  3021               	movlw	33
 12724  06E1  1903               	skipnz
 12725  06E2  0255               	subwf	(_gLedPara^(0+256)+53),w	;volatile
 12726  06E3  1C03               	skipc
 12727  06E4  2EE7               	goto	i1l3241
 12728                           
 12729                           ;led.c: 435: {
 12730                           ;led.c: 436: gLedRunPara.fNr = 0;
 12731  06E5  12D7               	bcf	_gLedRunPara^(0+256),5	;volatile
 12732                           
 12733                           ;led.c: 437: }
 12734  06E6  0008               	return
 12735  06E7                     i1l3241:	
 12736                           
 12737                           ;led.c: 438: else if ( gLedPara.tPara.nNightBrt < 200 )
 12738                           
 12739                           ;led.c: 439: {
 12740                           ;led.c: 440: gLedRunPara.fNr = 1;
 12741  06E7  2F16               	ljmp	PL50	;call to abstracted procedure
 12742  06E8                     __end_ofi1_updateNightRiseStatus:	
 12743  06E8                     PL10:	
 12744  06E8  3E23               	addlw	(low ((_gLedPara| (0+256)+3)))& (0+255)
 12745  06E9  0086               	movwf	6
 12746  06EA  3001               	movlw	1	; select bank2/3
 12747  06EB  0087               	movwf	7
 12748  06EC  3000               	movlw	0
 12749  06ED  3FC0               	movwi [0]fsr1
 12750  06EE  3FC1               	movwi [1]fsr1
 12751  06EF  0008               	return
 12752  06F0                     __end_ofPL10:	
 12753  06F0                     PL28:	
 12754  06F0  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 12755  06F1  3903               	andlw	3
 12756  06F2  00F5               	movwf	??_keyAction
 12757  06F3  0AF5               	incf	??_keyAction,f
 12758  06F4  0DF5               	rlf	??_keyAction,f
 12759  06F5  0820               	movf	_gLedPara^(0+256),w	;volatile
 12760  06F6  0675               	xorwf	??_keyAction,w
 12761  06F7  39F9               	andlw	-7
 12762  06F8  0675               	xorwf	??_keyAction,w
 12763  06F9  00A0               	movwf	_gLedPara^(0+256)	;volatile
 12764  06FA  0008               	return
 12765  06FB                     __end_ofPL28:	
 12766  06FB                     PL32:	
 12767  06FB  3E23               	addlw	(low ((_gLedPara| (0+256)+3)))& (0+255)
 12768  06FC  0086               	movwf	6
 12769  06FD  3001               	movlw	1	; select bank2/3
 12770  06FE  0087               	movwf	7
 12771  06FF  0022               	movlb	2	; select bank2
 12772  0700  0855               	movf	(_gLedPara^(0+256)+53),w	;volatile
 12773  0701  3FC0               	movwi [0]fsr1
 12774  0702  0856               	movf	((_gLedPara+1)^(0+256)+53),w	;volatile
 12775  0703  3FC1               	movwi [1]fsr1
 12776  0704  0008               	return
 12777  0705                     __end_ofPL32:	
 12778  0705                     PL38:	
 12779  0705  0086               	movwf	6
 12780  0706  3001               	movlw	1	; select bank2/3
 12781  0707  0087               	movwf	7
 12782  0708  0022               	movlb	2	; select bank2
 12783  0709  0853               	movf	(_gLedPara^(0+256)+51),w	;volatile
 12784  070A  3FC0               	movwi [0]fsr1
 12785  070B  0854               	movf	((_gLedPara+1)^(0+256)+51),w	;volatile
 12786  070C  3FC1               	movwi [1]fsr1
 12787  070D  0008               	return
 12788  070E                     __end_ofPL38:	
 12789  070E                     PL48:	
 12790  070E  3000               	movlw	0
 12791  070F  0254               	subwf	((_gLedPara+1)^(0+256)+51),w	;volatile
 12792  0710  30C8               	movlw	200
 12793  0711  1903               	skipnz
 12794  0712  0253               	subwf	(_gLedPara^(0+256)+51),w	;volatile
 12795  0713  1C03               	btfss	3,0
 12796  0714  1657               	bsf	_gLedRunPara^(0+256),4	;volatile
 12797  0715  0008               	return
 12798  0716                     __end_ofPL48:	
 12799  0716                     PL50:	
 12800  0716  3000               	movlw	0
 12801  0717  0256               	subwf	((_gLedPara+1)^(0+256)+53),w	;volatile
 12802  0718  30C8               	movlw	200
 12803  0719  1903               	skipnz
 12804  071A  0255               	subwf	(_gLedPara^(0+256)+53),w	;volatile
 12805  071B  1C03               	btfss	3,0
 12806  071C  16D7               	bsf	_gLedRunPara^(0+256),5	;volatile
 12807  071D  0008               	return
 12808  071E                     __end_ofPL50:	
 12809  071E                     PL58:	
 12810  071E  3E65               	addlw	(low ((_gLedRunPara| (0+256)+14)))& (0+255)
 12811  071F  0086               	movwf	6
 12812  0720  3000               	movlw	0
 12813  0721  3FC0               	movwi [0]fsr1
 12814  0722  3FC1               	movwi [1]fsr1
 12815  0723  0008               	return
 12816  0724                     __end_ofPL58:	
 12817  0724                     PL80:	
 12818  0724  0871               	movf	i1PWM1_LoadDutyValue@dutyValue+1,w
 12819  0725  0092               	movwf	18	;volatile
 12820  0726  0870               	movf	i1PWM1_LoadDutyValue@dutyValue,w
 12821  0727  0091               	movwf	17	;volatile
 12822  0728  0008               	return
 12823  0729                     __end_ofPL80:	
 12824  0729                     PL82:	
 12825  0729  0871               	movf	i1PWM3_LoadDutyValue@dutyValue+1,w
 12826  072A  0092               	movwf	18	;volatile
 12827  072B  0870               	movf	i1PWM3_LoadDutyValue@dutyValue,w
 12828  072C  0091               	movwf	17	;volatile
 12829  072D  0008               	return
 12830  072E                     __end_ofPL82:	
 12831  072E                     PL84:	
 12832  072E  0022               	movlb	2	; select bank2
 12833  072F  130D               	bcf	13,6	;volatile
 12834  0730  148C               	bsf	12,1	;volatile
 12835  0731  178D               	bsf	13,7	;volatile
 12836  0732  0008               	return
 12837  0733                     __end_ofPL84:	
 12838  0733                     PL86:	
 12839  0733  0022               	movlb	2	; select bank2
 12840  0734  130D               	bcf	13,6	;volatile
 12841  0735  108C               	bcf	12,1	;volatile
 12842  0736  138D               	bcf	13,7	;volatile
 12843  0737  0008               	return
 12844  0738                     __end_ofPL86:	
 12845  0738                     PL88:	
 12846  0738  0022               	movlb	2	; select bank2
 12847  0739  170D               	bsf	13,6	;volatile
 12848  073A  148C               	bsf	12,1	;volatile
 12849  073B  138D               	bcf	13,7	;volatile
 12850  073C  0008               	return
 12851  073D                     __end_ofPL88:	
 12852  073D                     PL90:	
 12853  073D  0871               	movf	i1PWM2_LoadDutyValue@dutyValue+1,w
 12854  073E  0096               	movwf	22	;volatile
 12855  073F  0870               	movf	i1PWM2_LoadDutyValue@dutyValue,w
 12856  0740  0095               	movwf	21	;volatile
 12857  0741  0008               	return
 12858  0742                     __end_ofPL90:	
 12859  0742                     PL92:	
 12860  0742  0022               	movlb	2	; select bank2
 12861  0743  170D               	bsf	13,6	;volatile
 12862  0744  108C               	bcf	12,1	;volatile
 12863  0745  178D               	bsf	13,7	;volatile
 12864  0746  0008               	return
 12865  0747                     __end_ofPL92:	
 12866  0747                     PL94:	
 12867  0747  0855               	movf	(_gLedPara^(0+256)+53),w	;volatile
 12868  0748  3FC0               	movwi [0]fsr1
 12869  0749  0856               	movf	((_gLedPara+1)^(0+256)+53),w	;volatile
 12870  074A  3FC1               	movwi [1]fsr1
 12871  074B  0008               	return
 12872  074C                     __end_ofPL94:	
 12873  074C                     PL100:	
 12874  074C  3003               	movlw	3
 12875  074D  00D4               	movwf	((_gLedPara+1)^(0+256)+51)	;volatile
 12876  074E  30E8               	movlw	232
 12877  074F  00D3               	movwf	(_gLedPara^(0+256)+51)	;volatile
 12878  0750  0008               	return
 12879  0751                     __end_ofPL100:	
 12880  0751                     PL102:	
 12881  0751  3003               	movlw	3
 12882  0752  00D6               	movwf	((_gLedPara+1)^(0+256)+53)	;volatile
 12883  0753  30E8               	movlw	232
 12884  0754  00D5               	movwf	(_gLedPara^(0+256)+53)	;volatile
 12885  0755  0008               	return
 12886  0756                     __end_ofPL102:	
 12887  0756                     PL104:	
 12888  0756  00F6               	movwf	??_keyAction+1
 12889  0757  3003               	movlw	3
 12890  0758  0276               	subwf	??_keyAction+1,w
 12891  0759  34E8               	retlw	232
 12892  075A                     __end_ofPL104:	
 12893  075A                     PL106:	
 12894  075A  0022               	movlb	2	; select bank2
 12895  075B  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 12896  075C  3903               	andlw	3
 12897  075D  00F7               	movwf	keyAction@sta
 12898  075E  0008               	return
 12899  075F                     __end_ofPL106:	
 12900  075F                     __ptext67:	
 12901 ;; *************** function _keyScan *****************
 12902 ;; Defined at:
 12903 ;;		line 21 in file "src/key.c"
 12904 ;; Parameters:    Size  Location     Type
 12905 ;;		None
 12906 ;; Auto vars:     Size  Location     Type
 12907 ;;  keyNum          1    1[COMMON] unsigned char 
 12908 ;; Return value:  Size  Location     Type
 12909 ;;                  1    wreg      void 
 12910 ;; Registers used:
 12911 ;;		wreg, status,2, status,0, pclath, cstack
 12912 ;; Tracked objects:
 12913 ;;		On entry : 1F/1
 12914 ;;		On exit  : 1F/1
 12915 ;;		Unchanged: 0/0
 12916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12918 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12920 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12921 ;;Total ram usage:        1 bytes
 12922 ;; Hardware stack levels used:    1
 12923 ;; Hardware stack levels required when called:    1
 12924 ;; This function calls:
 12925 ;;		_ReadKey
 12926 ;; This function is called by:
 12927 ;;		_TMR2_UserInterruptHandler
 12928 ;; This function uses a non-reentrant model
 12929 ;;
 12930                           
 12931                           
 12932                           ;psect for function _keyScan
 12933  075F                     _keyScan:	
 12934                           
 12935                           ;key.c: 23: static unsigned char lastKey = 0x00;
 12936                           ;key.c: 24: static unsigned char rptCount = 0;
 12937                           ;key.c: 26: unsigned char keyNum = ReadKey();
 12938                           
 12939                           ;incstack = 0
 12940                           ; Regs used in _keyScan: [wreg+status,2+status,0+pclath+cstack]
 12941  075F  2788  3184         	fcall	_ReadKey
 12942  0761  00F1               	movwf	keyScan@keyNum
 12943                           
 12944                           ;key.c: 27: if(keyNum != 0x00)
 12945  0762  0871               	movf	keyScan@keyNum,w
 12946  0763  1903               	btfsc	3,2
 12947  0764  2F74               	goto	i1l3457
 12948                           
 12949                           ;key.c: 28: {
 12950                           ;key.c: 29: if(keyNum == lastKey)
 12951  0765  0871               	movf	keyScan@keyNum,w
 12952  0766  067D               	xorwf	keyScan@lastKey,w
 12953  0767  1D03               	skipz
 12954  0768  2F84               	goto	i1l3455
 12955  0769  301A               	movlw	26
 12956                           
 12957                           ;key.c: 30: {
 12958                           ;key.c: 31: rptCount++;
 12959  076A  0AFB               	incf	keyScan@rptCount,f
 12960                           
 12961                           ;key.c: 32: if(rptCount >= 25 + 1)
 12962  076B  027B               	subwf	keyScan@rptCount,w
 12963  076C  1C03               	skipc
 12964  076D  2F85               	goto	i1l3469
 12965                           
 12966                           ;key.c: 33: {
 12967                           ;key.c: 34: rptCount = 25;
 12968  076E  3019               	movlw	25
 12969  076F  00FB               	movwf	keyScan@rptCount
 12970                           
 12971                           ;key.c: 35: keyValue = 0x40 | keyNum;
 12972  0770  0871               	movf	keyScan@keyNum,w
 12973  0771  3840               	iorlw	64
 12974  0772  00FC               	movwf	_keyValue	;volatile
 12975  0773  2F85               	goto	i1l3469
 12976  0774                     i1l3457:	
 12977                           
 12978                           ;key.c: 43: else
 12979                           ;key.c: 44: {
 12980                           ;key.c: 45: if(lastKey != 0x00)
 12981  0774  087D               	movf	keyScan@lastKey,w
 12982  0775  1903               	btfsc	3,2
 12983  0776  2F84               	goto	i1l3455
 12984                           
 12985                           ;key.c: 46: {
 12986                           ;key.c: 47: if (rptCount >= 25)
 12987  0777  3019               	movlw	25
 12988  0778  027B               	subwf	keyScan@rptCount,w
 12989  0779  1C03               	skipc
 12990  077A  2F7E               	goto	i1l3463
 12991                           
 12992                           ;key.c: 48: {
 12993                           ;key.c: 49: keyValue = 0x20 | lastKey;
 12994  077B  087D               	movf	keyScan@lastKey,w
 12995  077C  3820               	iorlw	32
 12996  077D  2F83               	goto	L12
 12997  077E                     i1l3463:	
 12998                           ;key.c: 50: }
 12999                           
 13000                           
 13001                           ;key.c: 51: else if( rptCount > 2 )
 13002  077E  3003               	movlw	3
 13003  077F  027B               	subwf	keyScan@rptCount,w
 13004  0780  1C03               	skipc
 13005  0781  2F84               	goto	i1l3455
 13006                           
 13007                           ;key.c: 52: {
 13008                           ;key.c: 53: keyValue = lastKey;
 13009  0782  087D               	movf	keyScan@lastKey,w
 13010  0783                     L12:	
 13011  0783  00FC               	movwf	_keyValue	;volatile
 13012  0784                     i1l3455:	
 13013                           
 13014                           ;key.c: 38: else
 13015                           ;key.c: 39: {
 13016                           ;key.c: 40: rptCount = 0;
 13017  0784  01FB               	clrf	keyScan@rptCount
 13018  0785                     i1l3469:	
 13019                           
 13020                           ;key.c: 57: }
 13021                           ;key.c: 58: lastKey = keyNum;
 13022  0785  0871               	movf	keyScan@keyNum,w
 13023  0786  00FD               	movwf	keyScan@lastKey
 13024  0787  0008               	return
 13025  0788                     __end_of_keyScan:	
 13026  0788                     __ptext68:	
 13027 ;; *************** function _ReadKey *****************
 13028 ;; Defined at:
 13029 ;;		line 11 in file "src/key.c"
 13030 ;; Parameters:    Size  Location     Type
 13031 ;;		None
 13032 ;; Auto vars:     Size  Location     Type
 13033 ;;  ReadData        1    0[COMMON] unsigned char 
 13034 ;; Return value:  Size  Location     Type
 13035 ;;                  1    wreg      unsigned char 
 13036 ;; Registers used:
 13037 ;;		wreg, status,2, status,0
 13038 ;; Tracked objects:
 13039 ;;		On entry : 1F/1
 13040 ;;		On exit  : 1F/1
 13041 ;;		Unchanged: 0/0
 13042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13044 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13046 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13047 ;;Total ram usage:        1 bytes
 13048 ;; Hardware stack levels used:    1
 13049 ;; This function calls:
 13050 ;;		Nothing
 13051 ;; This function is called by:
 13052 ;;		_keyScan
 13053 ;; This function uses a non-reentrant model
 13054 ;;
 13055                           
 13056                           
 13057                           ;psect for function _ReadKey
 13058  0788                     _ReadKey:	
 13059                           
 13060                           ;key.c: 13: static unsigned char Trg;
 13061                           ;key.c: 14: static unsigned char Cont;
 13062                           ;key.c: 15: unsigned char ReadData = (PORTC ^ 0xFF) & 0x01;
 13063                           
 13064                           ;incstack = 0
 13065                           ; Regs used in _ReadKey: [wreg+status,2+status,0]
 13066  0788  0020               	movlb	0	; select bank0
 13067  0789  090E               	comf	14,w	;volatile
 13068  078A  00F0               	movwf	ReadKey@ReadData
 13069  078B  3001               	movlw	1
 13070  078C  05F0               	andwf	ReadKey@ReadData,f
 13071                           
 13072                           ;key.c: 16: Trg = ReadData & (ReadData ^ Cont);
 13073  078D  0870               	movf	ReadKey@ReadData,w
 13074  078E  0021               	movlb	1	; select bank1
 13075  078F  0661               	xorwf	ReadKey@Cont^(0+128),w
 13076  0790  00E2               	movwf	ReadKey@Trg^(0+128)
 13077  0791  0870               	movf	ReadKey@ReadData,w
 13078  0792  05E2               	andwf	ReadKey@Trg^(0+128),f
 13079                           
 13080                           ;key.c: 17: Cont = ReadData;
 13081  0793  00E1               	movwf	ReadKey@Cont^(0+128)
 13082                           
 13083                           ;key.c: 18: return (Trg ^ Cont);
 13084  0794  0662               	xorwf	ReadKey@Trg^(0+128),w
 13085  0795  0008               	return
 13086  0796                     __end_of_ReadKey:	
 13087  0796                     __ptext76:	
 13088 ;; *************** function i1_PWM4_LoadDutyValue *****************
 13089 ;; Defined at:
 13090 ;;		line 126 in file "src/pwm.c"
 13091 ;; Parameters:    Size  Location     Type
 13092 ;;  dutyValue       2    0[COMMON] unsigned int 
 13093 ;; Auto vars:     Size  Location     Type
 13094 ;;		None
 13095 ;; Return value:  Size  Location     Type
 13096 ;;                  1    wreg      void 
 13097 ;; Registers used:
 13098 ;;		wreg
 13099 ;; Tracked objects:
 13100 ;;		On entry : 1F/2
 13101 ;;		On exit  : 1F/6
 13102 ;;		Unchanged: 0/0
 13103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13104 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13107 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13108 ;;Total ram usage:        2 bytes
 13109 ;; Hardware stack levels used:    1
 13110 ;; This function calls:
 13111 ;;		Nothing
 13112 ;; This function is called by:
 13113 ;;		i1_updatePWM
 13114 ;; This function uses a non-reentrant model
 13115 ;;
 13116                           
 13117                           
 13118                           ;psect for function i1_PWM4_LoadDutyValue
 13119  0796                     i1_PWM4_LoadDutyValue:	
 13120                           
 13121                           ;pwm.c: 128: dutyValue &= 0x03FF;
 13122                           
 13123                           ;incstack = 0
 13124                           ; Regs used in i1_PWM4_LoadDutyValue: [wreg]
 13125  0796  30FF               	movlw	255
 13126  0797  05F0               	andwf	i1PWM4_LoadDutyValue@dutyValue,f
 13127  0798  3003               	movlw	3
 13128  0799  05F1               	andwf	i1PWM4_LoadDutyValue@dutyValue+1,f
 13129                           
 13130                           ;pwm.c: 131: if( CCP4CONbits.CCP4FMT )
 13131  079A  0026               	movlb	6	; select bank6
 13132  079B  1E17               	btfss	23,4	;volatile
 13133  079C  2FA2               	goto	i1l2979
 13134                           
 13135                           ;pwm.c: 132: {
 13136                           ;pwm.c: 133: dutyValue <<= 6;
 13137  079D  3006               	movlw	6
 13138  079E                     u233_25:	
 13139  079E  35F0               	lslf	i1PWM4_LoadDutyValue@dutyValue,f
 13140  079F  0DF1               	rlf	i1PWM4_LoadDutyValue@dutyValue+1,f
 13141  07A0  0B89               	decfsz	9,f
 13142  07A1  2F9E               	goto	u233_25
 13143  07A2                     i1l2979:	
 13144                           ;pwm.c: 134: CCPR4H = dutyValue >> 8;
 13145                           
 13146                           ;pwm.c: 135: CCPR4L = dutyValue;
 13147                           
 13148                           ;pwm.c: 136: }
 13149                           
 13150                           
 13151                           ;pwm.c: 137: else
 13152                           ;pwm.c: 138: {
 13153                           ;pwm.c: 139: CCPR4H = dutyValue >> 8;
 13154                           
 13155                           ;pwm.c: 140: CCPR4L = dutyValue;
 13156  07A2  2FA3               	ljmp	PL72	;call to abstracted procedure
 13157  07A3                     __end_ofi1_PWM4_LoadDutyValue:	
 13158  07A3                     PL72:	
 13159  07A3  0871               	movf	i1PWM4_LoadDutyValue@dutyValue+1,w
 13160  07A4  0096               	movwf	22	;volatile
 13161  07A5  0870               	movf	i1PWM4_LoadDutyValue@dutyValue,w
 13162  07A6  0095               	movwf	21	;volatile
 13163  07A7  0008               	return
 13164  07A8                     __end_ofPL72:	
 13165  07A8                     __ptext66:	
 13166 ;; *************** function _updateLed *****************
 13167 ;; Defined at:
 13168 ;;		line 41 in file "src/led.c"
 13169 ;; Parameters:    Size  Location     Type
 13170 ;;		None
 13171 ;; Auto vars:     Size  Location     Type
 13172 ;;  i               1   10[COMMON] unsigned char 
 13173 ;; Return value:  Size  Location     Type
 13174 ;;                  1    wreg      void 
 13175 ;; Registers used:
 13176 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13177 ;; Tracked objects:
 13178 ;;		On entry : 1F/2
 13179 ;;		On exit  : 1F/6
 13180 ;;		Unchanged: 0/0
 13181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13183 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13184 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13185 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13186 ;;Total ram usage:        7 bytes
 13187 ;; Hardware stack levels used:    1
 13188 ;; Hardware stack levels required when called:    2
 13189 ;; This function calls:
 13190 ;;		i1_updatePWM
 13191 ;; This function is called by:
 13192 ;;		_TMR2_UserInterruptHandler
 13193 ;; This function uses a non-reentrant model
 13194 ;;
 13195                           
 13196                           
 13197                           ;psect for function _updateLed
 13198  07A8                     _updateLed:	
 13199  07A8                     i1l3567:	
 13200                           ;incstack = 0
 13201                           ; Regs used in _updateLed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13202                           
 13203                           
 13204                           ;led.c: 43: for ( unsigned char i = 0; i < 5; i++ )
 13205  07A8  01FA               	clrf	updateLed@i
 13206  07A9                     i1l3573:	
 13207                           
 13208                           ;led.c: 44: {
 13209                           ;led.c: 45: if ( gLedRunPara.nCurrentBrt[i] + 4 < gLedRunPara.nTargetBrt[i] )
 13210  07A9  357A               	lslf	updateLed@i,w
 13211  07AA  3E5B               	addlw	(low ((_gLedRunPara| (0+256)+4)))& (0+255)
 13212  07AB  27ED  3184         	fcall	PL36	;call to abstracted procedure
 13213  07AD  3E65               	addlw	(low ((_gLedRunPara| (0+256)+14)))& (0+255)
 13214  07AE  27DB  3184         	fcall	PL4	;call to abstracted procedure
 13215  07B0  1803               	skipnc
 13216  07B1  2FB9               	goto	i1l3577
 13217                           
 13218                           ;led.c: 46: {
 13219                           ;led.c: 47: gLedRunPara.nCurrentBrt[i] += 4;
 13220  07B2  27F6  3184         	fcall	PL60	;call to abstracted procedure
 13221  07B4  0781               	addwf	1,f
 13222  07B5  3141               	addfsr 1,1
 13223  07B6  1803               	skipnc
 13224  07B7  0A81               	incf	1,f
 13225                           
 13226                           ;led.c: 48: }
 13227  07B8  2FD4               	goto	i1l3583
 13228  07B9                     i1l3577:	
 13229                           
 13230                           ;led.c: 49: else if ( gLedRunPara.nTargetBrt[i] + 4 < gLedRunPara.nCurrentBrt[i] )
 13231  07B9  357A               	lslf	updateLed@i,w
 13232  07BA  3E65               	addlw	(low ((_gLedRunPara| (0+256)+14)))& (0+255)
 13233  07BB  27ED  3184         	fcall	PL36	;call to abstracted procedure
 13234  07BD  3E5B               	addlw	(low ((_gLedRunPara| (0+256)+4)))& (0+255)
 13235  07BE  27DB  3184         	fcall	PL4	;call to abstracted procedure
 13236  07C0  1803               	skipnc
 13237  07C1  2FCA               	goto	i1l3581
 13238                           
 13239                           ;led.c: 50: {
 13240                           ;led.c: 51: gLedRunPara.nCurrentBrt[i] -= 4;
 13241  07C2  27F6  3184         	fcall	PL60	;call to abstracted procedure
 13242  07C4  0281               	subwf	1,f
 13243  07C5  3000               	movlw	0
 13244  07C6  3141               	addfsr 1,1
 13245  07C7  3B81               	subwfb	1,f
 13246  07C8  317F               	addfsr 1,-1
 13247                           
 13248                           ;led.c: 52: }
 13249  07C9  2FD4               	goto	i1l3583
 13250  07CA                     i1l3581:	
 13251                           
 13252                           ;led.c: 53: else
 13253                           ;led.c: 54: {
 13254                           ;led.c: 55: gLedRunPara.nCurrentBrt[i] = gLedRunPara.nTargetBrt[i];
 13255  07CA  357A               	lslf	updateLed@i,w
 13256  07CB  3E5B               	addlw	(low ((_gLedRunPara| (0+256)+4)))& (0+255)
 13257  07CC  0086               	movwf	6
 13258  07CD  3001               	movlw	1	; select bank2/3
 13259  07CE  0087               	movwf	7
 13260  07CF  357A               	lslf	updateLed@i,w
 13261  07D0  3E65               	addlw	(low ((_gLedRunPara| (0+256)+14)))& (0+255)
 13262  07D1  318F  2792  3184   	fcall	PL8	;call to abstracted procedure
 13263  07D4                     i1l3583:	
 13264  07D4  3005               	movlw	5
 13265  07D5  0AFA               	incf	updateLed@i,f
 13266  07D6  027A               	subwf	updateLed@i,w
 13267  07D7  1C03               	skipc
 13268  07D8  2FA9               	goto	i1l3573
 13269                           
 13270                           ;led.c: 56: }
 13271                           ;led.c: 57: }
 13272                           ;led.c: 58: updatePWM();
 13273  07D9  266E               	fcall	i1_updatePWM
 13274  07DA  0008               	return
 13275  07DB                     __end_of_updateLed:	
 13276  07DB                     PL4:	
 13277  07DB  0086               	movwf	6
 13278  07DC  3F40               	moviw [0]fsr1
 13279  07DD  00F6               	movwf	??_updateLed+2
 13280  07DE  3F41               	moviw [1]fsr1
 13281  07DF  00F7               	movwf	??_updateLed+3
 13282  07E0  0876               	movf	??_updateLed+2,w
 13283  07E1  3E04               	addlw	4
 13284  07E2  00F8               	movwf	??_updateLed+4
 13285  07E3  3000               	movlw	0
 13286  07E4  3D77               	addwfc	??_updateLed+3,w
 13287  07E5  00F9               	movwf	??_updateLed+5
 13288  07E6  0875               	movf	??_updateLed+1,w
 13289  07E7  0279               	subwf	??_updateLed+5,w
 13290  07E8  1D03               	skipz
 13291  07E9  0008               	return
 13292  07EA  0874               	movf	??_updateLed,w
 13293  07EB  0278               	subwf	??_updateLed+4,w
 13294  07EC  0008               	return
 13295  07ED                     __end_ofPL4:	
 13296  07ED                     PL36:	
 13297  07ED  0086               	movwf	6
 13298  07EE  3001               	movlw	1	; select bank2/3
 13299  07EF  0087               	movwf	7
 13300  07F0  3F40               	moviw [0]fsr1
 13301  07F1  00F4               	movwf	??_updateLed
 13302  07F2  3F41               	moviw [1]fsr1
 13303  07F3  00F5               	movwf	??_updateLed+1
 13304  07F4  357A               	lslf	updateLed@i,w
 13305  07F5  0008               	return
 13306  07F6                     __end_ofPL36:	
 13307  07F6                     PL60:	
 13308  07F6  357A               	lslf	updateLed@i,w
 13309  07F7  3E65               	addlw	(low ((_gLedRunPara| (0+256)+14)))& (0+255)
 13310  07F8  0086               	movwf	6
 13311  07F9  3001               	movlw	1	; select bank2/3
 13312  07FA  0087               	movwf	7
 13313  07FB  3404               	retlw	4
 13314  07FC                     __end_ofPL60:	
 13315                           
 13316                           	psect	text36
 13317  15B9                     __ptext36:	
 13318 ;; *************** function _TMR0_Initialize *****************
 13319 ;; Defined at:
 13320 ;;		line 7 in file "src/tmr.c"
 13321 ;; Parameters:    Size  Location     Type
 13322 ;;		None
 13323 ;; Auto vars:     Size  Location     Type
 13324 ;;		None
 13325 ;; Return value:  Size  Location     Type
 13326 ;;                  1    wreg      void 
 13327 ;; Registers used:
 13328 ;;		wreg, status,2
 13329 ;; Tracked objects:
 13330 ;;		On entry : 1F/1
 13331 ;;		On exit  : 1F/1
 13332 ;;		Unchanged: 0/0
 13333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13338 ;;Total ram usage:        0 bytes
 13339 ;; Hardware stack levels used:    1
 13340 ;; Hardware stack levels required when called:    6
 13341 ;; This function calls:
 13342 ;;		Nothing
 13343 ;; This function is called by:
 13344 ;;		_SYSTEM_Initialize
 13345 ;; This function uses a non-reentrant model
 13346 ;;
 13347                           
 13348                           
 13349                           ;psect for function _TMR0_Initialize
 13350  15B9                     _TMR0_Initialize:	
 13351                           
 13352                           ;tmr.c: 12: T0CON0 = 0x00;
 13353                           
 13354                           ;incstack = 0
 13355                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
 13356  15B9  0020               	movlb	0	; select bank0
 13357  15BA  0197               	clrf	23	;volatile
 13358                           
 13359                           ;tmr.c: 15: T0CON1 = 0xD7;
 13360  15BB  30D7               	movlw	215
 13361  15BC  0098               	movwf	24	;volatile
 13362                           
 13363                           ;tmr.c: 18: TMR0H = 0xFF;
 13364  15BD  30FF               	movlw	255
 13365  15BE  0096               	movwf	22	;volatile
 13366                           
 13367                           ;tmr.c: 21: TMR0L = 0x00;
 13368  15BF  0195               	clrf	21	;volatile
 13369                           
 13370                           ;tmr.c: 24: PIR0bits.TMR0IF = 0;
 13371  15C0  1290               	bcf	16,5	;volatile
 13372                           
 13373                           ;tmr.c: 27: PIE0bits.TMR0IE = 1;
 13374  15C1  0021               	movlb	1	; select bank1
 13375  15C2  1690               	bsf	16,5	;volatile
 13376  15C3  0008               	return
 13377  15C4                     __end_of_TMR0_Initialize:	
 13378                           
 13379                           	psect	text42
 13380  15DB                     __ptext42:	
 13381 ;; *************** function _PIN_MANAGER_Initialize *****************
 13382 ;; Defined at:
 13383 ;;		line 3 in file "src/pin.c"
 13384 ;; Parameters:    Size  Location     Type
 13385 ;;		None
 13386 ;; Auto vars:     Size  Location     Type
 13387 ;;  state           1    0[BANK0 ] unsigned char 
 13388 ;; Return value:  Size  Location     Type
 13389 ;;                  1    wreg      void 
 13390 ;; Registers used:
 13391 ;;		wreg, status,2, status,0
 13392 ;; Tracked objects:
 13393 ;;		On entry : B1F/0
 13394 ;;		On exit  : 0/0
 13395 ;;		Unchanged: 0/0
 13396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13400 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13401 ;;Total ram usage:        1 bytes
 13402 ;; Hardware stack levels used:    1
 13403 ;; Hardware stack levels required when called:    6
 13404 ;; This function calls:
 13405 ;;		Nothing
 13406 ;; This function is called by:
 13407 ;;		_SYSTEM_Initialize
 13408 ;; This function uses a non-reentrant model
 13409 ;;
 13410                           
 13411                           
 13412                           ;psect for function _PIN_MANAGER_Initialize
 13413  15DB                     _PIN_MANAGER_Initialize:	
 13414                           
 13415                           ;pin.c: 8: LATA = 0x02;
 13416                           
 13417                           ;incstack = 0
 13418                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 13419  15DB  3002               	movlw	2
 13420  15DC  0022               	movlb	2	; select bank2
 13421  15DD  008C               	movwf	12	;volatile
 13422                           
 13423                           ;pin.c: 9: LATB = 0xD0;
 13424  15DE  30D0               	movlw	208
 13425  15DF  008D               	movwf	13	;volatile
 13426                           
 13427                           ;pin.c: 10: LATC = 0x00;
 13428  15E0  018E               	clrf	14	;volatile
 13429                           
 13430                           ;pin.c: 15: TRISA = 0x34;
 13431  15E1  3034               	movlw	52
 13432  15E2  0021               	movlb	1	; select bank1
 13433  15E3  008C               	movwf	12	;volatile
 13434                           
 13435                           ;pin.c: 16: TRISB = 0x00;
 13436  15E4  018D               	clrf	13	;volatile
 13437                           
 13438                           ;pin.c: 17: TRISC = 0x05;
 13439  15E5  3005               	movlw	5
 13440  15E6  008E               	movwf	14	;volatile
 13441                           
 13442                           ;pin.c: 22: ANSELC = 0x00;
 13443  15E7  0023               	movlb	3	; select bank3
 13444  15E8  018E               	clrf	14	;volatile
 13445                           
 13446                           ;pin.c: 23: ANSELB = 0x00;
 13447  15E9  018D               	clrf	13	;volatile
 13448                           
 13449                           ;pin.c: 24: ANSELA = 0x00;
 13450  15EA  018C               	clrf	12	;volatile
 13451                           
 13452                           ;pin.c: 29: WPUB = 0x00;
 13453  15EB  0024               	movlb	4	; select bank4
 13454  15EC  018D               	clrf	13	;volatile
 13455                           
 13456                           ;pin.c: 30: WPUA = 0x04;
 13457  15ED  3004               	movlw	4
 13458  15EE  008C               	movwf	12	;volatile
 13459                           
 13460                           ;pin.c: 31: WPUC = 0x01;
 13461  15EF  3001               	movlw	1
 13462  15F0  008E               	movwf	14	;volatile
 13463                           
 13464                           ;pin.c: 36: ODCONA = 0x00;
 13465  15F1  0025               	movlb	5	; select bank5
 13466  15F2  018C               	clrf	12	;volatile
 13467                           
 13468                           ;pin.c: 37: ODCONB = 0x00;
 13469  15F3  018D               	clrf	13	;volatile
 13470                           
 13471                           ;pin.c: 38: ODCONC = 0x00;
 13472  15F4  018E               	clrf	14	;volatile
 13473                           
 13474                           ;pin.c: 40: unsigned char state = GIE;
 13475  15F5  3000               	movlw	0
 13476  15F6  1B8B               	btfsc	11,7	;volatile
 13477  15F7  3001               	movlw	1
 13478  15F8  0020               	movlb	0	; select bank0
 13479  15F9  00A0               	movwf	PIN_MANAGER_Initialize@state
 13480                           
 13481                           ;pin.c: 41: GIE = 0;
 13482  15FA  138B               	bcf	11,7	;volatile
 13483                           
 13484                           ;pin.c: 42: PPSLOCK = 0x55;
 13485                           
 13486                           ;pin.c: 43: PPSLOCK = 0xAA;
 13487  15FB  2625  3195         	fcall	PL70	;call to abstracted procedure
 13488                           
 13489                           ;pin.c: 44: PPSLOCKbits.PPSLOCKED = 0x00;
 13490  15FD  100F               	bcf	15,0	;volatile
 13491                           
 13492                           ;pin.c: 46: RXPPSbits.RXPPS = 0x12;
 13493  15FE  0824               	movf	36,w	;volatile
 13494  15FF  39E0               	andlw	-32
 13495  1600  3812               	iorlw	18
 13496  1601  00A4               	movwf	36	;volatile
 13497                           
 13498                           ;pin.c: 47: RB4PPSbits.RB4PPS = 0x14;
 13499  1602  003D               	movlb	29	; select bank29
 13500  1603  081C               	movf	28,w	;volatile
 13501  1604  39E0               	andlw	-32
 13502  1605  3814               	iorlw	20
 13503  1606  009C               	movwf	28	;volatile
 13504                           
 13505                           ;pin.c: 48: RC5PPSbits.RC5PPS = 0x0C;
 13506  1607  0825               	movf	37,w	;volatile
 13507  1608  39E0               	andlw	-32
 13508  1609  380C               	iorlw	12
 13509  160A  00A5               	movwf	37	;volatile
 13510                           
 13511                           ;pin.c: 49: RC4PPSbits.RC4PPS = 0x0D;
 13512  160B  0824               	movf	36,w	;volatile
 13513  160C  39E0               	andlw	-32
 13514  160D  380D               	iorlw	13
 13515  160E  00A4               	movwf	36	;volatile
 13516                           
 13517                           ;pin.c: 50: RC3PPSbits.RC3PPS = 0x0E;
 13518  160F  0823               	movf	35,w	;volatile
 13519  1610  39E0               	andlw	-32
 13520  1611  380E               	iorlw	14
 13521  1612  00A3               	movwf	35	;volatile
 13522                           
 13523                           ;pin.c: 51: RC6PPSbits.RC6PPS = 0x0F;
 13524  1613  0826               	movf	38,w	;volatile
 13525  1614  39E0               	andlw	-32
 13526  1615  380F               	iorlw	15
 13527  1616  00A6               	movwf	38	;volatile
 13528                           
 13529                           ;pin.c: 52: RC7PPSbits.RC7PPS = 0x02;
 13530  1617  0827               	movf	39,w	;volatile
 13531  1618  39E0               	andlw	-32
 13532  1619  3802               	iorlw	2
 13533  161A  00A7               	movwf	39	;volatile
 13534                           
 13535                           ;pin.c: 54: PPSLOCK = 0x55;
 13536                           
 13537                           ;pin.c: 55: PPSLOCK = 0xAA;
 13538  161B  2625  3195         	fcall	PL70	;call to abstracted procedure
 13539                           
 13540                           ;pin.c: 56: PPSLOCKbits.PPSLOCKED = 0x01;
 13541  161D  140F               	bsf	15,0	;volatile
 13542                           
 13543                           ;pin.c: 58: GIE = state;
 13544  161E  0020               	movlb	0	; select bank0
 13545  161F  1C20               	btfss	PIN_MANAGER_Initialize@state,0
 13546  1620  2E23               	goto	u2790
 13547  1621  178B               	bsf	11,7	;volatile
 13548  1622  0008               	return
 13549  1623                     u2790:	
 13550  1623  138B               	bcf	11,7	;volatile
 13551  1624  0008               	return
 13552  1625                     __end_of_PIN_MANAGER_Initialize:	
 13553  1625                     PL70:	
 13554  1625  3055               	movlw	85
 13555  1626  003C               	movlb	28	; select bank28
 13556  1627  008F               	movwf	15	;volatile
 13557  1628  30AA               	movlw	170
 13558  1629  008F               	movwf	15	;volatile
 13559  162A  0008               	return
 13560  162B                     __end_ofPL70:	
 13561                           
 13562                           	psect	swtext1
 13563  0800                     __pswtext1:	
 13564  0800                     S4367:	
 13565  0800  318E  2E79         	ljmp	l4011
 13566  0802  318E  2EB6         	ljmp	l105
 13567  0804  318C  2C9A         	ljmp	l107
 13568  0806  318C  2CBE         	ljmp	l115
 13569  0808  318C  2CDA         	ljmp	l121
 13570  080A  318D  2D09         	ljmp	l3885
 13571  080C  318D  2D17         	ljmp	l3889
 13572  080E  318D  2D4B         	ljmp	l133
 13573  0810  318D  2D69         	ljmp	l138
 13574  0812  318D  2DB5         	ljmp	l142
 13575  0814  318E  2EB6         	ljmp	l105
 13576  0816  318D  2DF3         	ljmp	l146
 13577  0818  318E  2E2B         	ljmp	l3989
 13578  081A  318E  2EB6         	ljmp	l105
 13579  081C  318E  2E3C         	ljmp	l3995
 13580  081E  318E  2E67         	ljmp	l4005
 13581                           
 13582                           	psect	intentry
 13583  0404                     __pintentry:	
 13584 ;; *************** function _INTERRUPT_InterruptManager *****************
 13585 ;; Defined at:
 13586 ;;		line 99 in file "src/comman.c"
 13587 ;; Parameters:    Size  Location     Type
 13588 ;;		None
 13589 ;; Auto vars:     Size  Location     Type
 13590 ;;		None
 13591 ;; Return value:  Size  Location     Type
 13592 ;;                  1    wreg      void 
 13593 ;; Registers used:
 13594 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13595 ;; Tracked objects:
 13596 ;;		On entry : 0/0
 13597 ;;		On exit  : 18/0
 13598 ;;		Unchanged: 0/0
 13599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13604 ;;Total ram usage:        0 bytes
 13605 ;; Hardware stack levels used:    1
 13606 ;; Hardware stack levels required when called:    5
 13607 ;; This function calls:
 13608 ;;		_EUSART_RCV_ISR
 13609 ;;		_TMR2_UserInterruptHandler
 13610 ;;		_runRTC
 13611 ;; This function is called by:
 13612 ;;		Interrupt level 1
 13613 ;; This function uses a non-reentrant model
 13614 ;;
 13615                           
 13616  0404                     _INTERRUPT_InterruptManager:	
 13617                           
 13618                           ;incstack = 0
 13619  0404  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13620                           
 13621                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13622  0405  3184               	pagesel	$
 13623                           
 13624                           ;comman.c: 102: if( PIR1bits.RCIF == 1 )
 13625  0406  0020               	movlb	0	; select bank0
 13626  0407  1E91               	btfss	17,5	;volatile
 13627  0408  2C0D               	goto	i1l236
 13628                           
 13629                           ;comman.c: 103: {
 13630                           ;comman.c: 104: EUSART_RCV_ISR( );
 13631  0409  3195  25C4  3184   	fcall	_EUSART_RCV_ISR
 13632                           
 13633                           ;comman.c: 105: }
 13634  040C  2C19               	goto	i1l241
 13635  040D                     i1l236:	
 13636                           
 13637                           ;comman.c: 106: else if( PIR0bits.TMR0IF == 1 )
 13638  040D  1E90               	btfss	16,5	;volatile
 13639  040E  2C14               	goto	i1l238
 13640                           
 13641                           ;comman.c: 107: {
 13642                           ;comman.c: 108: PIR0bits.TMR0IF = 0;
 13643  040F  1290               	bcf	16,5	;volatile
 13644                           
 13645                           ;comman.c: 109: runRTC( );
 13646  0410  3196  2688  3184   	fcall	_runRTC
 13647                           
 13648                           ;comman.c: 110: }
 13649  0413  2C19               	goto	i1l241
 13650  0414                     i1l238:	
 13651                           
 13652                           ;comman.c: 111: else if( PIR1bits.TMR2IF == 1 )
 13653  0414  1C91               	btfss	17,1	;volatile
 13654  0415  2C19               	goto	i1l241
 13655                           
 13656                           ;comman.c: 112: {
 13657                           ;comman.c: 113: PIR1bits.TMR2IF = 0;
 13658  0416  1091               	bcf	17,1	;volatile
 13659                           
 13660                           ;comman.c: 114: TMR2_UserInterruptHandler( );
 13661  0417  3185  2571         	fcall	_TMR2_UserInterruptHandler
 13662  0419                     i1l241:	
 13663  0419  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13664  041A  0009               	retfie
 13665  041B                     __end_of_INTERRUPT_InterruptManager:	
 13666                           
 13667                           	psect	text62
 13668  1688                     __ptext62:	
 13669 ;; *************** function _runRTC *****************
 13670 ;; Defined at:
 13671 ;;		line 52 in file "src/rtc.c"
 13672 ;; Parameters:    Size  Location     Type
 13673 ;;		None
 13674 ;; Auto vars:     Size  Location     Type
 13675 ;;		None
 13676 ;; Return value:  Size  Location     Type
 13677 ;;                  1    wreg      void 
 13678 ;; Registers used:
 13679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13680 ;; Tracked objects:
 13681 ;;		On entry : 1F/0
 13682 ;;		On exit  : 1F/2
 13683 ;;		Unchanged: 0/0
 13684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13689 ;;Total ram usage:        0 bytes
 13690 ;; Hardware stack levels used:    1
 13691 ;; Hardware stack levels required when called:    2
 13692 ;; This function calls:
 13693 ;;		_checkIsYearLeap
 13694 ;; This function is called by:
 13695 ;;		_INTERRUPT_InterruptManager
 13696 ;; This function uses a non-reentrant model
 13697 ;;
 13698                           
 13699                           
 13700                           ;psect for function _runRTC
 13701  1688                     _runRTC:	
 13702                           
 13703                           ;rtc.c: 54: gCurrentTime.datetime.second++;
 13704                           
 13705                           ;incstack = 0
 13706                           ; Regs used in _runRTC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13707  1688  0021               	movlb	1	; select bank1
 13708  1689  0ADE               	incf	(_gCurrentTime^(0+128)+6),f	;volatile
 13709                           
 13710                           ;rtc.c: 55: if (gCurrentTime.datetime.second >= 60)
 13711  168A  303C               	movlw	60
 13712  168B  025E               	subwf	(_gCurrentTime^(0+128)+6),w	;volatile
 13713  168C  1C03               	skipc
 13714  168D  2ECD               	goto	i1l4139
 13715                           
 13716                           ;rtc.c: 56: {
 13717                           ;rtc.c: 57: gCurrentTime.datetime.second = 0;
 13718  168E  01DE               	clrf	(_gCurrentTime^(0+128)+6)	;volatile
 13719                           
 13720                           ;rtc.c: 58: gCurrentTime.datetime.minute++;
 13721  168F  0ADD               	incf	(_gCurrentTime^(0+128)+5),f	;volatile
 13722                           
 13723                           ;rtc.c: 59: if (gCurrentTime.datetime.minute >= 60)
 13724  1690  303C               	movlw	60
 13725  1691  025D               	subwf	(_gCurrentTime^(0+128)+5),w	;volatile
 13726  1692  1C03               	skipc
 13727  1693  2ECD               	goto	i1l4139
 13728                           
 13729                           ;rtc.c: 60: {
 13730                           ;rtc.c: 61: gCurrentTime.datetime.minute = 0;
 13731  1694  01DD               	clrf	(_gCurrentTime^(0+128)+5)	;volatile
 13732                           
 13733                           ;rtc.c: 62: gCurrentTime.datetime.hour++;
 13734  1695  0ADC               	incf	(_gCurrentTime^(0+128)+4),f	;volatile
 13735                           
 13736                           ;rtc.c: 63: if (gCurrentTime.datetime.hour >= 24)
 13737  1696  3018               	movlw	24
 13738  1697  025C               	subwf	(_gCurrentTime^(0+128)+4),w	;volatile
 13739  1698  1C03               	skipc
 13740  1699  2ECD               	goto	i1l4139
 13741                           
 13742                           ;rtc.c: 64: {
 13743                           ;rtc.c: 65: gCurrentTime.datetime.hour = 0;
 13744  169A  01DC               	clrf	(_gCurrentTime^(0+128)+4)	;volatile
 13745                           
 13746                           ;rtc.c: 66: gCurrentTime.datetime.day++;
 13747  169B  0ADA               	incf	(_gCurrentTime^(0+128)+2),f	;volatile
 13748                           
 13749                           ;rtc.c: 67: gCurrentTime.datetime.wk++;
 13750  169C  0ADB               	incf	(_gCurrentTime^(0+128)+3),f	;volatile
 13751                           
 13752                           ;rtc.c: 68: if (gCurrentTime.datetime.wk > 6)
 13753  169D  3007               	movlw	7
 13754  169E  025B               	subwf	(_gCurrentTime^(0+128)+3),w	;volatile
 13755  169F  1803               	btfsc	3,0
 13756                           
 13757                           ;rtc.c: 69: {
 13758                           ;rtc.c: 70: gCurrentTime.datetime.wk = 0;
 13759  16A0  01DB               	clrf	(_gCurrentTime^(0+128)+3)	;volatile
 13760                           
 13761                           ;rtc.c: 71: }
 13762                           ;rtc.c: 72: if (checkIsYearLeap(gCurrentTime.datetime.year+2000))
 13763  16A1  0858               	movf	_gCurrentTime^(0+128),w	;volatile
 13764  16A2  00F5               	movwf	checkIsYearLeap@year
 13765  16A3  30D0               	movlw	208
 13766  16A4  01F6               	clrf	checkIsYearLeap@year+1
 13767  16A5  07F5               	addwf	checkIsYearLeap@year,f
 13768  16A6  3007               	movlw	7
 13769  16A7  3DF6               	addwfc	checkIsYearLeap@year+1,f
 13770  16A8  26D0  3196         	fcall	_checkIsYearLeap
 13771  16AA  3A00               	xorlw	0
 13772  16AB  1903               	skipnz
 13773  16AC  2EAF               	goto	i1l4123
 13774                           
 13775                           ;rtc.c: 73: {
 13776                           ;rtc.c: 74: MONTH_DAY[1] = 29;
 13777  16AD  301D               	movlw	29
 13778  16AE  2EB0               	goto	L10
 13779  16AF                     i1l4123:	
 13780                           ;rtc.c: 75: }
 13781                           
 13782                           
 13783                           ;rtc.c: 76: else
 13784                           ;rtc.c: 77: {
 13785                           ;rtc.c: 78: MONTH_DAY[1] = 28;
 13786  16AF  301C               	movlw	28
 13787  16B0                     L10:	
 13788  16B0  0023               	movlb	3	; select bank3
 13789  16B1  00E2               	movwf	(_MONTH_DAY^(0+384)+1)
 13790                           
 13791                           ;rtc.c: 79: }
 13792                           ;rtc.c: 80: if (gCurrentTime.datetime.month <= 12 && gCurrentTime.datetime.month > 0)
 13793  16B2  300D               	movlw	13
 13794  16B3  0021               	movlb	1	; select bank1
 13795  16B4  0259               	subwf	(_gCurrentTime^(0+128)+1),w	;volatile
 13796  16B5  1803               	skipnc
 13797  16B6  2ECD               	goto	i1l4139
 13798  16B7  0859               	movf	(_gCurrentTime^(0+128)+1),w	;volatile
 13799  16B8  1903               	btfsc	3,2
 13800  16B9  2ECD               	goto	i1l4139
 13801                           
 13802                           ;rtc.c: 81: {
 13803                           ;rtc.c: 82: if (gCurrentTime.datetime.day > MONTH_DAY[gCurrentTime.datetime.month-1])
 13804  16BA  0859               	movf	(_gCurrentTime^(0+128)+1),w	;volatile
 13805  16BB  3EE0               	addlw	(low ((_MONTH_DAY| (0+256)+255)))& (0+255)
 13806  16BC  0086               	movwf	6
 13807  16BD  3001               	movlw	1	; select bank3/4
 13808  16BE  0087               	movwf	7
 13809  16BF  085A               	movf	(_gCurrentTime^(0+128)+2),w	;volatile
 13810  16C0  0201               	subwf	1,w
 13811  16C1  1803               	skipnc
 13812  16C2  2ECD               	goto	i1l4139
 13813                           
 13814                           ;rtc.c: 83: {
 13815                           ;rtc.c: 84: gCurrentTime.datetime.day = 1;
 13816  16C3  3001               	movlw	1
 13817  16C4  00DA               	movwf	(_gCurrentTime^(0+128)+2)	;volatile
 13818                           
 13819                           ;rtc.c: 85: gCurrentTime.datetime.month++;
 13820  16C5  0AD9               	incf	(_gCurrentTime^(0+128)+1),f	;volatile
 13821                           
 13822                           ;rtc.c: 86: if (gCurrentTime.datetime.month > 12)
 13823  16C6  300D               	movlw	13
 13824  16C7  0259               	subwf	(_gCurrentTime^(0+128)+1),w	;volatile
 13825  16C8  1C03               	skipc
 13826  16C9  2ECD               	goto	i1l4139
 13827                           
 13828                           ;rtc.c: 87: {
 13829                           ;rtc.c: 88: gCurrentTime.datetime.month = 1;
 13830  16CA  3001               	movlw	1
 13831  16CB  00D9               	movwf	(_gCurrentTime^(0+128)+1)	;volatile
 13832                           
 13833                           ;rtc.c: 89: gCurrentTime.datetime.year++;
 13834  16CC  0AD8               	incf	_gCurrentTime^(0+128),f	;volatile
 13835  16CD                     i1l4139:	
 13836                           
 13837                           ;rtc.c: 90: }
 13838                           ;rtc.c: 91: }
 13839                           ;rtc.c: 92: }
 13840                           ;rtc.c: 93: }
 13841                           ;rtc.c: 94: }
 13842                           ;rtc.c: 95: }
 13843                           ;rtc.c: 96: gLedRunPara.fSec = 1;
 13844  16CD  0022               	movlb	2	; select bank2
 13845  16CE  14D7               	bsf	_gLedRunPara^(0+256),1	;volatile
 13846  16CF  0008               	return
 13847  16D0                     __end_of_runRTC:	
 13848  16D0                     __ptext63:	
 13849 ;; *************** function _checkIsYearLeap *****************
 13850 ;; Defined at:
 13851 ;;		line 16 in file "src/rtc.c"
 13852 ;; Parameters:    Size  Location     Type
 13853 ;;  year            2    5[COMMON] unsigned int 
 13854 ;; Auto vars:     Size  Location     Type
 13855 ;;		None
 13856 ;; Return value:  Size  Location     Type
 13857 ;;                  1    wreg      unsigned char 
 13858 ;; Registers used:
 13859 ;;		wreg, status,2, status,0, pclath, cstack
 13860 ;; Tracked objects:
 13861 ;;		On entry : 1F/1
 13862 ;;		On exit  : 0/0
 13863 ;;		Unchanged: 0/0
 13864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13865 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13868 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;Total ram usage:        2 bytes
 13870 ;; Hardware stack levels used:    1
 13871 ;; Hardware stack levels required when called:    1
 13872 ;; This function calls:
 13873 ;;		___lwmod
 13874 ;; This function is called by:
 13875 ;;		_runRTC
 13876 ;; This function uses a non-reentrant model
 13877 ;;
 13878                           
 13879                           
 13880                           ;psect for function _checkIsYearLeap
 13881  16D0                     _checkIsYearLeap:	
 13882                           
 13883                           ;rtc.c: 18: if (year&0x03)
 13884                           
 13885                           ;incstack = 0
 13886                           ; Regs used in _checkIsYearLeap: [wreg+status,2+status,0+pclath+cstack]
 13887  16D0  0875               	movf	checkIsYearLeap@year,w
 13888  16D1  3903               	andlw	3
 13889  16D2  1903               	btfsc	3,2
 13890  16D3  3400               	retlw	0
 13891                           
 13892                           ;rtc.c: 19: {
 13893                           ;rtc.c: 20: if (year%100 == 0)
 13894  16D4  3064               	movlw	100
 13895  16D5  00F0               	movwf	___lwmod@divisor
 13896  16D6  01F1               	clrf	___lwmod@divisor+1
 13897  16D7  270C  3196         	fcall	PL96	;call to abstracted procedure
 13898  16D9  26EC  3196         	fcall	___lwmod
 13899  16DB  0870               	movf	?___lwmod,w
 13900  16DC  0471               	iorwf	?___lwmod+1,w
 13901  16DD  1D03               	btfss	3,2
 13902  16DE  3401               	retlw	1
 13903                           
 13904                           ;rtc.c: 21: {
 13905                           ;rtc.c: 22: if (year%400 == 0)
 13906  16DF  3090               	movlw	144
 13907  16E0  00F0               	movwf	___lwmod@divisor
 13908  16E1  3001               	movlw	1
 13909  16E2  00F1               	movwf	___lwmod@divisor+1
 13910  16E3  270C  3196         	fcall	PL96	;call to abstracted procedure
 13911  16E5  26EC  3196         	fcall	___lwmod
 13912  16E7  0870               	movf	?___lwmod,w
 13913  16E8  0471               	iorwf	?___lwmod+1,w
 13914  16E9  1903               	btfsc	3,2
 13915                           
 13916                           ;rtc.c: 23: {
 13917                           ;rtc.c: 24: return 1;
 13918  16EA  3401               	retlw	1
 13919                           
 13920                           ;rtc.c: 30: }
 13921                           ;rtc.c: 31: }
 13922                           ;rtc.c: 32: return 0;
 13923  16EB  3400               	retlw	0
 13924  16EC                     __end_of_checkIsYearLeap:	
 13925  16EC                     __ptext64:	
 13926 ;; *************** function ___lwmod *****************
 13927 ;; Defined at:
 13928 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\lwmod.c"
 13929 ;; Parameters:    Size  Location     Type
 13930 ;;  divisor         2    0[COMMON] unsigned int 
 13931 ;;  dividend        2    2[COMMON] unsigned int 
 13932 ;; Auto vars:     Size  Location     Type
 13933 ;;  counter         1    4[COMMON] unsigned char 
 13934 ;; Return value:  Size  Location     Type
 13935 ;;                  2    0[COMMON] unsigned int 
 13936 ;; Registers used:
 13937 ;;		wreg, status,2, status,0
 13938 ;; Tracked objects:
 13939 ;;		On entry : 0/1
 13940 ;;		On exit  : 0/0
 13941 ;;		Unchanged: 0/0
 13942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13943 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13944 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13946 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13947 ;;Total ram usage:        5 bytes
 13948 ;; Hardware stack levels used:    1
 13949 ;; This function calls:
 13950 ;;		Nothing
 13951 ;; This function is called by:
 13952 ;;		_checkIsYearLeap
 13953 ;; This function uses a non-reentrant model
 13954 ;;
 13955                           
 13956                           
 13957                           ;psect for function ___lwmod
 13958  16EC                     ___lwmod:	
 13959                           
 13960                           ;incstack = 0
 13961                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13962  16EC  0870               	movf	___lwmod@divisor,w
 13963  16ED  0471               	iorwf	___lwmod@divisor+1,w
 13964  16EE  1903               	btfsc	3,2
 13965  16EF  2F07               	goto	i1l3193
 13966  16F0  01F4               	clrf	___lwmod@counter
 13967  16F1                     L11:	
 13968  16F1  0AF4               	incf	___lwmod@counter,f
 13969  16F2  1BF1               	btfsc	___lwmod@divisor+1,7
 13970  16F3  2EF7               	goto	i1l3185
 13971  16F4  35F0               	lslf	___lwmod@divisor,f
 13972  16F5  0DF1               	rlf	___lwmod@divisor+1,f
 13973  16F6  2EF1               	goto	L11
 13974  16F7                     i1l3185:	
 13975  16F7  0871               	movf	___lwmod@divisor+1,w
 13976  16F8  0273               	subwf	___lwmod@dividend+1,w
 13977  16F9  1D03               	skipz
 13978  16FA  2EFD               	goto	u261_25
 13979  16FB  0870               	movf	___lwmod@divisor,w
 13980  16FC  0272               	subwf	___lwmod@dividend,w
 13981  16FD                     u261_25:	
 13982  16FD  1C03               	skipc
 13983  16FE  2F03               	goto	i1l3189
 13984  16FF  0870               	movf	___lwmod@divisor,w
 13985  1700  02F2               	subwf	___lwmod@dividend,f
 13986  1701  0871               	movf	___lwmod@divisor+1,w
 13987  1702  3BF3               	subwfb	___lwmod@dividend+1,f
 13988  1703                     i1l3189:	
 13989  1703  36F1               	lsrf	___lwmod@divisor+1,f
 13990  1704  0CF0               	rrf	___lwmod@divisor,f
 13991  1705  0BF4               	decfsz	___lwmod@counter,f
 13992  1706  2EF7               	goto	i1l3185
 13993  1707                     i1l3193:	
 13994  1707  0873               	movf	___lwmod@dividend+1,w
 13995  1708  00F1               	movwf	?___lwmod+1
 13996  1709  0872               	movf	___lwmod@dividend,w
 13997  170A  00F0               	movwf	?___lwmod
 13998  170B  0008               	return
 13999  170C                     __end_of___lwmod:	
 14000  170C                     PL96:	
 14001  170C  0876               	movf	checkIsYearLeap@year+1,w
 14002  170D  00F3               	movwf	___lwmod@dividend+1
 14003  170E  0875               	movf	checkIsYearLeap@year,w
 14004  170F  00F2               	movwf	___lwmod@dividend
 14005  1710  0008               	return
 14006  1711                     __end_ofPL96:	
 14007                           
 14008                           	psect	text84
 14009  15C4                     __ptext84:	
 14010 ;; *************** function _EUSART_RCV_ISR *****************
 14011 ;; Defined at:
 14012 ;;		line 35 in file "src/eusart.c"
 14013 ;; Parameters:    Size  Location     Type
 14014 ;;		None
 14015 ;; Auto vars:     Size  Location     Type
 14016 ;;		None
 14017 ;; Return value:  Size  Location     Type
 14018 ;;                  1    wreg      void 
 14019 ;; Registers used:
 14020 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14021 ;; Tracked objects:
 14022 ;;		On entry : 1F/0
 14023 ;;		On exit  : 1F/1
 14024 ;;		Unchanged: 0/0
 14025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14030 ;;Total ram usage:        0 bytes
 14031 ;; Hardware stack levels used:    1
 14032 ;; This function calls:
 14033 ;;		Nothing
 14034 ;; This function is called by:
 14035 ;;		_INTERRUPT_InterruptManager
 14036 ;; This function uses a non-reentrant model
 14037 ;;
 14038                           
 14039                           
 14040                           ;psect for function _EUSART_RCV_ISR
 14041  15C4                     _EUSART_RCV_ISR:	
 14042                           
 14043                           ;eusart.c: 37: if (RC1STAbits.FERR || RC1STAbits.OERR)
 14044                           
 14045                           ;incstack = 0
 14046                           ; Regs used in _EUSART_RCV_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 14047  15C4  0023               	movlb	3	; select bank3
 14048  15C5  191D               	btfsc	29,2	;volatile
 14049  15C6  2DC9               	goto	i1l703
 14050  15C7  1C9D               	btfss	29,1	;volatile
 14051  15C8  2DCB               	goto	i1l4085
 14052  15C9                     i1l703:	
 14053                           
 14054                           ;eusart.c: 38: {
 14055                           ;eusart.c: 39: RC1STAbits.SPEN = 0;
 14056  15C9  139D               	bcf	29,7	;volatile
 14057                           
 14058                           ;eusart.c: 40: RC1STAbits.SPEN = 1;
 14059  15CA  179D               	bsf	29,7	;volatile
 14060  15CB                     i1l4085:	
 14061                           
 14062                           ;eusart.c: 41: }
 14063                           ;eusart.c: 43: rxBuf[nRcvIdx++] = RCREG;
 14064  15CB  0021               	movlb	1	; select bank1
 14065  15CC  085F               	movf	_nRcvIdx^(0+128),w
 14066  15CD  3EA0               	addlw	(low (_rxBuf| (0+256)))& (0+255)
 14067  15CE  0086               	movwf	6
 14068  15CF  3001               	movlw	1	; select bank3/4
 14069  15D0  0087               	movwf	7
 14070  15D1  0023               	movlb	3	; select bank3
 14071  15D2  0819               	movf	25,w	;volatile
 14072  15D3  0081               	movwf	1
 14073  15D4  0021               	movlb	1	; select bank1
 14074  15D5  0ADF               	incf	_nRcvIdx^(0+128),f	;volatile
 14075                           
 14076                           ;eusart.c: 44: if (nRcvIdx >= sizeof(rxBuf))
 14077  15D6  3030               	movlw	48
 14078  15D7  025F               	subwf	_nRcvIdx^(0+128),w
 14079  15D8  1803               	btfsc	3,0
 14080                           
 14081                           ;eusart.c: 45: {
 14082                           ;eusart.c: 46: nRcvIdx = 0;
 14083  15D9  01DF               	clrf	_nRcvIdx^(0+128)	;volatile
 14084  15DA  0008               	return
 14085  15DB                     __end_of_EUSART_RCV_ISR:	
 14086  007E                     btemp	set	126	;btemp
 14087  007E                     int$flags	set	126
 14088  007E                     wtemp0	set	126


Data Sizes:
    Strings     79
    Constant    0
    Data        36
    BSS         191
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     80      80
    BANK1            80     56      75
    BANK2            80      0      80
    BANK3            80      0      77
    BANK4            80      0      48
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    readBuffer@buf	PTR unsigned char  size(1) Largest target is 55
		 -> readLedPara@para(BANK1[55]), 

    writeBuffer@buf	PTR unsigned char  size(1) Largest target is 55
		 -> writeLedPara@para(BANK0[55]), 

    bleSendData@frame	PTR const unsigned char  size(2) Largest target is 48
		 -> rxBuf(BANK3[48]), txBuf(BANK4[48]), 

    BLE_SendCMD@pBuf	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_4(CODE[15]), STR_3(CODE[11]), STR_2(CODE[34]), STR_1(CODE[19]), 

    getCRC@pbuf	PTR unsigned char  size(2) Largest target is 48
		 -> rxBuf(BANK3[48]), txBuf(BANK4[48]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _runRTC->_checkIsYearLeap
    _checkIsYearLeap->___lwmod
    _TMR2_UserInterruptHandler->_updateLed
    _keyScan->_ReadKey
    _keyAction->i1_updateDayBright
    _keyAction->i1_updateNightBright
    i1_updatePWM->i1_PWM5_LoadDutyValue

Critical Paths under _main in BANK0

    _main->_autoRun
    _saveLedPara->_writeLedPara
    _writeLedPara->_writeBuffer
    _writeBuffer->_writeByte
    _writeByte->_DATAEE_WriteByte
    _initLed->_initLedPara
    _initLedPara->_readLedPara
    _readLedPara->_readBuffer
    _readBuffer->_readByte
    _readByte->_DATAEE_ReadByte
    _initBLE->_checkDevID
    _checkDevID->_BLE_SendCMD
    _BLE_SendCMD->_eusartSendByte
    _findDeviceFlash->_initLedStatus
    _turnOffLed->_PWM5_LoadDutyValue
    _turnMaxLed->_PWM5_LoadDutyValue
    _initLedStatus->_updateDayBright
    _initLedStatus->_updateNightBright
    _autoRun->___lldiv
    ___wmul->___bmul
    ___lldiv->___lmul
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _DecodeDATA->_bleSendDeviceData
    _updatePWM->_PWM5_LoadDutyValue
    _bleSendDeviceData->_getCRC
    _bleSendData->_eusartSendByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _initLedPara->_readLedPara

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   33905
                                             79 BANK0      1     1      0
                         _DecodeDATA
                  _SYSTEM_Initialize
                    _TMR0_StartTimer
                    _TMR2_StartTimer
                            _autoRun
                    _findDeviceFlash
                            _initBLE
                            _initLed
                            _initRTC
                            _preview
                        _saveLedPara
 ---------------------------------------------------------------------------------
 (1) _saveLedPara                                          1     1      0     953
                                             67 BANK0      1     1      0
                       _writeLedPara
 ---------------------------------------------------------------------------------
 (2) _writeLedPara                                        56     1     55     953
                                             11 BANK0     56     1     55
                        _writeBuffer
 ---------------------------------------------------------------------------------
 (3) _writeBuffer                                          5     3      2     805
                                              6 BANK0      5     3      2
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            2     1      1     465
                                              4 BANK0      2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     4     1      3     318
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _preview                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRTC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLed                                              0     0      0    5672
                        _initLedPara
                      _initLedStatus
 ---------------------------------------------------------------------------------
 (2) _initLedPara                                          4     4      0    1313
                                             65 BANK0      4     4      0
                             ___bmul
                        _readLedPara
                _updateDayRiseStatus
              _updateNightRiseStatus
 ---------------------------------------------------------------------------------
 (3) _updateNightRiseStatus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _updateDayRiseStatus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readLedPara                                        112    57     55     623
                                              9 BANK0     56     1     55
                                              0 BANK1     56    56      0
                         _readBuffer
 ---------------------------------------------------------------------------------
 (4) _readBuffer                                           5     3      2     555
                                              4 BANK0      5     3      2
                           _readByte
 ---------------------------------------------------------------------------------
 (5) _readByte                                             2     2      0     215
                                              2 BANK0      2     2      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_ReadByte                                      2     0      2     170
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initBLE                                              2     2      0    1336
                                             37 BANK0      2     2      0
                        _BLE_SendCMD
                         _checkDevID
 ---------------------------------------------------------------------------------
 (2) _checkDevID                                          22    22      0     738
                                             15 BANK0     22    22      0
                        _BLE_SendCMD
 ---------------------------------------------------------------------------------
 (3) _BLE_SendCMD                                         14    12      2     598
                                              1 BANK0     14    12      2
                     _eusartSendByte
 ---------------------------------------------------------------------------------
 (1) _findDeviceFlash                                      0     0      0    8291
                      _initLedStatus
                         _turnMaxLed
                         _turnOffLed
 ---------------------------------------------------------------------------------
 (2) _turnOffLed                                           0     0      0    1966
                 _PWM1_LoadDutyValue
                 _PWM2_LoadDutyValue
                 _PWM3_LoadDutyValue
                 _PWM4_LoadDutyValue
                 _PWM5_LoadDutyValue
 ---------------------------------------------------------------------------------
 (2) _turnMaxLed                                           0     0      0    1966
                 _PWM1_LoadDutyValue
                 _PWM2_LoadDutyValue
                 _PWM3_LoadDutyValue
                 _PWM4_LoadDutyValue
                 _PWM5_LoadDutyValue
 ---------------------------------------------------------------------------------
 (2) _initLedStatus                                        1     1      0    4359
                                              5 BANK0      1     1      0
                     _indicateLedBle
                     _indicateLedDay
                   _indicateLedNight
                     _indicateLedOff
                     _turnOffLedRamp
                      _turnOnLedRamp
                    _updateDayBright
                  _updateNightBright
 ---------------------------------------------------------------------------------
 (3) _updateNightBright                                    1     1      0    2122
                                              4 BANK0      1     1      0
                          _updatePWM
 ---------------------------------------------------------------------------------
 (3) _updateDayBright                                      1     1      0    2056
                                              4 BANK0      1     1      0
                          _updatePWM
 ---------------------------------------------------------------------------------
 (3) _indicateLedOff                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _indicateLedNight                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _indicateLedDay                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _autoRun                                             54    54      0    9558
                                             25 BANK0     54    54      0
                             ___bmul
                            ___lldiv
                             ___lmul
                             ___wmul
                          _updatePWM
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3640
                                              3 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1122
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     574
                                             12 BANK0     13     5      8
                             ___lmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM3_Initialize
                    _PWM4_Initialize
                    _PWM5_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DecodeDATA                                          18    18      0    8072
                                             10 BANK0     18    18      0
                             ___bmul
                            ___lwdiv
                        _bleSendData
                  _bleSendDeviceData
                             _getCRC
                     _indicateLedBle
                     _turnOffLedRamp
                      _turnOnLedRamp
                          _updatePWM
 ---------------------------------------------------------------------------------
 (4) _updatePWM                                            0     0      0    1966
                 _PWM1_LoadDutyValue
                 _PWM2_LoadDutyValue
                 _PWM3_LoadDutyValue
                 _PWM4_LoadDutyValue
                 _PWM5_LoadDutyValue
 ---------------------------------------------------------------------------------
 (5) _PWM5_LoadDutyValue                                   4     2      2     354
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (5) _PWM4_LoadDutyValue                                   2     0      2     403
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _PWM3_LoadDutyValue                                   2     0      2     403
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _PWM2_LoadDutyValue                                   2     0      2     403
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _PWM1_LoadDutyValue                                   2     0      2     403
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _turnOnLedRamp                                        1     1      0      90
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _turnOffLedRamp                                       1     1      0      68
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _indicateLedBle                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _bleSendDeviceData                                    3     3      0    2288
                                              7 BANK0      3     3      0
                        _bleSendData
                             _getCRC
 ---------------------------------------------------------------------------------
 (2) _getCRC                                               7     4      3    1687
                                              0 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 (3) _bleSendData                                          4     1      3     353
                                              1 BANK0      4     1      3
                     _eusartSendByte
 ---------------------------------------------------------------------------------
 (4) _eusartSendByte                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     368
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     378
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           0     0      0    3686
                     _EUSART_RCV_ISR
          _TMR2_UserInterruptHandler
                             _runRTC
 ---------------------------------------------------------------------------------
 (8) _runRTC                                               0     0      0     762
                    _checkIsYearLeap
 ---------------------------------------------------------------------------------
 (9) _checkIsYearLeap                                      2     0      2     762
                                              5 COMMON     2     0      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (10) ___lwmod                                             5     1      4     571
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (8) _TMR2_UserInterruptHandler                            0     0      0    2924
                          _keyAction
                            _keyScan
                          _updateLed
 ---------------------------------------------------------------------------------
 (9) _updateLed                                            7     7      0     757
                                              4 COMMON     7     7      0
                        i1_updatePWM
 ---------------------------------------------------------------------------------
 (9) _keyScan                                              1     1      0     157
                                              1 COMMON     1     1      0
                            _ReadKey
 ---------------------------------------------------------------------------------
 (10) _ReadKey                                             1     1      0      68
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _keyAction                                            4     4      0    2010
                                              5 COMMON     4     4      0
                   i1_indicateLedBle
                   i1_indicateLedDay
                 i1_indicateLedNight
                   i1_indicateLedOff
                  i1_updateDayBright
              i1_updateDayRiseStatus
                i1_updateNightBright
            i1_updateNightRiseStatus
                        i1_updatePWM
 ---------------------------------------------------------------------------------
 (10) i1_updateNightRiseStatus                             0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_updateNightBright                                 1     1      0     691
                                              4 COMMON     1     1      0
                        i1_updatePWM
 ---------------------------------------------------------------------------------
 (10) i1_updateDayRiseStatus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_updateDayBright                                   1     1      0     625
                                              4 COMMON     1     1      0
                        i1_updatePWM
 ---------------------------------------------------------------------------------
 (10) i1_updatePWM                                         0     0      0     535
               i1_PWM1_LoadDutyValue
               i1_PWM2_LoadDutyValue
               i1_PWM3_LoadDutyValue
               i1_PWM4_LoadDutyValue
               i1_PWM5_LoadDutyValue
 ---------------------------------------------------------------------------------
 (11) i1_PWM5_LoadDutyValue                                4     2      2      71
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (11) i1_PWM4_LoadDutyValue                                2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (11) i1_PWM3_LoadDutyValue                                2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (11) i1_PWM2_LoadDutyValue                                2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (11) i1_PWM1_LoadDutyValue                                2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) i1_indicateLedOff                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_indicateLedNight                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_indicateLedDay                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_indicateLedBle                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_RCV_ISR                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DecodeDATA
     ___bmul
     ___lwdiv
     _bleSendData
       _eusartSendByte
     _bleSendDeviceData
       _bleSendData
         _eusartSendByte
       _getCRC
     _getCRC
     _indicateLedBle
     _turnOffLedRamp
     _turnOnLedRamp
     _updatePWM
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue
       _PWM5_LoadDutyValue
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _PWM3_Initialize
     _PWM4_Initialize
     _PWM5_Initialize
     _TMR0_Initialize
     _TMR2_Initialize
   _TMR0_StartTimer
   _TMR2_StartTimer
   _autoRun
     ___bmul
     ___lldiv
       ___lmul (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
     ___lmul
     ___wmul
       ___bmul (ARG)
     _updatePWM
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue
       _PWM5_LoadDutyValue
   _findDeviceFlash
     _initLedStatus
       _indicateLedBle
       _indicateLedDay
       _indicateLedNight
       _indicateLedOff
       _turnOffLedRamp
       _turnOnLedRamp
       _updateDayBright
         _updatePWM
           _PWM1_LoadDutyValue
           _PWM2_LoadDutyValue
           _PWM3_LoadDutyValue
           _PWM4_LoadDutyValue
           _PWM5_LoadDutyValue
       _updateNightBright
         _updatePWM
           _PWM1_LoadDutyValue
           _PWM2_LoadDutyValue
           _PWM3_LoadDutyValue
           _PWM4_LoadDutyValue
           _PWM5_LoadDutyValue
     _turnMaxLed
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue
       _PWM5_LoadDutyValue
     _turnOffLed
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue
       _PWM5_LoadDutyValue
   _initBLE
     _BLE_SendCMD
       _eusartSendByte
     _checkDevID
       _BLE_SendCMD
         _eusartSendByte
   _initLed
     _initLedPara
       ___bmul
       _readLedPara
         _readBuffer
           _readByte
             _DATAEE_ReadByte
       _updateDayRiseStatus
       _updateNightRiseStatus
     _initLedStatus
       _indicateLedBle
       _indicateLedDay
       _indicateLedNight
       _indicateLedOff
       _turnOffLedRamp
       _turnOnLedRamp
       _updateDayBright
         _updatePWM
           _PWM1_LoadDutyValue
           _PWM2_LoadDutyValue
           _PWM3_LoadDutyValue
           _PWM4_LoadDutyValue
           _PWM5_LoadDutyValue
       _updateNightBright
         _updatePWM
           _PWM1_LoadDutyValue
           _PWM2_LoadDutyValue
           _PWM3_LoadDutyValue
           _PWM4_LoadDutyValue
           _PWM5_LoadDutyValue
   _initRTC
   _preview
   _saveLedPara
     _writeLedPara
       _writeBuffer
         _writeByte
           _DATAEE_WriteByte

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_RCV_ISR
   _TMR2_UserInterruptHandler
     _keyAction
       i1_indicateLedBle
       i1_indicateLedDay
       i1_indicateLedNight
       i1_indicateLedOff
       i1_updateDayBright
         i1_updatePWM
           i1_PWM1_LoadDutyValue
           i1_PWM2_LoadDutyValue
           i1_PWM3_LoadDutyValue
           i1_PWM4_LoadDutyValue
           i1_PWM5_LoadDutyValue
       i1_updateDayRiseStatus
       i1_updateNightBright
         i1_updatePWM
           i1_PWM1_LoadDutyValue
           i1_PWM2_LoadDutyValue
           i1_PWM3_LoadDutyValue
           i1_PWM4_LoadDutyValue
           i1_PWM5_LoadDutyValue
       i1_updateNightRiseStatus
       i1_updatePWM
         i1_PWM1_LoadDutyValue
         i1_PWM2_LoadDutyValue
         i1_PWM3_LoadDutyValue
         i1_PWM4_LoadDutyValue
         i1_PWM5_LoadDutyValue
     _keyScan
       _ReadKey
     _updateLed
       i1_updatePWM
         i1_PWM1_LoadDutyValue
         i1_PWM2_LoadDutyValue
         i1_PWM3_LoadDutyValue
         i1_PWM4_LoadDutyValue
         i1_PWM5_LoadDutyValue
   _runRTC
     _checkIsYearLeap
       ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      B       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     38      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4D      11       96.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      30      13       60.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     176      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     176      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Sep 11 10:44:50 2017

                                  pc 0002                       ___bmul@product 0021  
                                 PL2 0B2C                                   PL4 07DB  
                                 PL6 0F8C                                   PL8 0F92  
                                 l59 1795                                   l85 0F2D  
               i1_PWM1_LoadDutyValue 0694                     _indicateLedNight 0493  
              i1_updateDayRiseStatus 06D2                  ___wmul@multiplicand 0025  
                __end_ofi1_updatePWM 0691               ??i1_PWM4_LoadDutyValue 0072  
      i1PWM5_LoadDutyValue@dutyValue 0070           __size_of_bleSendDeviceData 004E  
                                PL10 06E8              __end_of_updateDayBright 04AA  
                                PL20 0B67                                  PL12 0B48  
                                PL30 0FA3                                  PL22 0B6F  
                                PL14 0F9A                                  PL40 0559  
                                PL32 06FB                                  PL24 0B77  
                                PL16 0B4F                                  PL50 0716  
                                PL42 0561                                  PL34 0551  
                                PL26 0B7F                                  PL18 0B5B  
                                PL60 07F6                                  PL52 0B93  
                                PL44 0B8A                                  PL36 07ED  
                                PL28 06F0                                  PL70 1625  
                                PL62 0FAE                                  PL54 0B9C  
                                PL46 0569                                  PL38 0705  
                                PL80 0724                                  PL72 07A3  
                                PL64 0FB4                                  PL56 0BA4  
                                PL48 070E                                  PL90 073D  
                                PL82 0729                                  PL74 17FA  
                                PL66 0BFD                                  PL58 071E  
                                PL92 0742                                  PL84 072E  
                                PL76 0FC0                                  PL68 0FBA  
                                PL94 0747                                  PL86 0733  
                                PL78 0FC6                                  PL96 170C  
                                PL88 0738                                  PL98 0BAA  
                                l112 0CB8                                  l121 0CDA  
                                l105 0EB6                                  l115 0CBE  
                                l107 0C9A                                  l133 0D4B  
                                l125 0D08                                  l142 0DB5  
                                l160 0E90                                  l146 0DF3  
                                l138 0D69                                  l262 167E  
                                l511 0491                                  l519 042D  
                                l715 0F34                                  l627 0C4F  
                                l982 0A72                                  _GIE 005F  
                                _RA2 0062                                  _PR2 001E  
         __size_of_updateNightBright 001C                      _TMR2_Initialize 0FD5  
                    _PWM4_Initialize 0F78                                  wreg 0009  
                         _DecodeDATA 0C92                                 S4367 0800  
                               PL100 074C                                 PL102 0751  
                               PL104 0756                                 PL106 075A  
  __end_of_TMR2_UserInterruptHandler 058F                                 l3001 0AEF  
                               l3011 0EB9                                 l3013 0EC9  
                               l3121 0496                                 l3041 17A9  
                               l4011 0E79                                 l3035 179C  
                               l3043 17AA                                 l3051 17B9  
                               l3061 0F1C                                 l3053 0F11  
                               l4005 0E67                                 l3029 1780  
                               l3133 0B11                                 l3063 0EDB  
                               l3143 04AC                                 l3081 0ECD  
                               l3307 0BD4                                 l3075 0ECB  
                               l3147 04B9                                 l3155 0B21  
                               l3165 0A64                                 l3309 0BE3  
                               l3069 0EDD                                 l4029 0EAC  
                               l4221 09E8                                 l3149 04BF  
                               l3093 164E                                 l4047 1741  
                               l3159 0B2A                                 l3257 17E1  
                               l3283 0BAF                                 l3435 0FF0  
                               l4235 0A46                                 l4171 0951  
                               l3267 17EA                                 l3611 0874  
                               l4315 0C63                                 l3277 17D6  
                               l3621 088E                                 l4341 0C88  
                               l4333 0C7D                                 l4183 096E  
                               l3631 08A9                                 l3607 0859  
                               l4343 0C8B                                 l4327 0C73  
                               l3801 0EF9                                 l3297 0BC1  
                               l3705 0488                                 l3617 0875  
                               l3299 0BD0                                 l3813 0F0C  
                               l2933 0505                                 l2925 0515  
                               l2917 0525                                 l2941 0527  
                               l3901 0D29                                 l2935 0537  
                               l3831 0CB4                                 l3743 0A55  
                               l3591 0448                                 l3671 08DA  
                               l3809 0F08                                 l3921 0D5A  
                               l3681 08F1                                 l2947 0535  
                               l3739 0A4F                                 l3675 08E4  
                               l2883 1667                                 l3837 0CBC  
                               l3829 0CB1                                 l3757 0A7C  
                               l3693 047E                                 l3685 08FB  
                               l2991 04C6                                 l3847 0CD3  
                               l3783 0AC3                                 l3775 0AA6  
                               l3687 046A                                 l3873 0CE9  
                               l3697 0481                                 l3689 047A  
                               l3939 0DA2                                 l3787 0AC9  
                               l3699 0483                                 l3957 0DE8  
                               l3885 0D09                                 l3983 0E24  
                               l3879 0D03                                 l3969 0E05  
                               l3889 0D17                                 l3995 0E3C  
                               l3979 0E22                                 l3989 0E2B  
                               STR_1 1822                                 STR_2 1800  
                               STR_3 1844                                 STR_4 1835  
            __end_of_PWM1_Initialize 0F64                                 u3000 084E  
                               _LATA 010C                                 _LATB 010D  
                               u2215 0510                                 _LATC 010E  
                               u2235 0500                                 u2255 0530  
                               u4040 163C                                 u3305 0AB8  
                               u4105 09B0                                 u2370 1777  
                               u2195 0520                                 u4115 09BF  
                               u2700 17C9                                 u3520 0D0F  
                               u3345 0F01                                 u4065 0988  
                               u3530 0D10                                 u2490 0AE7  
                               u4075 0990                                 u4085 0998  
                               u4095 09A8                                 u4407 1765  
                               u4417 17EB                                 u4337 0C5C  
                               u3730 0E31                                 u4427 17AB  
                               u4347 0C6A                                 u3740 0E32  
                               u4437 0EA3                                 u4357 1718  
                               u2790 1623                                 u4447 0F17  
                               u4367 1725                                 u4377 1735  
                               u3770 0E6D                                 u4387 1745  
                               u3780 0E6E                                 u3685 0DD5  
                               u4397 1755                                 _TMR2 001D  
                               _TRMT 0CF1                                 _TXIF 008C  
                               _WPUA 020C                                 _WPUB 020D  
                               _WPUC 020E                           ReadKey@Trg 00E2  
                  ?i1_indicateLedBle 0070                    ?i1_indicateLedDay 0070  
                  ?i1_indicateLedOff 0070                                 _main 0C41  
                    _TMR0_StartTimer 0F83                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006              __size_of_indicateLedBle 0002  
            __size_of_indicateLedDay 0001                                 btemp 007E  
            __size_of_indicateLedOff 0001                                 start 041B  
                 ??i1_indicateLedBle 0070                   ??i1_indicateLedDay 0070  
                 ??i1_indicateLedOff 0070                      _PWM5_Initialize 0FCB  
                       ?_initLedPara 0070                    ___bmul@multiplier 0022  
         __end_of_PWM5_LoadDutyValue 0550                      _findDeviceFlash 041D  
                    __end_of_ReadKey 0796                         ?_readLedPara 0029  
              ?i1_PWM1_LoadDutyValue 0070            __size_of_DATAEE_WriteByte 0021  
            __end_of_PWM2_Initialize 0F6D              __end_of_TMR0_Initialize 15C4  
               __size_of_bleSendData 0022       __size_of_OSCILLATOR_Initialize 000A  
      __end_of_OSCILLATOR_Initialize 0F5A                          _writeBuffer 164C  
                              ?_main 0070        __size_ofi1_PWM3_LoadDutyValue 000D  
                    __end_of___lldiv 0AD2                                _T2CON 001F  
                              _LATC1 0871                                _LATB5 086D  
                   ??_eusartSendByte 0020                      __end_of___lwdiv 0F11  
                              i1l241 0419                                i1l236 040D  
                              i1l238 0414                      __end_of___lwmod 170C  
                              i1l371 05E8                                i1l380 0620  
                              i1l373 05FA                                i1l703 15C9  
                              i1l359 063F                                i1l378 060E  
                              _RCREG 0199                                _OSCEN 091D  
                 _PWM4_LoadDutyValue 0527                                _TMR0H 0016  
                              _TMR0L 0015                                _PORTC 000E  
                              _TRISA 008C                                _TRISB 008D  
                              _TRISC 008E                                _TXREG 019A  
               i1_PWM5_LoadDutyValue 06BB                  ___lmul@multiplicand 0024  
                        ReadKey@Cont 00E1               __size_of_initLedStatus 0028  
                    __end_of_initBLE 176D                      _DATAEE_ReadByte 0B13  
                    __end_of_autoRun 0A4D                      __end_of_keyScan 0788  
                    __end_of_initRTC 0FE9                      __end_of_initLed 0F8C  
                              _rxBuf 01A0                  ?_PWM4_LoadDutyValue 0020  
                              _txBuf 0220         __end_ofi1_PWM2_LoadDutyValue 06AE  
            __end_of_PWM3_Initialize 0F78                     ?_checkIsYearLeap 0075  
                        autoRun@dbrt 005E                      __end_of_preview 0FF0  
              __size_of_writeLedPara 0007                                status 0003  
                              wtemp0 007E                      _TMR2_StartTimer 0F86  
                       __end_ofPL100 0751                         __end_ofPL102 0756  
                       __end_ofPL104 075A                         __end_ofPL106 075F  
                        i1_updatePWM 066E                      __initialization 0C03  
     __size_of_updateNightRiseStatus 000B        __end_of_updateNightRiseStatus 0B2C  
                       __end_of_main 0C92                 __size_of_BLE_SendCMD 0051  
               ??_PWM4_LoadDutyValue 0022               ?i1_updateDayRiseStatus 0070  
   __size_ofi1_updateNightRiseStatus 000B                       BLE_SendCMD@ack 0024  
                     BLE_SendCMD@cnt 002B                       BLE_SendCMD@rev 002D  
            __end_of_PWM4_Initialize 0F83              __end_of_TMR2_Initialize 0FDF  
        ?_INTERRUPT_InterruptManager 0070                         ?_saveLedPara 0070  
                       keyAction@sta 0077                               ??_main 006F  
                      checkDevID@dev 0030                        checkDevID@cnt 0041  
                   ?_updateDayBright 0070                        checkDevID@rev 0043  
                     _EUSART_RCV_ISR 15C4                ?i1_PWM5_LoadDutyValue 0070  
                       _writeLedPara 1645                          ?_DecodeDATA 0070  
            __end_of_TMR0_StartTimer 0F86                               _CCPR1H 0292  
                             _CCPR2H 0296                               _CCPR3H 0312  
                             _CCPR1L 0291                               _CCPR4H 0316  
                             _CCPR2L 0295                               _CCPR3L 0311  
                             _CCPR4L 0315                               _ANSELA 018C  
                             _ANSELB 018D                               _ANSELC 018E  
                             _T0CON0 0017                               _T0CON1 0018  
                             _RC1STA 019D                     ?_PWM1_Initialize 0070  
                             _ODCONA 028C                               _ODCONB 028D  
                             i1l3203 0642                               _ODCONC 028E  
                             i1l3215 06DC                               i1l3231 0667  
                             i1l3225 0656                               i1l3241 06E7  
                             i1l4123 16AF                               i1l3229 0661  
                             i1l3501 05B4                               i1l3503 05B7  
                             i1l3511 05C9                               i1l4071 0583  
                             i1l3185 16F7                               i1l3193 1707  
                             i1l3523 05D6                               i1l4139 16CD  
            __end_of_PWM5_Initialize 0FD5                               i1l4085 15CB  
                             i1l3541 05FD                               i1l3509 05BB  
                             i1l3189 1703                               i1l3527 05DD  
                             i1l3463 077E                               i1l3455 0784  
                             i1l3553 0623                               i1l3481 0599  
                             i1l3457 0774                               i1l3547 060B  
                             i1l3563 0634                               i1l3491 05A9  
                             i1l3475 0598                               i1l3469 0785  
                             i1l3581 07CA                               i1l3573 07A9  
                             i1l3559 0631                               i1l3495 05AD  
                             i1l3583 07D4                               i1l3567 07A8  
                             i1l3497 05B0                               i1l3577 07B9  
                             i1l2955 06A0                               i1l2963 06AD  
                             i1l2971 06BA                               i1l2979 07A2  
                             u231_25 06B6                               u233_25 079E  
                             u227_25 069C                               u229_25 06A9  
                             u261_25 16FD                               _OSCFRQ 091F  
                        readBuffer@i 0028                               _NVMADR 0891  
                             _TX1STA 019E              __end_of_findDeviceFlash 0430  
                          ??_ReadKey 0070               __size_of_turnOnLedRamp 0011  
                 i1_indicateLedNight 0692                        _initLedStatus 046A  
                i1_updateNightBright 0655                               ___bmul 0A62  
             ??i1_PWM1_LoadDutyValue 0072                               ___lmul 0A6E  
        __size_of_PWM3_LoadDutyValue 0010                               ___wmul 0A4D  
                             _getCRC 0EB7                            ??___lldiv 0034  
                          ??___lwdiv 0024                            ??___lwmod 0074  
                ?i1_indicateLedNight 0070                     __end_of_readByte 0B08  
                   ?_TMR0_Initialize 0070                     ?_PWM2_Initialize 0070  
             __end_of_EUSART_RCV_ISR 15DB                               _runRTC 1688  
            __end_of_DATAEE_ReadByte 0B21                            ??_initBLE 0045  
                          ??_autoRun 0039                            ??_keyScan 0071  
                          ??_initRTC 0020                            ??_initLed 0065  
               ?i1_updateNightBright 0070                            ??_preview 0020  
                     bleSendData@len 0023          ??_TMR2_UserInterruptHandler 007B  
            __end_of_TMR2_StartTimer 0F88                 ??i1_indicateLedNight 0070  
           __end_of_indicateLedNight 0494                     ?_PWM3_Initialize 0070  
                  _SYSTEM_Initialize 0F3C              __end_of__initialization 0C3E  
                     _indicateLedBle 0F3A                       _indicateLedDay 0492  
                     _indicateLedOff 0550                   ?_SYSTEM_Initialize 0070  
         __end_of_PWM2_LoadDutyValue 0517          PWM1_LoadDutyValue@dutyValue 0020  
                ___bmul@multiplicand 0020                       ?_initLedStatus 0070  
                     __pcstackCOMMON 0070                         __pidataBANK1 15B2  
                       __pidataBANK3 0824                  ??_SYSTEM_Initialize 0021  
                __size_of_DecodeDATA 0225                 __size_of_initLedPara 00BB  
                   _DATAEE_WriteByte 1667                   _PWM1_LoadDutyValue 04F7  
                   ?_TMR2_Initialize 0070                     ?_PWM4_Initialize 0070  
                         __end_ofPL2 0B48                           __end_ofPL4 07ED  
                         __end_ofPL6 0F92                           __end_ofPL8 0F9A  
               __size_of_readLedPara 001A                 i1_PWM2_LoadDutyValue 06A1  
                    ?_EUSART_RCV_ISR 0070          PWM4_LoadDutyValue@dutyValue 0020  
             ??i1_PWM5_LoadDutyValue 0072                      BLE_SendCMD@pBuf 0021  
                      _turnOnLedRamp 0EDB                  ?_PWM1_LoadDutyValue 0020  
              ??i1_updateNightBright 0074                           _checkDevID 17BE  
                   ?_TMR0_StartTimer 0070            __end_of_SYSTEM_Initialize 0F50  
                 __size_of_keyAction 00B2               __end_of_indicateLedBle 0F3C  
             __end_of_indicateLedDay 0493               __end_of_indicateLedOff 0551  
                         __pbssBANK1 00D8                           __pbssBANK2 0120  
                         __pbssBANK3 01A0                           __pbssBANK4 0220  
       __size_of_updateDayRiseStatus 000B                     ?_PWM5_Initialize 0070  
                   ?_findDeviceFlash 0070                 ??_PWM1_LoadDutyValue 0022  
                       initLedPara@i 0064                         initLedPara@j 0063  
                         __pmaintext 0C41        i1PWM3_LoadDutyValue@dutyValue 0070  
          _TMR2_UserInterruptHandler 0571              i1_updateNightRiseStatus 06DD  
                            ?___bmul 0020                              ?___lmul 0020  
                            ?___wmul 0023                              ?_getCRC 0020  
                         __pintentry 0404                              _CCP1CON 0293  
                            _CCP2CON 0297                              _CCP3CON 0313  
                            _CCP4CON 0317                ?i1_PWM2_LoadDutyValue 0070  
                     ___lmul@product 0028            __size_ofi1_indicateLedBle 0001  
          __size_ofi1_indicateLedDay 0001            __size_ofi1_indicateLedOff 0001  
                            ?_runRTC 0070                         ?_writeBuffer 0026  
                   ?_DATAEE_ReadByte 0020                       ?_turnOnLedRamp 0070  
               __size_of_saveLedPara 001A        __size_ofi1_PWM4_LoadDutyValue 000D  
                 _PWM5_LoadDutyValue 0537                              _SP1BRGH 019C  
                            _SP1BRGL 019B                              _OSCCON1 0919  
                            _OSCCON3 091B                   __size_of_updatePWM 0031  
                 __size_of_updateLed 0033                              _NVMADRH 0892  
                            _NVMADRL 0891                              _OSCTUNE 091E  
                            _NVMDATL 0893                              _NVMCON1 0895  
                            _NVMCON2 0896                              _PWM5DCH 0618  
                            _PWM5DCL 0617                              _PWM5CON 0619  
                            _PPSLOCK 0E0F                     ?_TMR2_StartTimer 0070  
                    ?_indicateLedBle 0070                      ?_indicateLedDay 0070  
                    ?_indicateLedOff 0070                  ?_PWM5_LoadDutyValue 0020  
                   initLedStatus@sta 0025                         readByte@addr 0022  
       __end_ofi1_PWM3_LoadDutyValue 06BB                 DATAEE_WriteByte@bAdd 0020  
                          ?_readByte 0070              __size_of_turnOffLedRamp 0010  
                    DecodeDATA@i_301 0036                      DecodeDATA@i_305 0038  
                    DecodeDATA@i_299 0037                      ??_initLedStatus 0025  
                 __size_of_writeByte 0008                              _ReadKey 0788  
            ??i1_updateDayRiseStatus 0070                         ?i1_updatePWM 0070  
                         getCRC@pbuf 0020                        ??_bleSendData 0024  
                         _readBuffer 0AEC                      __size_of___bmul 000C  
                 eusartSendByte@byte 0020                      __size_of___lmul 0025  
                            ___lldiv 0A93                      __size_of___wmul 0015  
                  __end_of_keyAction 0641                      __size_of_getCRC 0014  
                            ___lwdiv 0EEC                              ___lwmod 16EC  
               ??_PWM5_LoadDutyValue 0022                      turnOffLedRamp@i 0020  
                            _nRcvIdx 00DF                              __ptext1 162B  
                            __ptext2 1645                              __ptext3 164C  
                            __ptext4 165F                              __ptext5 1667  
                            __ptext6 0FE9                              __ptext7 0FDF  
                            __ptext8 0F88                              __ptext9 0841  
                    __size_of_runRTC 0048                              _initBLE 1711  
                            _autoRun 08FC                              _keyScan 075F  
                            _initRTC 0FDF                              getCRC@i 0026  
                            _initLed 0F88                _OSCILLATOR_Initialize 0F50  
                          _T2CONbits 001F             ??_PIN_MANAGER_Initialize 0020  
                       ??_DecodeDATA 002A                              _preview 0FE9  
                        ?_checkDevID 0070           __size_of_SYSTEM_Initialize 0014  
                            clrloop0 15A7                 end_of_initialization 0C3E  
                        _gLedRunPara 0157                           ??_readByte 0022  
                            init_ram 15AC                              initloop 15AD  
                  _EUSART_Initialize 0FF0            ??i1_updateNightRiseStatus 0070  
                      ??_BLE_SendCMD 0023                      ___lldiv@divisor 002C  
                    ___lldiv@counter 0038                            _MONTH_DAY 01E1  
                 ?_EUSART_Initialize 0070             __size_of_checkIsYearLeap 001C  
                  __end_of_updatePWM 04F7                    __end_of_updateLed 07DB  
                     readBuffer@addr 0027                         writeBuffer@i 002A  
             ??i1_PWM2_LoadDutyValue 0072          __size_of_PWM4_LoadDutyValue 0010  
                       __pstringtext 1800                   __end_of_DecodeDATA 0EB7  
              _updateNightRiseStatus 0B21                      ??_turnOnLedRamp 0020  
                ??_EUSART_Initialize 0020                  __end_of_bleSendData 0F33  
                      keyScan@keyNum 0071                    __end_of_writeByte 1667  
                  i1_updateDayBright 0641                   ?i1_updateDayBright 0070  
           __size_of_updateDayBright 0016             __end_of_DATAEE_WriteByte 1688  
                          _RXPPSbits 0E24              __size_of_eusartSendByte 0007  
                  ?_indicateLedNight 0070            __end_of_EUSART_Initialize 1000  
                ??i1_updateDayBright 0074                          _CCP1CONbits 0293  
                        _CCP2CONbits 0297                   ??_indicateLedNight 0020  
                        _CCP3CONbits 0313                          _CCP4CONbits 0317  
         __end_of_PWM3_LoadDutyValue 0527             __size_of_PWM1_Initialize 000A  
                   ??_EUSART_RCV_ISR 0070                           _turnOffLed 0430  
                         _turnMaxLed 0448                           keyAction@i 0078  
                        ?_readBuffer 0024                       readByte@result 0023  
                __size_of_checkDevID 003C                       __end_of___bmul 0A6E  
                     __end_of___lmul 0A93        __size_ofi1_PWM1_LoadDutyValue 000D  
                __end_of_BLE_SendCMD 17BE                     writeLedPara@addr 0062  
                     __end_of___wmul 0A62                       __end_of_getCRC 0ECB  
                   i1_indicateLedBle 0691                     writeLedPara@para 002B  
                   i1_indicateLedDay 0654                  _updateDayRiseStatus 0B08  
                   i1_indicateLedOff 0693                   _PWM2_LoadDutyValue 0507  
          __end_ofi1_updateDayBright 0654               ?_OSCILLATOR_Initialize 0070  
               i1_PWM3_LoadDutyValue 06AE                     BLE_SendCMD@F7924 00E4  
                     __end_of_runRTC 16D0                           autoRun@sec 0065  
                         autoRun@val 0042                 __size_of_writeBuffer 0013  
                        __end_ofPL10 06F0                          __end_ofPL20 0B6F  
                        __end_ofPL12 0B4F                          __end_ofPL30 0FAE  
                        __end_ofPL22 0B77                          __end_ofPL14 0FA3  
                        __end_ofPL40 0561                          __end_ofPL32 0705  
                        __end_ofPL24 0B7F                          __end_ofPL16 0B5B  
                        __end_ofPL50 071E                          __end_ofPL42 0569  
                        __end_ofPL34 0559                          __end_ofPL26 0B8A  
                        __end_ofPL18 0B67                          __end_ofPL60 07FC  
                        __end_ofPL52 0B9C                          __end_ofPL44 0B93  
                        __end_ofPL36 07F6                          __end_ofPL28 06FB  
                        __end_ofPL70 162B                          __end_ofPL62 0FB4  
                        __end_ofPL54 0BA4                          __end_ofPL46 0571  
                        __end_ofPL38 070E                          __end_ofPL80 0729  
                        __end_ofPL72 07A8                          __end_ofPL64 0FBA  
                        __end_ofPL56 0BAA                          __end_ofPL48 0716  
                        __end_ofPL90 0742                          __end_ofPL82 072E  
                        __end_ofPL74 1800                          __end_ofPL66 0C03  
                        __end_ofPL58 0724                          __end_ofPL92 0747  
                        __end_ofPL84 0733                          __end_ofPL76 0FC6  
                        __end_ofPL68 0FC0                          __end_ofPL94 074C  
                        __end_ofPL86 0738                          __end_ofPL78 0FCB  
                        __end_ofPL96 1711                          __end_ofPL88 073D  
                        __end_ofPL98 0BAF                  start_initialization 0C03  
           __size_of_PWM2_Initialize 0009             __size_of_TMR0_Initialize 000B  
                ?_PWM2_LoadDutyValue 0020      __size_of_PIN_MANAGER_Initialize 004A  
                  DecodeDATA@idx_302 0039                    DecodeDATA@idx_303 003A  
                  DecodeDATA@len_300 0030                    DecodeDATA@len_304 0031  
                  DecodeDATA@val_306 0032          __size_ofi1_indicateLedNight 0001  
                   BLE_SendCMD@index 002E                 ?_updateDayRiseStatus 0070  
                     _turnOffLedRamp 0ECB                  DATAEE_ReadByte@bAdd 0020  
                      ??_initLedPara 0061                      checkDevID@F7931 01D0  
                       getCRC@result 0025                 ??_PWM2_LoadDutyValue 0022  
           __size_of_PWM3_Initialize 000B                             ??___bmul 0021  
        PWM2_LoadDutyValue@dutyValue 0020                      ReadKey@ReadData 0070  
                      ??_readLedPara 0060                             ??___lmul 0028  
             ?_updateNightRiseStatus 0070                             ??___wmul 0027  
                        _bleSendData 0F11                             ??_getCRC 0023  
                        _CCPTMRSbits 029F                 __size_ofi1_updatePWM 0023  
                        __pdataBANK1 00E4                          __pdataBANK3 01D0  
        __end_ofi1_updateNightBright 066E                             ??_runRTC 0077  
              ?i1_PWM3_LoadDutyValue 0070                      checkDevID@index 0044  
                  ??_checkIsYearLeap 0077          PWM5_LoadDutyValue@dutyValue 0020  
      __size_ofi1_PWM5_LoadDutyValue 0017                          __pbssCOMMON 007B  
                   ??_indicateLedBle 0020                     ??_indicateLedDay 0020  
                          ___latbits 0002                     ??_indicateLedOff 0020  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
           __size_of_PWM4_Initialize 000B             __size_of_TMR2_Initialize 000A  
             __end_of_turnOffLedRamp 0EDB                  __size_of_readBuffer 0013  
              ??_updateDayRiseStatus 0020           __size_of_EUSART_Initialize 0010  
      i1PWM1_LoadDutyValue@dutyValue 0070         __end_ofi1_PWM4_LoadDutyValue 07A3  
                  ??_updateDayBright 0024                             ?_ReadKey 0070  
           __size_of_TMR0_StartTimer 0003                    __size_of_readByte 0009  
                        _BLE_SendCMD 176D          __size_of_PWM1_LoadDutyValue 0010  
                   ___lwdiv@dividend 0022               _PIN_MANAGER_Initialize 15DB  
           __size_of_PWM5_Initialize 000A       __size_ofi1_updateDayRiseStatus 000B  
                        ?_turnOffLed 0070                          ?_turnMaxLed 0070  
      __end_ofi1_updateDayRiseStatus 06DD                             ?___lldiv 002C  
      i1PWM4_LoadDutyValue@dutyValue 0070             __size_of_findDeviceFlash 0013  
                           ?___lwdiv 0020                             ?___lwmod 0070  
                      ??_saveLedPara 0063                  __end_of_initLedPara 08FC  
                  ??_PWM1_Initialize 0020         ??_INTERRUPT_InterruptManager 007B  
         __size_ofi1_updateDayBright 0013                            __pswtext1 0800  
                          _keyAction 058F                  __end_of_readLedPara 0AEC  
                           ?_initBLE 0070                             _BAUD1CON 019F  
                           ?_autoRun 0070                             ?_keyScan 0070  
                           ?_initRTC 0070                             ?_initLed 0070  
                          getCRC@len 0022                        ?_writeLedPara 002B  
                           ?_preview 0070                         ??_checkDevID 002F  
                   ___lwdiv@quotient 0024             __size_of_DATAEE_ReadByte 000E  
                    ?_turnOffLedRamp 0070                       turnOnLedRamp@i 0020  
                     _eusartSendByte 0F33                          DecodeDATA@i 003B  
               i1updateNightBright@i 0074                    ??_TMR0_Initialize 0020  
                  ??_PWM2_Initialize 0020                       ___wmul@product 0027  
                           _LATAbits 010C                             _LATBbits 010D  
                          clear_ram0 15A6                             _PIE0bits 0090  
                           _PIE1bits 0091             __size_of_TMR2_StartTimer 0002  
              __end_of_initLedStatus 0492  __size_of_INTERRUPT_InterruptManager 0017  
                           _PIR0bits 0010                             _PIR1bits 0011  
                      readBuffer@buf 0024                        readBuffer@len 0025  
             ??i1_PWM3_LoadDutyValue 0072          __size_of_PWM5_LoadDutyValue 0019  
                 __end_of_checkDevID 17FA                            _updatePWM 04C6  
                          _updateLed 07A8                    ??_PWM3_Initialize 0020  
                  ___wmul@multiplier 0023                           ?_keyAction 0070  
                     ??_writeLedPara 0062                  __end_of_saveLedPara 1645  
                 findDeviceFlash@tog 00E0                DATAEE_WriteByte@bData 0022  
                   updateDayBright@i 0024               __end_of_eusartSendByte 0F3A  
                          _writeByte 165F                  __size_of_turnMaxLed 0022  
                __size_of_turnOffLed 0018                    ___lmul@multiplier 0020  
                         updateLed@i 007A                            autoRun@ct 0069  
                          autoRun@dt 0061                            autoRun@et 0067  
                          autoRun@st 006B                            autoRun@tr 0056  
                  ?_DATAEE_WriteByte 0020             __end_ofi1_indicateLedBle 0692  
           __end_ofi1_indicateLedDay 0655             __end_ofi1_indicateLedOff 0694  
                  ??_TMR2_Initialize 0020                    ??_PWM4_Initialize 0020  
                 ??_DATAEE_WriteByte 0023                 bleSendDeviceData@len 0028  
                    writeBuffer@addr 0029                     __size_of_ReadKey 000E  
                        _initLedPara 0841           __end_of_PWM4_LoadDutyValue 0537  
                       ??_readBuffer 0026                             _gLedPara 0120  
                        _readLedPara 0AD2              ??_OSCILLATOR_Initialize 0020  
                  ??_TMR0_StartTimer 0020            __size_of_indicateLedNight 0001  
                   __size_of___lldiv 003F                     __size_of___lwdiv 0025  
                         ?_updatePWM 0070                     __size_of___lwmod 0020  
                         ?_updateLed 0070        __size_ofi1_PWM2_LoadDutyValue 000D  
                  ??_PWM5_Initialize 0020                   _PWM3_LoadDutyValue 0517  
              __end_of_turnOnLedRamp 0EEC                 i1_PWM4_LoadDutyValue 0796  
       TMR2_UserInterruptHandler@cnt 00E3                    ??_findDeviceFlash 0026  
                  _bleSendDeviceData 0BAF                     __size_of_initBLE 005C  
                   __size_of_autoRun 0151                     __size_of_keyScan 0029  
                         _T0CON0bits 0017                     __size_of_initRTC 000A  
                   __size_of_initLed 0004                      ___lwdiv@divisor 0020  
                 ?_bleSendDeviceData 0070                    _updateNightBright 04AA  
                    ___lwdiv@counter 0026                             __ptext10 0B21  
                           __ptext11 0B08                             __ptext20 0430  
                           __ptext12 0AD2                             __ptext21 0448  
                           __ptext13 0AEC                             __ptext30 0A6E  
                           __ptext22 046A                             __ptext14 0AFF  
                           __ptext31 0A93                             __ptext23 04AA  
                           __ptext15 0B13                             __ptext40 0F64  
                           __ptext32 0F86                             __ptext24 0494  
                           __ptext16 1711                             __ptext41 0F5A  
                           __ptext33 0F83                             __ptext25 0550  
                           __ptext17 17BE                             __ptext50 0507  
                           __ptext42 15DB                             __ptext34 0F3C  
                           __ptext26 0493                             __ptext18 176D  
                           __ptext51 04F7                             __ptext43 0F50  
                           __ptext35 0FD5                             __ptext27 0492  
                           __ptext19 041D                             __ptext60 0A62  
                           __ptext52 0EDB                             __ptext44 0FF0  
                           __ptext36 15B9                             __ptext28 08FC  
                           __ptext53 0ECB                             __ptext45 0C92  
                           __ptext37 0FCB                             __ptext29 0A4D  
                           __ptext70 06DD                             __ptext62 1688  
                           __ptext54 0F3A                             __ptext46 04C6  
                           __ptext38 0F78                             __ptext71 0655  
                           __ptext63 16D0                             __ptext55 0BAF  
                           __ptext47 0537                             __ptext39 0F6D  
                           __ptext80 0693                             __ptext72 06D2  
                           __ptext64 16EC                             __ptext56 0EB7  
                           __ptext48 0527                             __ptext81 0692  
                           __ptext73 0641                             __ptext65 0571  
                           __ptext57 0F11                             __ptext49 0517  
                           __ptext82 0654                             __ptext74 066E  
                           __ptext66 07A8                             __ptext58 0F33  
                ?_PWM3_LoadDutyValue 0020                             __ptext83 0691  
                           __ptext75 06BB                             __ptext67 075F  
                           __ptext59 0EEC                             __ptext84 15C4  
                           __ptext76 0796                             __ptext68 0788  
                           __ptext77 06AE                             __ptext69 058F  
                           __ptext78 06A1                             __ptext79 0694  
                    ?_eusartSendByte 0070                           ?_writeByte 0024  
                   __size_of_preview 0007         __end_ofi1_PWM1_LoadDutyValue 06A1  
                 ?_updateNightBright 0070                   __end_of_readBuffer 0AFF  
        DATAEE_WriteByte@GIEBitValue 0023             ?i1_updateNightRiseStatus 0070  
                      DecodeDATA@idx 002F                        DecodeDATA@val 0034  
                           _keyValue 007C                  ??_bleSendDeviceData 0027  
                           _readByte 0AFF                        __size_of_main 0051  
                ??_updateNightBright 0024                    ??_DATAEE_ReadByte 0022  
            ??_updateNightRiseStatus 0020                      _checkIsYearLeap 16D0  
                    autoRun@duration 005F                           _RC1STAbits 019D  
                         _RB4PPSbits 0E9C                 ??_PWM3_LoadDutyValue 0022  
                         _RC3PPSbits 0EA3                           _RC4PPSbits 0EA4  
                       ?_bleSendData 0021                             int$flags 007E  
                         _RC5PPSbits 0EA5                           _RC6PPSbits 0EA6  
                  ??_TMR2_StartTimer 0020                           _RC7PPSbits 0EA7  
 __end_of_INTERRUPT_InterruptManager 041B           _INTERRUPT_InterruptManager 0404  
                        _saveLedPara 162B                        ??_writeBuffer 0028  
          __end_of_bleSendDeviceData 0BFD          PIN_MANAGER_Initialize@state 0020  
                        ??_keyAction 0075                ?i1_PWM4_LoadDutyValue 0070  
                           autoRun@i 006E                             autoRun@j 0066  
                           autoRun@k 006D            __end_of_updateNightBright 04C6  
                         _INTCONbits 000B                          _NVMCON1bits 0895  
                     writeBuffer@buf 0026                       writeBuffer@len 0027  
                checkIsYearLeap@year 0075                      readLedPara@addr 00A0  
         __end_ofi1_indicateLedNight 0693                      _updateDayBright 0494  
                    readLedPara@para 00A1                             intlevel1 0000  
                   ___lwmod@dividend 0072                     ___lldiv@dividend 0030  
            ?_PIN_MANAGER_Initialize 0070         __end_ofi1_PWM5_LoadDutyValue 06D2  
                        _PPSLOCKbits 0E0F                      _PWM1_Initialize 0F5A  
                       ?_BLE_SendCMD 0021                        ??i1_updatePWM 0074  
               __end_of_writeLedPara 164C          __size_of_PWM2_LoadDutyValue 0010  
                       ??_turnOffLed 0024                         ??_turnMaxLed 0024  
        PWM3_LoadDutyValue@dutyValue 0020                     bleSendData@frame 0021  
                        ??_updatePWM 0024                   bleSendDeviceData@i 0029  
                        ??_updateLed 0074                   i1updateDayBright@i 0074  
                   ___lldiv@quotient 0034                      ___lwmod@divisor 0070  
            __size_of_EUSART_RCV_ISR 0017                     ??_turnOffLedRamp 0020  
                    _TMR0_Initialize 15B9                      _PWM2_Initialize 0F64  
                      writeByte@addr 0025          __end_of_updateDayRiseStatus 0B13  
                    ___lwmod@counter 0074                        writeByte@byte 0024  
 __size_of_TMR2_UserInterruptHandler 001E      __end_ofi1_updateNightRiseStatus 06E8  
                __end_of_writeBuffer 165F         __size_ofi1_updateNightBright 0019  
         ?_TMR2_UserInterruptHandler 0070                          ??_writeByte 0025  
                 __end_of_turnMaxLed 046A                   __end_of_turnOffLed 0448  
     __end_of_PIN_MANAGER_Initialize 1625              __end_of_checkIsYearLeap 16EC  
                     keyScan@lastKey 007D                   updateNightBright@i 0024  
                        _PWMTMRSbits 061F                      keyScan@rptCount 007B  
         __end_of_PWM1_LoadDutyValue 0507                         _gCurrentTime 00D8  
      i1PWM2_LoadDutyValue@dutyValue 0070                      _PWM3_Initialize 0F6D  
